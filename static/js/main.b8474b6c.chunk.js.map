{"version":3,"sources":["components/burger/Burger.jsx","components/menu/MenuBody.jsx","components/menu/Menu.jsx","store/actions/applicationActions.js","store/actionTypes.js","containers/menuContainer.js","components/header/stat/statInfo/StatInfo.jsx","components/header/stat/statInfo/StatIntervalName.jsx","components/header/stat/Stat.jsx","containers/statContainer.js","components/header/Header.jsx","containers/headerContainer.js","components/piano/PianoKey.jsx","components/piano/PianoSection.jsx","components/piano/PianoBody.jsx","components/piano/Piano.jsx","containers/pianoContainer.js","components/buttonsGroup/ButtonsGroup.jsx","components/button/Button.jsx","components/intervals/LeftSideButtons.jsx","components/intervals/RightSideButtons.jsx","components/intervals/IntervalsOptionButtons.jsx","store/actions/statisticsActions.js","store/actions/pianoActions.js","containers/IntervalsOptionButtonsContainer.js","store/actions/intervalsActions.js","components/intervals/GroupOfIntervals.jsx","store/dataOfIntervals.js","components/intervals/ListOfIntervals.jsx","containers/listOfIntervalsContainer.js","components/intervals/Intervals.jsx","components/activateMidi/ActivateMidi.jsx","containers/activateMidiContainer.js","components/findNote/FindNote.jsx","containers/findNoteContainer.js","store/actions/notesActions.js","components/dictation/DictationPlayButtons.jsx","components/dictation/DictationOptionsButtons.jsx","components/dictation/DictationOutputElement.jsx","components/dictation/DictationOutput.jsx","components/modalWindow/ModalWindow.jsx","components/select/Select.jsx","components/dictation/selectComponents.jsx","components/dictation/DictationSettings.jsx","containers/dictationSettingsContainer.js","store/actions/dictationActions.js","components/dictation/Dictation.jsx","containers/dictationContainter.js","components/freeMode/FreeMode.jsx","containers/freeModeContainer.js","components/changeRangeOfNotes/OptionFromSelect.jsx","components/changeRangeOfNotes/SelectBody.jsx","store/arrayOfNotes.js","components/changeRangeOfNotes/SelectOfRange.jsx","components/changeRangeOfNotes/ChangeRangeOfNotes.jsx","containers/changeRangeOfNotesContainer.js","components/clearSettings/ClearSettingsModalBody.jsx","components/clearSettings/ClearSettings.jsx","containers/clearSettingsContainer.js","components/settings/playExampleButton/PlayExampleButton.jsx","components/inputRange/InputRange.jsx","components/echoSettings/EchoSettings.jsx","components/tempoSettings/TempoSettings.jsx","components/changeInstrument/instruments.js","components/changeInstrument/ChangeInstrument.jsx","components/keyboardSettings/HotKeyComponent.jsx","components/keyboardSettings/KeyboardSettings.jsx","components/settings/Settings.jsx","containers/settingsContainer.js","components/ErrorBoundary/ErrorBoundary.jsx","App.js","containers/appContainer.js","store/reducers/applicationReducer.js","store/reducers/pianoReducer.js","store/reducers/intervalsReducer.js","store/reducers/statisticsReducer.js","store/reducers/notesReducer.js","store/reducers/dictationReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["Burger","_ref","clickHandler","menuIsOpen","left","className","concat","react_default","a","createElement","onFocus","e","target","blur","style","onClick","MenuBody","react_router_dom","to","Menu","actionMenuAction","leftBurger","leftMenuBody","menuHandler","ReactDOM","createPortal","menu_MenuBody","burger_Burger","document","getElementById","isOpen","type","payload","actionNeedToWriteNote","bool","actionWritePlayNote","note","needToWriteNote","Object","objectSpread","id","Date","now","actionSetMode","mode","stat","actionKeyboardSetPlayFlag","actionSetModalWindowFlag","actionKeyboardSetPlayWrittenMelodyFlag","actionKeyboardSetChangeModeFlag","actionKeyboardSetDictationClearNoteFlag","actionKeyboardSetDictationCheckFlag","actionKeyboardSetIntervalButtonFlag","intervalButtonFlag","interval","arguments","length","undefined","actionKeyboardSetNewHotKeyFlag","mapDispatchToProps","connect","application","StatInfo","rightAnswers","amountOfAnswers","percent","Math","floor","round","Fragment","StatIntervalName","name","Stat","_ref$stat","nameOfInterval","right","showAnswer","statBody","statInfo_StatIntervalName","statInfo_StatInfo","classesNames","push","join","statistics","Statistics","Header","statContainer","PianoKey","elem","sharp","play","key","fullName","defaultProps","PianoSection","map","colorKey","includes","active","wrong","piano_PianoKey","PianoBody","arrOfNotes","elemJSX","piano_PianoSection","Piano","_this$props","this","props","piano_PianoBody","React","Component","piano","ButtonsGroup","children","classNames","cls","Button","disabled","LeftSideButtons","sequenceOfNotes","nextSequenceOfNotes","typeOfInterval","settingsIsOpen","sliceArr","duration","actionIntervalsSettingsAction","actionNextButtonClick","actionGetNextInterval","actionHideAnswer","actionUpdatePianoKeys","playFlag","playInterval","first","second","setTimeout","nextClickHandler","playButtonClasses","buttonsGroup_ButtonsGroup","button_Button","initNewIntervalSequence","RightSideButtons","actionSetActiveTypeOfInterval","changeModeFlag","primary","modes","melodicUp","melodicDown","harmonic","indexOfMode","indexOf","setModeFromKeyboard","IntervalsOptionButtons","actionStatisticsClearing","intervals_LeftSideButtons","intervals_RightSideButtons","actionIncrementRightAnswers","actionIncrementAmountOfAnswers","actionShowNotesOnThePiano","options","intervals","GroupOfIntervals","groupIndex","group","intervalClickHandler","activeKeyboardInterval","body","index","chosen","String","fromCharCode","rusName","dataOfIntervals","numberOfSemitones","getChosenIntervals","arr","filter","createGroupsOfIntervals","i","j","tmp","slice","getNewSequenceOfNotes","activeInterval","getBordersOfSequence","num","firstNote","random","secondNote","ListOfIntervals","allIntervals","actionInverseChosenInterval","actionShowTheCorrectInterval","intervalsKeyboardFlag","actionSetActiveKeyboardInterval","arrayOfGroups","sortedIntervals","sequence","intervalKeyboardActive","hasOwnProperty","intervals_GroupOfIntervals","visibility","obj","Intervals","IntervalsOptionButtonsContainer","listOfIntervalsContainer","ActivateMidi","state","status","onMIDIOnStateChange","event","_this","setState","port","manufacturer","requestMIDIAccessSuccess","midi","inputs","values","input","next","done","value","onmidimessage","midiOnMIDImessage","onstatechange","requestMIDIAccessFailure","velocity","data","eventKey","startListening","navigator","requestMIDIAccess","sysex","then","marginTop","marginBottom","FindNote","setVisualEffect","playNote","setRightVisualEffect","setWrongVisualEffect","_ref2","_ref3","options1","options2","playButtonHandler","setMode","answerButtonHandler","actionSetActiveNote","prevProps","_this$props2","notes","DictationPlayButtons","playGuessedMelody","playWrittenMelody","playWrittenMelodyFlag","playGuessedButtonClasses","playWrittenMelodyButtonClasses","DictationOptionsButtons","modeWrite","changeMode","clearButtonHandler","checkAnswerHandler","readyToCheck","answerGiven","nextPlayButtonHandler","settingsButtonHandler","access","clearButtonClasses","dictationClearNoteFlag","DictationOutputElement","rightAnswer","rightElem","rightElemJSX","octaveName","DictationOutput","amountOfNotes","sequenceOfMelody","sequenceOfWrittenMelody","answers","dictationOutputBody","elementJSX","dictation_DictationOutputElement","ModalWindow","modal","closeHandler","close","saveHandler","saveButtonHandler","cancelHandler","cancelButtonHandler","appendChild","overflowY","removeChild","saveButton","saveButtonName","cancelButton","cancelButtonName","Select","onChange","amountOfNotesOptions","SelectAmountOfNotes","select_Select","modesOptions","modePlay","ru","SelectModes","DictationSettings","defaultModeWrite","selectAmountOfNotesHandler","selectModesHandler","actionChangeSettings","_this$state","ModalWindow_ModalWindow","selectComponents_SelectAmountOfNotes","selectComponents_SelectModes","settingsObj","dictation","Dictation","setNewMelody","actionGetNewMelody","clearAnswers","actionWriteAnswers","playMelody","getKeysArrayOfMeloday","_loop","actionChangeMode","actionPopLastElemFromAnswerArray","arrKeysArrayOfMeloday","arrKeysArrayOfWrittenMeloday","checkAnswers","getArrayOfEqualsOfAnswers","changeStat","arr1","arr2","nextButtonHandler","actionClearWrittenMelody","modalWindowFlag","actionInitDictation","dictationCheckFlag","prevState","_this$props$dictation","actionAddNoteToAnswerArray","_this$props$dictation2","dictation_DictationPlayButtons","dictation_DictationOptionsButtons","dictation_DictationOutput","dictationSettingsContainer","FreeMode","OptionFromSelect","SelectBody","baseArrOfNotes","firstBorder","secondBorder","nameOfSelect","minAmountOfNotes","changeRangeOfNotes_OptionFromSelect","propType","PropTypes","number","isRequired","shape","string","arrayOf","object","SelectOfRange","actionSetBordersOfRange","valueOfSelect","field","selectChangeHandler","changeRangeOfNotes_SelectBody","ChangeRangeOfNotes","_ref$piano","changeRangeOfNotes_SelectOfRange","ClearSettingsModalBody","ClearSettings","modalOpenerHandler","modalCloserHandler","localStorage","clear","setInitialState","actionSetDataClearingFlag","dataIsClearing","clearSettings_ClearSettingsModalBody","PlayExampleButton","notesKeyArray","InputRange","levelValueStyle","level","onChangeHandler","min","max","step","EchoSettings","echoLevel","actionSetEchoLevel","inputRange_InputRange","TempoSettings","bpm","actionSetBpmLevel","instruments","ChangeInstrument","actionSetInstrumentId","instrumentId","selectBody","HotKeyComponent","hotKeys","title","hotKeyType","typeInState","newHotKey","newHotKeyType","hotKeyInState","needToChange","change","keyText","buttonText","KeyboardSettings","intervalHotKeyComponents","listOfIntervalsHotKeys","hotKey","keyboardSettings_HotKeyComponent","Settings","playExampleComponent","playExampleButton_PlayExampleButton","changeRangeOfNotesContainer","echoSettings_EchoSettings","tempoSettings_TempoSettings","changeInstrument_ChangeInstrument","keyboardSettings_KeyboardSettings","clearSettingsContainer","ErrorBoundary","hasError","reloadHandler","window","location","reload","App","keyboardEventListener","preventDefault","indexKeyboardInterval","closeHotKey","playHotKey","playWrittenMelodyHoteKey","changeModeHoteKey","dictationClearNoteHoteKey","dictationCheckHoteKey","onlyPlay","Error","_this2","midiSounds","setEchoLevel","addEventListener","onkeydown","playChordNow","_this3","ErrorBoundary_ErrorBoundary","menuContainer","headerContainer","pianoContainer","react_router","path","exact","render","freeModeContainer","intervals_Intervals","findNoteContainer","dictationContainter","settingsContainer","activateMidiContainer","display","midisoundsreact_default","ref","appElementName","modeDictation","mapIndex","initialState","BASE_NAMES","NAMES_OF_OCTAVES","0","1","2","3","4","5","6","7","8","BASE_START_NOTE","BASE_FINISH_NOTE","octaveNumber","getBaseArrayOfNotes","start","finish","getFullArrayAndMapIndexes","k","nextObj","section","addNewFields","getIndexes","indexesOfNote","toConsumableArray","forEach","element","_getIndexes","apply","getNewActiveInterval","getNewInterval","nextActiveInterval","combineReducers","action","_getFullArrayAndMapIn2","_action$payload","reduce","sum","findIndex","_getNewData","getNewData","getNewMelody","pop","persistedState","getItem","JSON","parse","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","sliceState","_state$intervals","setItem","stringify","es","appContainer"],"mappings":"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","file":"static/js/main.b8474b6c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./burger.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Burger = ({ clickHandler, menuIsOpen, left }) => {\r\n  const className = `burger${menuIsOpen ? \" active\" : \"\"}`;\r\n  return (\r\n    <div onFocus={(e) => { e.target.blur(); }} style={{ left: left }} className={className} onClick={clickHandler}>\r\n      <span />\r\n      <span />\r\n      <span />\r\n    </div>\r\n  );\r\n};\r\n\r\nBurger.propTypes = {\r\n  clickHandler: PropTypes.func.isRequired,\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  left: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Burger;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MenuBody = ({ left, clickHandler }) => {\r\n  return (\r\n    <div className=\"menu-body\" style={{ left: left }}>\r\n      <nav className=\"nav\">\r\n        <NavLink onClick={clickHandler} to=\"/\">\r\n          Свободная игра\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/find-note\">\r\n          Искать ноту\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/intervals\">\r\n          Поиск Интервала\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/dictation\">\r\n          Музыкальный диктант\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/options\">\r\n          Настройки\r\n        </NavLink>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nMenuBody.propTypes = {\r\n  left: PropTypes.string.isRequired,\r\n  clickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MenuBody;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./menu.css\";\r\n\r\nimport Burger from \"../burger/Burger\";\r\nimport MenuBody from \"./MenuBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Menu = ({ menuIsOpen, actionMenuAction }) => {\r\n  const leftBurger = menuIsOpen ? \"260px\" : \"10px\";\r\n  const leftMenuBody = menuIsOpen ? \"0px\" : \"-1000px\";\r\n\r\n  const menuHandler = () => {\r\n    actionMenuAction();\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"menu\">\r\n      <MenuBody left={leftMenuBody} clickHandler={menuHandler} />\r\n      <Burger\r\n        left={leftBurger}\r\n        clickHandler={menuHandler}\r\n        menuIsOpen={menuIsOpen}\r\n      />\r\n    </div>,\r\n    document.getElementById(\"menu\")\r\n  );\r\n};\r\n\r\nMenu.propTypes = {\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  actionMenuAction: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Menu;\r\n","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE,\r\n  SET_INITIAL_STATE,\r\n  SET_ECHO_LEVEL,\r\n  SET_BPM_LEVEL,\r\n  SET_INSTRUMENTID,\r\n  KEYBOARD_SET_PLAY_FLAG,\r\n  SET_MODAL_WINDOW_FLAG,\r\n  DATA_CLEARING_FLAG,\r\n  KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  KEYBOARD_SET_NEW_HOT_KEY_FLAG\r\n} from \"../actionTypes\";\r\n\r\nexport const actionMenuAction = isOpen => ({\r\n  type: MENU_ACTION,\r\n  payload: { isOpen }\r\n});\r\n\r\nexport const actionNeedToWriteNote = bool => ({\r\n  type: NEED_TO_WRITE_NOTE,\r\n  payload: bool\r\n});\r\n\r\nexport const actionWritePlayNote = (note, needToWriteNote) => ({\r\n  type: WRITE_PLAY_NOTE,\r\n  needToWriteNote,\r\n  payload: { ...note, id: Date.now() }\r\n});\r\n\r\nexport const actionInitDictation = bool => ({\r\n  type: INIT_DICTATION,\r\n  payload: bool\r\n});\r\n\r\nexport const actionSetMode = ({ mode, stat }) => ({\r\n  type: SET_MODE,\r\n  payload: { mode, stat }\r\n});\r\n\r\nexport const actionApplicationSetInitialState = () => ({\r\n  type: SET_INITIAL_STATE\r\n});\r\n\r\nexport const actionSetEchoLevel = (payload) => ({\r\n  type: SET_ECHO_LEVEL,\r\n  payload\r\n});\r\n\r\nexport const actionSetBpmLevel = (payload) => ({\r\n  type: SET_BPM_LEVEL,\r\n  payload\r\n});\r\n\r\nexport const actionSetInstrumentId = (payload) => ({\r\n  type: SET_INSTRUMENTID,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetPlayFlag = (payload) => ({\r\n  type: KEYBOARD_SET_PLAY_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionSetModalWindowFlag = (payload) => ({\r\n  type: SET_MODAL_WINDOW_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionSetDataClearingFlag = (payload) => ({\r\n  type: DATA_CLEARING_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetPlayWrittenMelodyFlag = (payload) => ({\r\n  type: KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetChangeModeFlag = (payload) => ({\r\n  type: KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetDictationClearNoteFlag = (payload) => ({\r\n  type: KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetDictationCheckFlag = (payload) => ({\r\n  type: KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetIntervalButtonFlag = (bool, interval = 0) => ({\r\n  type: KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  payload: {\r\n    intervalButtonFlag: bool,\r\n    interval\r\n  }\r\n});\r\n\r\nexport const actionKeyboardSetNewHotKeyFlag = (payload) => ({\r\n  type: KEYBOARD_SET_NEW_HOT_KEY_FLAG,\r\n  payload\r\n});\r\n","export const MENU_ACTION = \"MENU_ACTION\";\r\nexport const NEED_TO_WRITE_NOTE = \"NEED_TO_WRITE_NOTE\";\r\nexport const WRITE_PLAY_NOTE = \"WRITE_PLAY_NOTE\";\r\nexport const INIT_DICTATION = \"INIT_DICTATION\";\r\nexport const SET_MODE = \"SET_MODE\";\r\nexport const SET_ECHO_LEVEL = \"SET_ECHO_LEVEL\";\r\nexport const SET_BPM_LEVEL = \"SET_BPM_LEVEL\";\r\nexport const SET_INSTRUMENTID = \"SET_INSTRUMENTID\";\r\nexport const SET_MODAL_WINDOW_FLAG = \"SET_MODAL_WINDOW_FLAG\";\r\nexport const DATA_CLEARING_FLAG = \"DATA_CLEARING_FLAG\";\r\nexport const KEYBOARD_SET_PLAY_FLAG = \"KEYBOARD_SET_PLAY_FLAG\";\r\nexport const KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG = \"KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG\";\r\nexport const KEYBOARD_SET_CHANGE_MODE_FLAG = \"KEYBOARD_SET_CHANGE_MODE_FLAG\";\r\nexport const KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG = \"KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG\";\r\nexport const KEYBOARD_SET_DICTATION_CHECK_FLAG = \"KEYBOARD_SET_DICTATION_CHECK_FLAG\";\r\nexport const KEYBOARD_SET_INTERVAL_BUTTON_FLAG = \"KEYBOARD_SET_INTERVAL_BUTTON_FLAG\";\r\nexport const KEYBOARD_SET_NEW_HOT_KEY_FLAG = \"KEYBOARD_SET_NEW_HOT_KEY_FLAG\";\r\n\r\nexport const UPDATE_PIANO_KEYS = \"UPDATE_PIANO_KEYS\";\r\nexport const SET_BORDERS_OF_RANGE = \"SET_BORDERS_OF_RANGE\";\r\nexport const SHOW_NOTES_ON_THE_PIANO = \"SHOW_NOTES_ON_THE_PIANO\";\r\n\r\nexport const SET_ACTIVE_NOTE = \"SET_ACTIVE_NOTE\";\r\n\r\nexport const SET_ACTIVE_TYPE_OF_INTERVAL = \"SET_ACTIVE_TYPE_OF_INTERVAL\";\r\nexport const SET_NEW_INTERVAL = \"SET_NEW_INTERVAL\";\r\nexport const INTERVALS_SETTINGS_ACTION = \"INTERVALS_SETTINGS_ACTION\";\r\nexport const INVERSE_CHOSEN_INTERVAL = \"INVERSE_CHOSEN_INTERVAL\";\r\nexport const GET_ANSWER_INTERVAL = \"GET_ANSWER_INTERVAL\";\r\nexport const GET_NEXT_INTERVAL = \"GET_NEXT_INTERVAL\";\r\nexport const SET_ACTIVE_KEYBOARD_INTERVAL = \"SET_ACTIVE_KEYBOARD_INTERVAL\";\r\n\r\nexport const SHOW_THE_CORRECT_INTERVAL = \"SHOW_THE_CORRECT_INTERVAL\";\r\nexport const INCREMENT_RIGHT_ANSWERS = \"INCREMENT_RIGHT_ANSWERS\";\r\nexport const INCREMENT_AMOUNT_OF_ANSWERS = \"INCREMENT_AMOUNT_OF_ANSWERS\";\r\nexport const NEXT_BUTTON_CLICK = \"NEXT_BUTTON_CLICK\";\r\nexport const STATISTICS_CLEARING = \"STATISTICS_CLEARING\";\r\nexport const STATISTICS_HIDE_ANSWER = \"STATISTICS_HIDE_ANSWER\";\r\n\r\nexport const GET_NEW_MELODY = \"GET_NEW_MELODY\";\r\nexport const CHANGE_MODE = \"CHANGE_MODE\";\r\nexport const ADD_NOTE_TO_ANSWER_ARRAY = \"ADD_NOTE_TO_ANSWER_ARRAY\";\r\nexport const POP_LAST_ELEM_FROM_ANSWER_ARRAY =\r\n  \"POP_LAST_ELEM_FROM_ANSWER_ARRAY\";\r\nexport const WRITE_ANSWERS = \"WRITE_ANSWERS\";\r\nexport const CLEAR_WRITTEN_MELODY = \"CLEAR_WRITTEN_MELODY\";\r\nexport const CHANGE_SETTINGS = \"CHANGE_SETTINGS\";\r\n\r\nexport const SET_INITIAL_STATE = \"SET_INITIAL_STATE\";\r\n","import Menu from \"../components/menu/Menu\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionMenuAction } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n  menuIsOpen: application.menuIsOpen\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Menu);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatInfo = ({ rightAnswers, amountOfAnswers }) => {\r\n  const percent =\r\n    amountOfAnswers !== 0\r\n      ? Math.floor(Math.round((rightAnswers / amountOfAnswers) * 100))\r\n      : \"0\";\r\n  return (\r\n    <React.Fragment>\r\n      <span>{rightAnswers}</span>&nbsp;/&nbsp;\r\n      <span>{amountOfAnswers}</span>&nbsp;\r\n      <span>({percent}%)</span>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nStatInfo.propTypes = {\r\n  rightAnswers: PropTypes.number.isRequired,\r\n  amountOfAnswers: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatInfo;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatIntervalName = ({ name }) => {\r\n  return <span>{name}</span>;\r\n};\r\n\r\nStatIntervalName.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default StatIntervalName;\r\n","import React from \"react\";\r\nimport StatInfo from \"./statInfo/StatInfo\";\r\nimport StatIntervalName from \"./statInfo/StatIntervalName\";\r\nimport \"./stat.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stat = ({\r\n  stat: { nameOfInterval, right, rightAnswers, amountOfAnswers, showAnswer }\r\n}) => {\r\n  const statBody = nameOfInterval ? (\r\n    <StatIntervalName name={nameOfInterval} />\r\n  ) : (\r\n      <StatInfo rightAnswers={rightAnswers} amountOfAnswers={amountOfAnswers} />\r\n    );\r\n\r\n  let classesNames = [\"stat\"];\r\n\r\n  if (showAnswer) {\r\n    if (right) {\r\n      classesNames.push(\"rightAnswer\");\r\n    } else {\r\n      classesNames.push(\"wrongAnswer\");\r\n    }\r\n  }\r\n\r\n  return <div className={classesNames.join(\" \")}>{statBody}</div>;\r\n};\r\n\r\nStat.propTypes = {\r\n  stat: PropTypes.shape({\r\n    nameOfInterval: PropTypes.string,\r\n    right: PropTypes.bool.isRequired,\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired\r\n};\r\n\r\nexport default Stat;\r\n","import Statistics from \"../components/header/stat/Stat\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ statistics }) => ({\r\n  stat: statistics\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);\r\n","import React from \"react\";\r\nimport Stat from \"../../containers/statContainer\";\r\nimport \"./header.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ stat, mode }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      {stat ? <Stat /> : null}\r\n      {mode ? <h2>{mode}</h2> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  stat: PropTypes.bool.isRequired,\r\n  mode: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import Header from \"../components/header/Header\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n\tmode: application.mode,\r\n\tstat: application.stat\r\n});\r\n\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoKey = ({ elem, className, sharp, play }) => {\r\n  const handleClick = () => {\r\n    play(elem.key);\r\n  };\r\n  return (\r\n    <div className={className.join(\" \")} onClick={handleClick}>\r\n      {sharp ? elem.name : elem.fullName}\r\n    </div>\r\n  );\r\n};\r\n\r\nPianoKey.propTypes = {\r\n  elem: PropTypes.shape({\r\n    key: PropTypes.number,\r\n    name: PropTypes.string,\r\n    fullName: PropTypes.string\r\n  }),\r\n  className: PropTypes.arrayOf(PropTypes.string),\r\n  sharp: PropTypes.bool,\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoKey.defaultProps = {\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoKey;\r\n","import React from \"react\";\r\nimport PianoKey from \"./PianoKey\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoSection = ({ elem, play }) => {\r\n  const section = elem.map(elem => {\r\n    const sharp = elem.name.includes(\"#\");\r\n    let className = [\"piano-key\"];\r\n    const colorKey = sharp ? \"piano-black-key\" : \"piano-white-key\";\r\n    className.push(colorKey);\r\n\r\n    if (elem.active) {\r\n      className.push(\"piano-key-active\");\r\n    }\r\n    if (elem.right) {\r\n      className.push(\"piano-key-right\");\r\n    }\r\n\r\n    if (elem.wrong) {\r\n      className.push(\"piano-key-wrong\");\r\n    }\r\n\r\n    return (\r\n      <PianoKey play={play} key={elem.key} elem={elem} className={className} />\r\n    );\r\n  });\r\n\r\n  return section;\r\n};\r\n\r\nPianoSection.propTypes = {\r\n  play: PropTypes.func,\r\n  elem: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nPianoSection.defaultProps = {\r\n  play: () => {},\r\n  elem: []\r\n};\r\n\r\nexport default PianoSection;\r\n","import React from \"react\";\r\nimport PianoSection from \"./PianoSection\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoBody = ({ arrOfNotes, play }) => {\r\n  const bodyPiano = arrOfNotes.map(elem => {\r\n    const elemJSX = <PianoSection elem={elem} play={play} />;\r\n    return (\r\n      <div key={elem[0].fullName} className={\"piano-keys-section\"}>\r\n        {elemJSX}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return bodyPiano;\r\n};\r\n\r\nPianoBody.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoBody.defaultProps = {\r\n  arrOfNotes: [],\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoBody;\r\n","import React from \"react\";\r\n\r\nimport \"./piano.css\";\r\nimport PianoBody from \"./PianoBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Piano extends React.Component {\r\n  render() {\r\n    const { arrOfNotes, play } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"piano\">\r\n          <PianoBody arrOfNotes={arrOfNotes} play={play} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPiano.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Piano;\r\n","import Piano from \"../components/piano/Piano\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  arrOfNotes: piano.arrOfNotes\r\n});\r\n\r\nexport default connect(mapStateToProps)(Piano);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./buttonsGroup.css\";\r\n\r\nconst ButtonsGroup = ({ children, cls }) => {\r\n    let classNames = [\"buttonGroup\", cls];\r\n    return <div className={classNames.join(\" \")}>{children}</div>;\r\n};\r\n\r\nButtonsGroup.propTypes = {\r\n    children: PropTypes.array,\r\n    cls: PropTypes.string\r\n};\r\n\r\nButtonsGroup.defaultProps = {\r\n    children: \"\",\r\n    cls: \"horizontal\"\r\n};\r\nexport default ButtonsGroup;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ onClick, children, cls, active, disabled }) => {\r\n  let classNames = [\"button\", cls];\r\n\r\n  if (active) {\r\n    classNames.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames.join(\" \")}\r\n      disabled={disabled}\r\n      onFocus={(e) => { e.target.blur(); }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\r\n  onClick: PropTypes.func,\r\n  cls: PropTypes.string,\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nButton.defaultProps = {\r\n  children: \"click\",\r\n  onClick: () => { },\r\n  cls: \"secondary-outline\",\r\n  active: false\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LeftSideButtons = ({\r\n  sequenceOfNotes,\r\n  nextSequenceOfNotes,\r\n  typeOfInterval,\r\n  settingsIsOpen,\r\n  showAnswer,\r\n  sliceArr,\r\n  duration,\r\n  play,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionHideAnswer,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  playFlag\r\n}) => {\r\n  const playInterval = () => {\r\n    let first, second;\r\n\r\n    if (showAnswer) {\r\n      first = nextSequenceOfNotes[0];\r\n      second = nextSequenceOfNotes[1];\r\n    } else {\r\n      first = sequenceOfNotes[0];\r\n      second = sequenceOfNotes[1];\r\n    }\r\n\r\n    switch (typeOfInterval) {\r\n      case \"melodicUp\": {\r\n        play(first);\r\n        setTimeout(() => {\r\n          play(second);\r\n        }, duration * 1000);\r\n        break;\r\n      }\r\n      case \"melodicDown\": {\r\n        play(second);\r\n        setTimeout(() => {\r\n          play(first);\r\n        }, duration * 1000);\r\n        break;\r\n      }\r\n      case \"harmonic\": {\r\n        play(first);\r\n        play(second);\r\n        break;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const nextClickHandler = () => {\r\n    actionNextButtonClick(!settingsIsOpen);\r\n    actionGetNextInterval({ sliceArr });\r\n    actionUpdatePianoKeys();\r\n    actionHideAnswer();\r\n    playInterval();\r\n  };\r\n\r\n  const optionsClickHandler = () => {\r\n    actionIntervalsSettingsAction(!settingsIsOpen);\r\n    const initNewIntervalSequence = true;\r\n\r\n    if (settingsIsOpen) {\r\n      actionNextButtonClick();\r\n      actionUpdatePianoKeys();\r\n      actionHideAnswer();\r\n      actionGetNextInterval({ sliceArr, initNewIntervalSequence });\r\n    }\r\n  };\r\n\r\n  if (playFlag && !settingsIsOpen) {\r\n    setTimeout(() => {\r\n      actionKeyboardSetPlayFlag(false);\r\n    }, 300);\r\n    if (showAnswer) {\r\n      nextClickHandler();\r\n\r\n    } else {\r\n      playInterval();\r\n    }\r\n  } else {\r\n    actionKeyboardSetPlayFlag(false);\r\n  }\r\n\r\n  const playButtonClasses = [(settingsIsOpen ? \"secondary\" : \"info\")];\r\n\r\n  if (playFlag) {\r\n    playButtonClasses.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={playButtonClasses.join(\" \")}\r\n        disabled={settingsIsOpen ? true : false}\r\n        onClick={showAnswer ? nextClickHandler : playInterval}\r\n      >\r\n        {showAnswer ? \"Дальше\" : \"Играть интервал\"}\r\n      </Button>\r\n      <Button\r\n        cls={settingsIsOpen ? \"info\" : \"secondary\"}\r\n        onClick={optionsClickHandler}\r\n      >\r\n        {settingsIsOpen ? \"Установить\" : \"Настройки\"}\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nLeftSideButtons.propTypes = {\r\n  settingsIsOpen: PropTypes.bool,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default LeftSideButtons;\r\n\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RightSideButtons = ({\r\n  actionSetActiveTypeOfInterval,\r\n  typeOfInterval,\r\n  changeModeFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n}) => {\r\n  const primary = \"primary active\";\r\n  const primaryOutline = \"primary-outline\";\r\n  const modes = [\"melodicUp\", \"melodicDown\", \"harmonic\"];\r\n\r\n  const melodicUp = typeOfInterval === modes[0];\r\n  const melodicDown = typeOfInterval === modes[1];\r\n  const harmonic = typeOfInterval === modes[2];\r\n\r\n  const setModeFromKeyboard = () => {\r\n    const indexOfMode = modes.indexOf(typeOfInterval);\r\n\r\n    if (indexOfMode !== -1) {\r\n      actionSetActiveTypeOfInterval(modes[(indexOfMode + 1) % modes.length]);\r\n    }\r\n  };\r\n\r\n  if (changeModeFlag) {\r\n    actionKeyboardSetChangeModeFlag(false);\r\n    setModeFromKeyboard();\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={melodicUp ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[0]);\r\n        }}\r\n        disabled={melodicUp ? true : false}\r\n      >\r\n        Мелодический вверх\r\n      </Button>\r\n      <Button\r\n        cls={melodicDown ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[1]);\r\n        }}\r\n        disabled={melodicDown ? true : false}\r\n      >\r\n        Мелодический вниз\r\n      </Button>\r\n      <Button\r\n        cls={harmonic ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[2]);\r\n        }}\r\n        disabled={harmonic ? true : false}\r\n      >\r\n        Гармонический\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nRightSideButtons.propTypes = {\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n\r\n};\r\n\r\nexport default RightSideButtons;\r\n","import React from \"react\";\r\nimport LeftSideButtons from \"./LeftSideButtons\";\r\nimport RightSideButtons from \"./RightSideButtons\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass IntervalsOptionButtons extends React.Component {\r\n  componentDidMount() {\r\n    const initNewIntervalSequence = true;\r\n\r\n    if (this.props.settingsIsOpen) {\r\n      this.props.actionIntervalsSettingsAction(false);\r\n    }\r\n\r\n    this.props.actionGetNextInterval({\r\n      sliceArr: this.props.sliceArr,\r\n      initNewIntervalSequence\r\n    });\r\n\r\n    this.props.actionSetMode({ mode: \"Поиск интервала\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionIntervalsSettingsAction(false);\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sliceArr,\r\n      play,\r\n      typeOfInterval,\r\n      sequenceOfNotes,\r\n      nextSequenceOfNotes,\r\n      settingsIsOpen,\r\n      showAnswer,\r\n      duration,\r\n      actionSetActiveTypeOfInterval,\r\n      actionIntervalsSettingsAction,\r\n      actionNextButtonClick,\r\n      actionGetNextInterval,\r\n      actionHideAnswer,\r\n      actionUpdatePianoKeys,\r\n      playFlag,\r\n      actionKeyboardSetPlayFlag,\r\n      changeModeFlag,\r\n      actionKeyboardSetChangeModeFlag\r\n    } = this.props;\r\n\r\n\r\n    return (\r\n      <div className=\"intervalsOptionsButtons\">\r\n        <LeftSideButtons\r\n          sequenceOfNotes={sequenceOfNotes}\r\n          nextSequenceOfNotes={nextSequenceOfNotes}\r\n          typeOfInterval={typeOfInterval}\r\n          settingsIsOpen={settingsIsOpen}\r\n          showAnswer={showAnswer}\r\n          sliceArr={sliceArr}\r\n          duration={duration}\r\n          play={play}\r\n          actionIntervalsSettingsAction={actionIntervalsSettingsAction}\r\n          actionNextButtonClick={actionNextButtonClick}\r\n          actionGetNextInterval={actionGetNextInterval}\r\n          actionUpdatePianoKeys={actionUpdatePianoKeys}\r\n          actionHideAnswer={actionHideAnswer}\r\n          playFlag={playFlag}\r\n          actionKeyboardSetPlayFlag={actionKeyboardSetPlayFlag}\r\n        />\r\n        <RightSideButtons\r\n          typeOfInterval={typeOfInterval}\r\n          actionSetActiveTypeOfInterval={actionSetActiveTypeOfInterval}\r\n          changeModeFlag={changeModeFlag}\r\n          actionKeyboardSetChangeModeFlag={actionKeyboardSetChangeModeFlag}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIntervalsOptionButtons.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  duration: PropTypes.number.isRequired,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  settingsIsOpen: PropTypes.bool,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n\r\n\r\n\r\n};\r\n\r\nexport default IntervalsOptionButtons;\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nexport const actionIncrementRightAnswers = name => ({\r\n  type: INCREMENT_RIGHT_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionIncrementAmountOfAnswers = name => ({\r\n  type: INCREMENT_AMOUNT_OF_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionNextButtonClick = name => ({\r\n  type: NEXT_BUTTON_CLICK,\r\n  payload: name\r\n});\r\n\r\nexport const actionStatisticsClearing = () => ({\r\n  type: STATISTICS_CLEARING\r\n});\r\n\r\nexport const actionHideAnswer = () => ({\r\n  type: STATISTICS_HIDE_ANSWER\r\n});\r\n\r\n","import {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO\r\n} from \"../actionTypes\";\r\n\r\nexport const actionUpdatePianoKeys = () => ({\r\n  type: UPDATE_PIANO_KEYS\r\n});\r\n\r\nexport const actionSetBordersOfRange = arr => ({\r\n  type: SET_BORDERS_OF_RANGE,\r\n  payload: { firstBorder: arr[0], secondBorder: arr[1] }\r\n});\r\n\r\nexport const actionShowNotesOnThePiano = payload => ({\r\n  type: SHOW_NOTES_ON_THE_PIANO,\r\n  payload\r\n});\r\n","import IntervalsOptionButtons from \"../components/intervals/IntervalsOptionButtons\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionGetNextInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionNextButtonClick,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionUpdatePianoKeys } from \"../store/actions/pianoActions\";\r\n\r\nimport { actionSetMode, actionKeyboardSetPlayFlag, actionKeyboardSetChangeModeFlag } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ intervals, piano, application }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  sequenceOfNotes: intervals.sequenceOfNotes,\r\n  nextSequenceOfNotes: intervals.nextSequenceOfNotes,\r\n  typeOfInterval: intervals.typeOfInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  settingsIsOpen: intervals.settingsIsOpen,\r\n  duration: application.duration,\r\n  playFlag: application.playFlag,\r\n  changeModeFlag: application.changeModeFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionStatisticsClearing,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IntervalsOptionButtons);\r\n","import {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  GET_ANSWER_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL,\r\n  SET_ACTIVE_KEYBOARD_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nexport const actionSetActiveTypeOfInterval = active => ({\r\n  type: SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  payload: active\r\n});\r\n\r\nexport const actionIntervalsSettingsAction = payload => ({\r\n  type: INTERVALS_SETTINGS_ACTION,\r\n  payload\r\n});\r\n\r\nexport const actionInverseChosenInterval = obj => ({\r\n  type: INVERSE_CHOSEN_INTERVAL,\r\n  payload: obj\r\n});\r\n\r\nexport const actionGetAnswerIntervals = () => ({\r\n  type: GET_ANSWER_INTERVAL\r\n});\r\n\r\nexport const actionShowTheCorrectInterval = () => ({\r\n  type: SHOW_THE_CORRECT_INTERVAL\r\n});\r\n\r\nexport const actionGetNextInterval = options => ({\r\n  type: GET_NEXT_INTERVAL,\r\n  payload: options\r\n});\r\n\r\nexport const actionSetActiveKeyboardInterval = obj => ({\r\n  type: SET_ACTIVE_KEYBOARD_INTERVAL,\r\n  payload: obj\r\n});\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GroupOfIntervals = ({\r\n  groupIndex,\r\n  group,\r\n  settingsIsOpen,\r\n  intervalClickHandler,\r\n  activeKeyboardInterval\r\n}) => {\r\n\r\n  const body = group.map((interval, index) => {\r\n\r\n    let cls = [\"secondary-outline\"];\r\n\r\n    if (activeKeyboardInterval && activeKeyboardInterval.name && activeKeyboardInterval.name === interval.name) {\r\n      cls.push(\"active\");\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        key={interval.name}\r\n        onClick={() => {\r\n          intervalClickHandler(interval);\r\n        }}\r\n        cls={cls.join(\" \")}\r\n      >\r\n        {settingsIsOpen ? (\r\n          <span className=\"check\">\r\n            {interval.chosen\r\n              ? String.fromCharCode(10003)\r\n              : String.fromCharCode(215)}\r\n          </span>\r\n        ) : null}\r\n        <b>{groupIndex * 4 + index + 1})&nbsp;</b>{interval.rusName}\r\n      </Button>\r\n    );\r\n  });\r\n\r\n  GroupOfIntervals.propTypes = {\r\n    groupIndex: PropTypes.number.isRequired,\r\n    group: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    settingsIsOpen: PropTypes.bool,\r\n    intervalClickHandler: PropTypes.func.isRequired,\r\n    activeKeyboardInterval: PropTypes.object\r\n  };\r\n\r\n  return <ButtonsGroup cls=\"vertical\">{body}</ButtonsGroup>;\r\n};\r\n\r\nexport default GroupOfIntervals;\r\n","export const dataOfIntervals = [\r\n  {\r\n    name: \"minorSecond\",\r\n    rusName: \"Малая Секунда\",\r\n    numberOfSemitones: 1,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSecond\",\r\n    rusName: \"Большая Секунда\",\r\n    numberOfSemitones: 2,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorThird\",\r\n    rusName: \"Малая Терция\",\r\n    numberOfSemitones: 3,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorThird\",\r\n    rusName: \"Большая Терция\",\r\n    numberOfSemitones: 4,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFourth\",\r\n    rusName: \"Чистая Кварта\",\r\n    numberOfSemitones: 5,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"triton\",\r\n    rusName: \"Тритон\",\r\n    numberOfSemitones: 6,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFifth\",\r\n    rusName: \"Чистая Квинта\",\r\n    numberOfSemitones: 7,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSixth\",\r\n    rusName: \"Малая Секста\",\r\n    numberOfSemitones: 8,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSixth\",\r\n    rusName: \"Большая Секста\",\r\n    numberOfSemitones: 9,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSeventh\",\r\n    rusName: \"Малая Септима\",\r\n    numberOfSemitones: 10,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSeventh\",\r\n    rusName: \"Большая Септима\",\r\n    numberOfSemitones: 11,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"octave\",\r\n    rusName: \"Октава\",\r\n    numberOfSemitones: 12,\r\n    chosen: true\r\n  }\r\n];\r\n\r\nexport const getChosenIntervals = arr => {\r\n  return arr.filter(elem => {\r\n    return elem.chosen;\r\n  });\r\n};\r\n\r\nexport const createGroupsOfIntervals = arr => {\r\n  const chunk = 4;\r\n  var i,\r\n    j,\r\n    tmp = [];\r\n  for (i = 0, j = arr.length; i < j; i += chunk) {\r\n    tmp.push(arr.slice(i, i + chunk));\r\n  }\r\n  return tmp;\r\n};\r\n\r\nexport const getNewInterval = arr => {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n};\r\n\r\nexport const getNewSequenceOfNotes = (sliceArr, activeInterval) => {\r\n  const { numberOfSemitones } = activeInterval;\r\n\r\n  const sequence = getBordersOfSequence(sliceArr, numberOfSemitones);\r\n\r\n  return sequence;\r\n};\r\n\r\nconst getBordersOfSequence = (arr, num) => {\r\n  let firstNote = arr[Math.floor(Math.random() * arr.length)];\r\n  let secondNote = arr[arr.indexOf(firstNote) + num];\r\n\r\n  if (!secondNote) {\r\n    secondNote = arr[arr.length - 1];\r\n    firstNote = arr[arr.indexOf(secondNote) - num];\r\n  }\r\n\r\n  return [firstNote.key, secondNote.key];\r\n};\r\n","import React from \"react\";\r\nimport GroupOfIntervals from \"./GroupOfIntervals\";\r\n\r\nimport {\r\n  getChosenIntervals,\r\n  createGroupsOfIntervals\r\n} from \"../../store/dataOfIntervals\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListOfIntervals = ({\r\n  settingsIsOpen,\r\n  allIntervals,\r\n  activeInterval,\r\n  showAnswer,\r\n  sequenceOfNotes,\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano,\r\n  intervalsKeyboardFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionSetActiveKeyboardInterval,\r\n  activeKeyboardInterval\r\n}) => {\r\n  let arrayOfGroups = [];\r\n  let sortedIntervals = [];\r\n\r\n  if (settingsIsOpen) {\r\n    sortedIntervals = allIntervals;\r\n    arrayOfGroups = createGroupsOfIntervals(sortedIntervals);\r\n  } else {\r\n    sortedIntervals = getChosenIntervals(allIntervals);\r\n    arrayOfGroups = createGroupsOfIntervals(getChosenIntervals(allIntervals));\r\n  }\r\n\r\n  const checkAnswer = interval => {\r\n    actionShowTheCorrectInterval();\r\n    const right = activeInterval.name === interval.name;\r\n    const type = right ? \"right\" : \"wrong\";\r\n\r\n    if (right) {\r\n      actionIncrementRightAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    } else {\r\n      actionIncrementAmountOfAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    }\r\n  };\r\n\r\n  const intervalClickHandler = settingsIsOpen\r\n    ? actionInverseChosenInterval\r\n    : checkAnswer;\r\n\r\n  if (intervalsKeyboardFlag.intervalButtonFlag) {\r\n    const intervalKeyboardActive = sortedIntervals[intervalsKeyboardFlag.interval];\r\n\r\n    actionKeyboardSetIntervalButtonFlag(false);\r\n    actionSetActiveKeyboardInterval(intervalKeyboardActive);\r\n\r\n    setTimeout(() => {\r\n      // console.log(intervalClickHandler);\r\n      intervalClickHandler(intervalKeyboardActive);\r\n    }, 150);\r\n\r\n  }\r\n\r\n  if (activeKeyboardInterval && activeKeyboardInterval.hasOwnProperty(\"name\")) {\r\n    setTimeout(() => {\r\n      actionSetActiveKeyboardInterval({});\r\n    }, 150);\r\n  }\r\n\r\n  const body = arrayOfGroups.map((group, groupIndex) => (\r\n    <GroupOfIntervals\r\n      groupIndex={groupIndex}\r\n      group={group}\r\n      key={group[0].name}\r\n      settingsIsOpen={settingsIsOpen}\r\n      intervalClickHandler={intervalClickHandler}\r\n      activeKeyboardInterval={activeKeyboardInterval}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className=\"listOfIntervals\"\r\n      style={showAnswer && !settingsIsOpen ? { visibility: \"hidden\" } : null}\r\n    >\r\n      {body}\r\n    </div>\r\n  );\r\n};\r\n\r\nListOfIntervals.propTypes = {\r\n  actionInverseChosenInterval: PropTypes.func.isRequired,\r\n  actionShowTheCorrectInterval: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  allIntervals: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  activeInterval: PropTypes.object,\r\n  showAnswer: PropTypes.bool,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  settingsIsOpen: PropTypes.bool,\r\n  intervalsKeyboardFlag: PropTypes.shape({\r\n    intervalButtonFlag: PropTypes.bool.isRequired,\r\n    interval: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  actionKeyboardSetIntervalButtonFlag: PropTypes.func.isRequired,\r\n  activeKeyboardInterval: PropTypes.object,\r\n  actionSetActiveKeyboardInterval: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListOfIntervals;\r\n","import ListOfIntervals from \"../components/intervals/ListOfIntervals\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionSetActiveKeyboardInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport {\r\n  actionKeyboardSetIntervalButtonFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport { actionShowNotesOnThePiano } from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ intervals, application }) => ({\r\n  settingsIsOpen: intervals.settingsIsOpen,\r\n  allIntervals: intervals.allIntervals,\r\n  activeInterval: intervals.activeInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  sequenceOfNotes: intervals.sequenceOfNotes,\r\n  activeKeyboardInterval: intervals.activeKeyboardInterval,\r\n  intervalsKeyboardFlag: application.intervalsKeyboardFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionSetActiveKeyboardInterval\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ListOfIntervals);\r\n","import React from \"react\";\r\nimport \"./intervals.css\";\r\n\r\nimport IntervalsOptionButtonsContainer from \"../../containers/IntervalsOptionButtonsContainer\";\r\nimport ListOfIntervalsContainer from \"../../containers/listOfIntervalsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Intervals = ({ play }) => {\r\n  return (\r\n    <div className=\"intervals\">\r\n      <IntervalsOptionButtonsContainer\r\n        play={play}\r\n      ></IntervalsOptionButtonsContainer>\r\n\r\n      <ListOfIntervalsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nIntervals.propTypes = {\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Intervals;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ActivateMidi extends Component {\r\n  state = { status: \"\" };\r\n\r\n  onMIDIOnStateChange = event => {\r\n    this.setState({\r\n      status:\r\n        event.port.manufacturer + \" \" + event.port.name + \" \" + event.port.state\r\n    });\r\n  };\r\n\r\n  requestMIDIAccessSuccess = midi => {\r\n    const inputs = midi.inputs.values();\r\n    for (\r\n      let input = inputs.next();\r\n      input && !input.done;\r\n      input = inputs.next()\r\n    ) {\r\n      input.value.onmidimessage = this.midiOnMIDImessage;\r\n    }\r\n    midi.onstatechange = this.onMIDIOnStateChange;\r\n  };\r\n\r\n  requestMIDIAccessFailure = () => {\r\n    this.setState({ status: \"MIDI Access Failure\" });\r\n  };\r\n\r\n  midiOnMIDImessage = event => {\r\n    const keydown = 144;\r\n    const keyup = 128;\r\n    const velocity = event.data[2];\r\n\r\n    const eventKey = event.data[0];\r\n    const note = event.data[1];\r\n\r\n    const { sliceArr } = this.props;\r\n    if (note >= sliceArr[0].key && note <= sliceArr[sliceArr.length - 1].key) {\r\n      const options = { sequence: [note], type: \"active\" };\r\n\r\n      if (eventKey === keydown && velocity !== 0) {\r\n        this.props.actionShowNotesOnThePiano(options);\r\n        this.props.play(note);\r\n      } else if (eventKey === keyup || velocity === 0) {\r\n        this.props.actionUpdatePianoKeys();\r\n      }\r\n    }\r\n  };\r\n\r\n  startListening = () => {\r\n    this.setState({ status: \"waiting\" });\r\n    if (navigator.requestMIDIAccess) {\r\n      navigator\r\n        .requestMIDIAccess({ sysex: true })\r\n        .then(this.requestMIDIAccessSuccess, this.requestMIDIAccessFailure);\r\n    } else {\r\n      this.setState({ status: \"Нет доступа к миди-устройству\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"activate-midi\">\r\n        <Button cls=\"primary\" onClick={this.startListening}>\r\n          Включить MIDI клавиатуру\r\n        </Button>\r\n        <p style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\r\n          <b>Статус midi:</b>{\" \"}\r\n          {this.state.status ? this.state.status : \"отключена\"}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nActivateMidi.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n","import ActivateMidi from \"../components/activateMidi/ActivateMidi\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  sliceArr: piano.sliceArr\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ActivateMidi);\r\n","import React, { Component } from \"react\";\r\n\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class FindNote extends Component {\r\n  componentDidMount() {\r\n    this.props.actionSetActiveNote(this.props.sliceArr);\r\n    this.props.actionSetMode({ mode: \"Искать ноту\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n\r\n    const { needToWriteNote, playNote, note, actionIncrementRightAnswers, actionIncrementAmountOfAnswers, actionSetActiveNote, playFlag, actionKeyboardSetPlayFlag, changeModeFlag, actionKeyboardSetChangeModeFlag, sliceArr } = this.props;\r\n\r\n    if (prevProps.needToWriteNote && !needToWriteNote) {\r\n      if (playNote !== null) {\r\n        const playNoteKey = playNote.key;\r\n\r\n        if (playNoteKey === note) {\r\n          actionIncrementRightAnswers();\r\n          this.setVisualEffect({ right: true });\r\n        } else {\r\n          actionIncrementAmountOfAnswers();\r\n          this.setVisualEffect({ right: false, note });\r\n        }\r\n        actionSetActiveNote(sliceArr);\r\n      }\r\n    }\r\n\r\n    if (playFlag) {\r\n      this.playButtonHandler();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayFlag(false);\r\n      }, 300);\r\n    }\r\n    if (changeModeFlag) {\r\n      this.setMode(!needToWriteNote);\r\n      actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  setVisualEffect = ({ right, note }) => {\r\n    const sequence = [this.props.playNote.key];\r\n    if (right) {\r\n      this.setRightVisualEffect({ sequence });\r\n    } else {\r\n      this.setWrongVisualEffect({ sequence, note });\r\n    }\r\n  };\r\n\r\n  setRightVisualEffect = ({ sequence }) => {\r\n    const options = { sequence, type: \"right\" };\r\n    this.props.actionShowNotesOnThePiano(options);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 2000);\r\n  };\r\n\r\n  setWrongVisualEffect = ({ sequence, note }) => {\r\n    const options1 = {\r\n      sequence,\r\n      type: \"wrong\"\r\n    };\r\n\r\n    const options2 = {\r\n      sequence: [note],\r\n      type: \"right\"\r\n    };\r\n\r\n    this.props.actionShowNotesOnThePiano(options1);\r\n    this.props.actionShowNotesOnThePiano(options2);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 1500);\r\n  };\r\n\r\n  playButtonHandler = () => {\r\n    const { note } = this.props;\r\n\r\n    this.props.play(note);\r\n    this.setMode(false);\r\n  };\r\n\r\n  answerButtonHandler = () => {\r\n    this.setMode(true);\r\n  };\r\n\r\n  setMode = bool => {\r\n    if (this.props.needToWriteNote !== bool) {\r\n      this.props.actionNeedToWriteNote(bool);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { needToWriteNote, playFlag } = this.props;\r\n    const { playButtonHandler, answerButtonHandler } = this;\r\n\r\n    const playButtonClasses = [(needToWriteNote ? \"secondary-outline\" : \"info\")];\r\n\r\n    if (playFlag) {\r\n      playButtonClasses.push(\"active\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"findNote\">\r\n        <ButtonsGroup cls=\"horizontal\">\r\n          <Button\r\n            cls={playButtonClasses.join(\" \")}\r\n            onClick={playButtonHandler}\r\n          >\r\n            Играть ноту\r\n          </Button>\r\n          <Button\r\n            cls={needToWriteNote ? \"info\" : \"secondary-outline\"}\r\n            onClick={answerButtonHandler}\r\n          >\r\n            Ответить\r\n          </Button>\r\n        </ButtonsGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFindNote.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  actionSetActiveNote: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  statistics: PropTypes.shape({\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    right: PropTypes.bool.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  note: PropTypes.number,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  playNote: PropTypes.object,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n};\r\n\r\n","import FindNote from \"../components/findNote/FindNote\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionSetActiveNote } from \"../store/actions/notesActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionNeedToWriteNote, actionSetMode, actionKeyboardSetPlayFlag, actionKeyboardSetChangeModeFlag } from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ statistics, notes, piano, application }) => ({\r\n  statistics,\r\n  note: notes.note,\r\n  sliceArr: piano.sliceArr,\r\n  playNote: application.playNote,\r\n  needToWriteNote: application.needToWriteNote,\r\n  playFlag: application.playFlag,\r\n  changeModeFlag: application.changeModeFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionStatisticsClearing,\r\n  actionSetActiveNote,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionNeedToWriteNote,\r\n  actionShowNotesOnThePiano,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FindNote);\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nexport const actionSetActiveNote = arr => ({\r\n  type: SET_ACTIVE_NOTE,\r\n  sliceArr: arr\r\n});\r\n\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationPlayButtons = ({ playGuessedMelody, playWrittenMelody, playFlag, playWrittenMelodyFlag }) => {\r\n\r\n  const playGuessedButtonClasses = [(\"secondary-outline\")];\r\n  const playWrittenMelodyButtonClasses = [(\"secondary-outline\")];\r\n\r\n  if (playFlag) {\r\n    playGuessedButtonClasses.push(\"active\");\r\n  }\r\n\r\n  if (playWrittenMelodyFlag) {\r\n    playWrittenMelodyButtonClasses.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button cls={playGuessedButtonClasses.join(\" \")} onClick={playGuessedMelody}>Играть угадываемую мелодию</Button>\r\n      <Button cls={playWrittenMelodyButtonClasses.join(\" \")} onClick={playWrittenMelody}>Играть написанную мелодию</Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nDictationPlayButtons.propTypes = {\r\n  playGuessedMelody: PropTypes.func.isRequired,\r\n  playWrittenMelody: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool\r\n};\r\n\r\nDictationPlayButtons.defaultProps = {\r\n  playWrittenMelodyFlag: false\r\n};\r\n\r\nexport default DictationPlayButtons;\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst DictationOptionsButtons = ({\r\n  modeWrite,\r\n  changeMode,\r\n  clearButtonHandler,\r\n  checkAnswerHandler,\r\n  readyToCheck,\r\n  answerGiven,\r\n  nextPlayButtonHandler,\r\n  settingsButtonHandler,\r\n  dictationClearNoteFlag\r\n}) => {\r\n\r\n  const access = readyToCheck && !answerGiven;\r\n  // const access = amountOfNotes === sequenceOfWrittenMelody.length && !answerGiven;\r\n\r\n\r\n  const clearButtonClasses = [\"secondary-outline\"];\r\n\r\n  if (dictationClearNoteFlag) {\r\n    clearButtonClasses.push(\"active\");\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"dictation-options-buttons\">\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button\r\n          onClick={nextPlayButtonHandler}\r\n          cls={modeWrite ? \"info-outline\" : \"info active\"}\r\n          disabled={modeWrite ? false : true}\r\n        >\r\n          {answerGiven ? \"Далее\" : \"Играть\"}\r\n        </Button>\r\n        {answerGiven ? null : (\r\n          <Button\r\n            onClick={changeMode}\r\n            cls={modeWrite ? \"info active\" : \"info-outline\"}\r\n            disabled={modeWrite ? true : false}\r\n          >\r\n            Писать\r\n          </Button>\r\n        )}\r\n      </ButtonsGroup>\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button onClick={clearButtonHandler} cls={clearButtonClasses.join(\" \")}>Стереть</Button>\r\n        <Button\r\n          onClick={checkAnswerHandler}\r\n          cls={access ? \"danger\" : \"danger-outline\"}\r\n          disabled={!access}\r\n        >\r\n          Проверить\r\n        </Button>\r\n      </ButtonsGroup>\r\n      <Button cls=\"primary\" onClick={settingsButtonHandler}>\r\n        Настроки\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DictationOptionsButtons;\r\n\r\nDictationOptionsButtons.propTypes = {\r\n  modeWrite: PropTypes.bool.isRequired,\r\n  changeMode: PropTypes.func.isRequired,\r\n  nextPlayButtonHandler: PropTypes.func.isRequired,\r\n  clearButtonHandler: PropTypes.func.isRequired,\r\n  checkAnswerHandler: PropTypes.func.isRequired,\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object),\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  readyToCheck: PropTypes.bool.isRequired\r\n};\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationOutputElement = ({\r\n  elem,\r\n  index,\r\n  rightAnswer,\r\n  answerGiven,\r\n  rightElem\r\n}) => {\r\n  const cls = answerGiven ? (rightAnswer ? \"right\" : \"wrong\") : \"\";\r\n\r\n  const rightElemJSX = answerGiven ? (\r\n    rightAnswer ? null : (\r\n      <span className=\"right\">\r\n        &nbsp;\r\n        {rightElem ? `${rightElem.octaveName} - ${rightElem.fullName}` : \" ?\"}\r\n      </span>\r\n    )\r\n  ) : null;\r\n\r\n  return (\r\n    <p className=\"dictation-output-element\">\r\n      <span className=\"index-output-element\">{`${index + 1} нота:`}</span>&nbsp;\r\n      <span className={cls}>\r\n        {elem ? `${elem.octaveName} - ${elem.fullName}` : \" ?\"}\r\n      </span>\r\n      {rightElemJSX}\r\n    </p>\r\n  );\r\n};\r\n\r\nDictationOutputElement.propTypes = {\r\n  elem: PropTypes.object,\r\n  index: PropTypes.number.isRequired,\r\n  rightAnswer: PropTypes.bool,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n  rightElem: PropTypes.object\r\n};\r\n\r\nexport default DictationOutputElement;\r\n","import React from \"react\";\r\nimport DictationOutputElement from \"./DictationOutputElement\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationOutput = ({\r\n  amountOfNotes,\r\n  sequenceOfMelody,\r\n  sequenceOfWrittenMelody,\r\n  answerGiven,\r\n  answers\r\n}) => {\r\n  let dictationOutputBody = [];\r\n\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const elem = sequenceOfWrittenMelody[i];\r\n    const rightElem = sequenceOfMelody[i];\r\n    const elementJSX = (\r\n      <DictationOutputElement\r\n        elem={elem}\r\n        index={i}\r\n        answerGiven={answerGiven}\r\n        rightAnswer={answers[i]}\r\n        rightElem={rightElem}\r\n        key={i}\r\n      />\r\n    );\r\n\r\n    dictationOutputBody.push(elementJSX);\r\n  }\r\n  return (\r\n    <div className=\"dictation-output\">\r\n      <h3>Список отгаданных нот:</h3>\r\n      {dictationOutputBody}\r\n    </div>\r\n  );\r\n};\r\n\r\nDictationOutput.propTypes = {\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  answers: PropTypes.arrayOf(PropTypes.bool).isRequired,\r\n  answerGiven: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default DictationOutput;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./modalWindow.css\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default class ModalWindow extends Component {\r\n\r\n  modal = document.createElement(\"div\");\r\n\r\n  componentDidMount() {\r\n    this.modal.className = \"modal-wrap\";\r\n    document.body.appendChild(this.modal);\r\n    document.body.style.overflowY = \"hidden\";\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.modal);\r\n    document.body.style.overflowY = \"auto\";\r\n  }\r\n\r\n  closeHandler = () => {\r\n    setTimeout(() => {\r\n      this.props.close();\r\n    }, 100);\r\n  };\r\n\r\n  saveHandler = () => {\r\n    this.closeHandler();\r\n    this.props.saveButtonHandler();\r\n  };\r\n\r\n  cancelHandler = () => {\r\n    this.closeHandler();\r\n    this.props.cancelButtonHandler();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      saveButton,\r\n      saveButtonName,\r\n      cancelButton,\r\n      cancelButtonName\r\n    } = this.props;\r\n\r\n\r\n    return ReactDOM.createPortal(\r\n      <div className=\"modal-window\" >\r\n        <span className=\"close\" onClick={this.closeHandler}>\r\n          &times;\r\n        </span>\r\n        {this.props.children}\r\n        <ButtonsGroup cls=\"flex\">\r\n          {saveButton ? (\r\n            <Button onClick={this.saveHandler} cls=\"info\">\r\n              {saveButtonName}\r\n            </Button>\r\n          ) : null}\r\n          {cancelButton ? (\r\n            <Button onClick={this.cancelHandler} cls=\"danger\">\r\n              {cancelButtonName}\r\n            </Button>\r\n          ) : null}\r\n        </ButtonsGroup>\r\n      </div>,\r\n      this.modal\r\n    );\r\n  }\r\n}\r\n\r\nModalWindow.propTypes = {\r\n  close: PropTypes.func.isRequired,\r\n  saveButton: PropTypes.bool.isRequired,\r\n  saveButtonName: PropTypes.string,\r\n  cancelButton: PropTypes.bool.isRequired,\r\n  cancelButtonName: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  saveButtonHandler: PropTypes.func,\r\n  cancelButtonHandler: PropTypes.func\r\n};\r\n\r\nModalWindow.defaultProps = {\r\n  cancelButtonHandler: () => { }\r\n};\r\n","import React from \"react\";\r\nimport \"./select.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Select = ({ onChange, children, value }) => {\r\n\treturn <select className=\"select\" value={value} onChange={onChange}>\r\n\t\t{children}\r\n\t</select>;\r\n};\r\n\r\nSelect.propTypes = {\r\n\tvalue: PropTypes.PropTypes.oneOfType([\r\n\t\tPropTypes.bool,\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\tonChange: PropTypes.func.isRequired,\r\n\tchildren: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Select;","import React from \"react\";\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst amountOfNotes = [3, 4, 5, 6, 7];\r\n\r\nconst amountOfNotesOptions = amountOfNotes.map(elem => (\r\n  <option value={elem} key={elem}>\r\n    {elem}\r\n  </option>\r\n));\r\n\r\nconst SelectAmountOfNotes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {amountOfNotesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectAmountOfNotes.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst modes = [\r\n  { modePlay: false, ru: \"Играть\" },\r\n  { modePlay: true, ru: \"Писать\" }\r\n];\r\n\r\nconst modesOptions = modes.map(elem => (\r\n  <option value={elem.modePlay} key={elem.ru}>\r\n    {elem.ru}\r\n  </option>\r\n));\r\n\r\nconst SelectModes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {modesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectModes.propTypes = {\r\n  value: PropTypes.bool.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport { SelectAmountOfNotes, SelectModes };\r\n","import React, { Component } from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\";\r\nimport { SelectAmountOfNotes, SelectModes } from \"./selectComponents\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DictationSettings extends Component {\r\n  state = {\r\n    amountOfNotes: 4,\r\n    defaultModeWrite: false,\r\n    modeWrite: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { amountOfNotes, defaultModeWrite } = this.props;\r\n    this.setState({\r\n      amountOfNotes,\r\n      defaultModeWrite\r\n    });\r\n  }\r\n\r\n  selectAmountOfNotesHandler = e => {\r\n    this.setState({\r\n      amountOfNotes: +e.target.value\r\n    });\r\n  };\r\n\r\n  selectModesHandler = e => {\r\n    let defaultModeWrite, modeWrite;\r\n    const value = e.target.value;\r\n\r\n    if (value === \"true\") {\r\n      defaultModeWrite = true;\r\n      modeWrite = true;\r\n    }\r\n    if (value === \"false\") {\r\n      defaultModeWrite = false;\r\n      modeWrite = false;\r\n    }\r\n\r\n    this.setState({\r\n      defaultModeWrite,\r\n      modeWrite\r\n    });\r\n  };\r\n\r\n  saveButtonHandler = () => {\r\n    this.props.actionChangeSettings(this.state);\r\n  };\r\n\r\n  cancelButtonHandler = () => {\r\n    this.setState({\r\n      amountOfNotes: this.props.amountOfNotes,\r\n      defaultModeWrite: this.props.defaultModeWrite\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      settingsButtonHandler\r\n    } = this.props;\r\n\r\n    const { amountOfNotes, defaultModeWrite } = this.state;\r\n\r\n    const {\r\n      selectAmountOfNotesHandler,\r\n      selectModesHandler,\r\n      saveButtonHandler,\r\n      cancelButtonHandler\r\n    } = this;\r\n    return (\r\n      <ModalWindow\r\n        close={settingsButtonHandler}\r\n        saveButton={true}\r\n        saveButtonName={\"Сохранить\"}\r\n        cancelButton={true}\r\n        cancelButtonName={\"Отменить\"}\r\n        saveButtonHandler={saveButtonHandler}\r\n        cancelButtonHandler={cancelButtonHandler}\r\n      >\r\n        <h3>Настройки диктанта</h3>\r\n        <h4>Количество нот:</h4>\r\n        <SelectAmountOfNotes\r\n          value={amountOfNotes}\r\n          onChange={selectAmountOfNotesHandler}\r\n        />\r\n        <h4>Режим по умолчанию:</h4>\r\n        <SelectModes value={defaultModeWrite} onChange={selectModesHandler} />\r\n      </ModalWindow>\r\n    );\r\n  }\r\n}\r\n\r\nDictationSettings.propTypes = {\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  actionChangeSettings: PropTypes.func.isRequired,\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  defaultModeWrite: PropTypes.bool.isRequired\r\n};\r\n\r\n","import DictationSettings from \"../components/dictation/DictationSettings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionChangeSettings } from \"../store/actions/dictationActions\";\r\n\r\nconst mapStateToProps = ({ dictation }) => ({\r\n  amountOfNotes: dictation.amountOfNotes,\r\n  defaultModeWrite: dictation.defaultModeWrite\r\n});\r\n\r\nconst mapDispatchToProps = { actionChangeSettings };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DictationSettings);\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS\r\n} from \"../actionTypes\";\r\n\r\nexport const actionGetNewMelody = (sliceArr) => ({\r\n  type: GET_NEW_MELODY,\r\n  sliceArr\r\n});\r\n\r\nexport const actionChangeMode = (payload) => ({\r\n  type: CHANGE_MODE,\r\n  payload\r\n});\r\n\r\nexport const actionAddNoteToAnswerArray = (payload) => ({\r\n  type: ADD_NOTE_TO_ANSWER_ARRAY,\r\n  payload\r\n});\r\n\r\nexport const actionPopLastElemFromAnswerArray = () => ({\r\n  type: POP_LAST_ELEM_FROM_ANSWER_ARRAY\r\n});\r\n\r\nexport const actionWriteAnswers = (arr) => ({\r\n  type: WRITE_ANSWERS,\r\n  payload: arr\r\n});\r\n\r\nexport const actionClearWrittenMelody = () => ({\r\n  type: CLEAR_WRITTEN_MELODY\r\n});\r\n\r\nexport const actionChangeSettings = (settingsObj) => ({\r\n  type: CHANGE_SETTINGS,\r\n  payload: settingsObj\r\n});\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./dictation.css\";\r\n\r\nimport DictationPlayButtons from \"./DictationPlayButtons\";\r\nimport DictationOptionsButtons from \"./DictationOptionsButtons\";\r\nimport DuctationOutput from \"./DictationOutput\";\r\nimport DictationSettings from \"../../containers/dictationSettingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Dictation extends Component {\r\n  componentDidMount() {\r\n    const { defaultModeWrite } = this.props.dictation;\r\n    this.props.actionWritePlayNote(null, false);\r\n\r\n    this.changeMode(null, defaultModeWrite);\r\n\r\n    if (this.props.needToWriteNote !== defaultModeWrite) {\r\n      this.props.actionNeedToWriteNote(defaultModeWrite);\r\n    }\r\n\r\n    this.setNewMelody();\r\n    this.props.actionInitDictation(true);\r\n    this.props.actionSetMode({ mode: \"Музыкальный диктант\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n    this.props.actionClearWrittenMelody();\r\n    this.clearAnswers();\r\n\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.playWrittenMelodyFlag) {\r\n      this.props.actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.modalWindowFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationClearNoteFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationCheckFlag) {\r\n      this.props.actionKeyboardSetDictationCheckFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionInitDictation(false);\r\n    this.clearAnswers();\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionClearWrittenMelody();\r\n\r\n    if (this.props.modalWindowFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.playWrittenMelodyFlag) {\r\n      this.props.actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.dictationClearNoteFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationCheckFlag) {\r\n      this.props.actionKeyboardSetDictationCheckFlag(false);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const { sequenceOfWrittenMelody, amountOfNotes, answerGiven, readyToCheck } = this.props.dictation;\r\n    const { playNote, playFlag, actionKeyboardSetPlayFlag, playWrittenMelodyFlag, actionKeyboardSetPlayWrittenMelodyFlag, changeModeFlag, dictationClearNoteFlag, actionKeyboardSetDictationClearNoteFlag, dictationCheckFlag,\r\n      actionKeyboardSetDictationCheckFlag } = this.props;\r\n\r\n    if (prevState.dictation.amountOfNotes !== amountOfNotes) {\r\n      this.setNewMelody();\r\n    }\r\n\r\n    if (sequenceOfWrittenMelody.length < amountOfNotes && playNote) {\r\n      if (\r\n        (prevState.playNote && playNote.id !== prevState.playNote.id) ||\r\n        (prevState.playNote === null && playNote !== null)\r\n      ) {\r\n        this.props.actionAddNoteToAnswerArray(playNote);\r\n      }\r\n    }\r\n\r\n    if (playFlag) {\r\n      this.playGuessedMelody();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (playWrittenMelodyFlag) {\r\n      this.playWrittenMelody();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n      this.nextPlayButtonHandler();\r\n    }\r\n\r\n    if (dictationClearNoteFlag) {\r\n      this.clearButtonHandler();\r\n      setTimeout(() => {\r\n        actionKeyboardSetDictationClearNoteFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (dictationCheckFlag) {\r\n      actionKeyboardSetDictationCheckFlag(false);\r\n      if (dictationCheckFlag && readyToCheck && !answerGiven) {\r\n        this.checkAnswerHandler();\r\n        setTimeout(() => {\r\n        }, 300);\r\n      }\r\n    }\r\n  }\r\n\r\n  setNewMelody = () => {\r\n    this.props.actionGetNewMelody(this.props.sliceArr);\r\n  };\r\n\r\n  clearAnswers = () => {\r\n    this.props.actionWriteAnswers([]);\r\n  };\r\n\r\n  playGuessedMelody = () => {\r\n    const sequence = this.props.dictation.sequenceOfMelody.map(\r\n      elem => elem.key\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playWrittenMelody = () => {\r\n    const sequence = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playMelody = sequence => {\r\n    const onlyPlay = true;\r\n    for (let i = 0; i < sequence.length; i++) {\r\n      if (sequence[i]) {\r\n        setTimeout(() => {\r\n          this.props.play(sequence[i], onlyPlay);\r\n        }, this.props.duration * 1000 * i);\r\n      }\r\n    }\r\n  };\r\n\r\n  changeMode = (e, modeWrite) => {\r\n    modeWrite =\r\n      typeof modeWrite === \"boolean\"\r\n        ? modeWrite\r\n        : !this.props.dictation.modeWrite;\r\n\r\n    this.props.actionChangeMode(modeWrite);\r\n\r\n    this.props.actionNeedToWriteNote(modeWrite);\r\n  };\r\n\r\n  clearButtonHandler = () => {\r\n    if (this.props.dictation.sequenceOfWrittenMelody.length > 0) {\r\n      this.props.actionPopLastElemFromAnswerArray();\r\n    }\r\n  };\r\n\r\n  checkAnswerHandler = () => {\r\n    const arrKeysArrayOfMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfMelody\r\n    );\r\n\r\n    const arrKeysArrayOfWrittenMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n    if (arrKeysArrayOfMeloday.length === arrKeysArrayOfWrittenMeloday.length) {\r\n      const checkAnswers = this.getArrayOfEqualsOfAnswers(arrKeysArrayOfMeloday\r\n        , arrKeysArrayOfWrittenMeloday);\r\n\r\n      this.changeStat(checkAnswers);\r\n      this.props.actionWriteAnswers(checkAnswers);\r\n    }\r\n  };\r\n\r\n  getKeysArrayOfMeloday = sequence => {\r\n    const arr = sequence.map(elem => elem.key);\r\n\r\n    return arr;\r\n  };\r\n\r\n  getArrayOfEqualsOfAnswers = (arr1, arr2) => {\r\n\r\n\r\n    const checkAnswers = [];\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      checkAnswers.push(arr1[i] === arr2[i]);\r\n    }\r\n\r\n    return checkAnswers;\r\n  };\r\n\r\n  changeStat = arr => {\r\n    if (arr.indexOf(false) === -1) {\r\n      this.props.actionIncrementRightAnswers();\r\n    } else {\r\n      this.props.actionIncrementAmountOfAnswers();\r\n    }\r\n  };\r\n\r\n  nextButtonHandler = () => {\r\n    this.setNewMelody();\r\n\r\n    this.clearAnswers();\r\n\r\n    this.props.actionClearWrittenMelody();\r\n\r\n    this.props.actionHideAnswer();\r\n  };\r\n\r\n  settingsButtonHandler = () => {\r\n    this.props.actionSetModalWindowFlag(!this.props.modalWindowFlag);\r\n  };\r\n\r\n  nextPlayButtonHandler = () => {\r\n    this.changeMode();\r\n    if (this.props.dictation.answerGiven) {\r\n      this.nextButtonHandler();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const modeWrite = this.props.dictation.modeWrite || false;\r\n\r\n    const needToWriteNote = this.props.needToWriteNote;\r\n\r\n    const {\r\n      amountOfNotes,\r\n      sequenceOfMelody,\r\n      sequenceOfWrittenMelody,\r\n      answerGiven,\r\n      answers,\r\n      readyToCheck\r\n    } = this.props.dictation;\r\n\r\n    const { playFlag, playWrittenMelodyFlag, dictationClearNoteFlag } = this.props;\r\n\r\n    const { nextPlayButtonHandler, settingsButtonHandler } = this;\r\n\r\n    return (\r\n      <div>\r\n        <DictationPlayButtons\r\n          playGuessedMelody={this.playGuessedMelody}\r\n          playWrittenMelody={this.playWrittenMelody}\r\n          playFlag={playFlag}\r\n          playWrittenMelodyFlag={playWrittenMelodyFlag}\r\n        />\r\n        <DictationOptionsButtons\r\n          modeWrite={modeWrite}\r\n          changeMode={this.changeMode}\r\n          clearButtonHandler={this.clearButtonHandler}\r\n          checkAnswerHandler={this.checkAnswerHandler}\r\n          sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n          amountOfNotes={amountOfNotes}\r\n          answerGiven={answerGiven}\r\n          nextPlayButtonHandler={nextPlayButtonHandler}\r\n          settingsButtonHandler={settingsButtonHandler}\r\n          dictationClearNoteFlag={dictationClearNoteFlag}\r\n          readyToCheck={readyToCheck}\r\n        />\r\n        <DuctationOutput\r\n          amountOfNotes={amountOfNotes}\r\n          needToWriteNote={needToWriteNote}\r\n          sequenceOfMelody={sequenceOfMelody}\r\n          sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n          answerGiven={answerGiven}\r\n          answers={answers}\r\n        />\r\n\r\n        {this.props.modalWindowFlag ? (\r\n          <DictationSettings settingsButtonHandler={settingsButtonHandler} />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDictation.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  playNote: PropTypes.object,\r\n  actionGetNewMelody: PropTypes.func.isRequired,\r\n  actionChangeMode: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionInitDictation: PropTypes.func.isRequired,\r\n  actionAddNoteToAnswerArray: PropTypes.func.isRequired,\r\n  actionWritePlayNote: PropTypes.func.isRequired,\r\n  actionPopLastElemFromAnswerArray: PropTypes.func.isRequired,\r\n  actionWriteAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionClearWrittenMelody: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  dictation: PropTypes.shape({\r\n    amountOfNotes: PropTypes.number.isRequired,\r\n    sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    defaultModeWrite: PropTypes.bool.isRequired,\r\n    answers: PropTypes.array.isRequired,\r\n    answerGiven: PropTypes.bool.isRequired,\r\n    modeWrite: PropTypes.bool,\r\n    readyToCheck: PropTypes.bool\r\n  }).isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  actionSetModalWindowFlag: PropTypes.func.isRequired,\r\n  modalWindowFlag: PropTypes.bool,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayWrittenMelodyFlag: PropTypes.func.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetDictationClearNoteFlag: PropTypes.func.isRequired,\r\n  actionKeyboardSetDictationCheckFlag: PropTypes.func.isRequired,\r\n  dictationCheckFlag: PropTypes.bool.isRequired\r\n};\r\n","import Dictation from \"../components/dictation/Dictation\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nimport {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionAddNoteToAnswerArray,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionClearWrittenMelody\r\n} from \"../store/actions/dictationActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport {\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionWritePlayNote,\r\n  actionSetMode,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ piano, dictation, application }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  dictation,\r\n  needToWriteNote: application.needToWriteNote,\r\n  playNote: application.playNote,\r\n  duration: application.duration,\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  playFlag: application.playFlag,\r\n  playWrittenMelodyFlag: application.playWrittenMelodyFlag,\r\n  changeModeFlag: application.changeModeFlag,\r\n  dictationClearNoteFlag: application.dictationClearNoteFlag,\r\n  dictationCheckFlag: application.dictationCheckFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionAddNoteToAnswerArray,\r\n  actionWritePlayNote,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionClearWrittenMelody,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dictation);\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FreeMode = ({ actionSetMode, actionUpdatePianoKeys }) => {\r\n  actionSetMode({ mode: \"Свободная игра\", stat: false });\r\n  actionUpdatePianoKeys();\r\n  return <div className=\"free-mode\"></div>;\r\n};\r\n\r\nFreeMode.propTypes = {\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FreeMode;\r\n","import FreeMode from \"../components/freeMode/FreeMode\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = () => ({})\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FreeMode);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OptionFromSelect = ({ index, fullName, disabled }) => {\r\n  return (\r\n    <option disabled={disabled} value={index}>\r\n      {fullName}\r\n    </option>\r\n  );\r\n};\r\n\r\nOptionFromSelect.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  fullName: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nOptionFromSelect.defaultProps = {\r\n  disabled: false\r\n};\r\n\r\nexport default OptionFromSelect;\r\n","import React from \"react\";\r\nimport OptionFromSelect from \"./OptionFromSelect\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectBody = ({\r\n  baseArrOfNotes,\r\n  firstBorder,\r\n  secondBorder,\r\n  nameOfSelect,\r\n  minAmountOfNotes\r\n}) => {\r\n  const body = baseArrOfNotes.map(({ fullName, key, index }) => {\r\n    let disabled = false;\r\n\r\n    if (nameOfSelect === \"firstBorder\") {\r\n      if (key > secondBorder.key - minAmountOfNotes) {\r\n        disabled = true;\r\n      }\r\n    } else if (key < firstBorder.key + minAmountOfNotes) {\r\n      disabled = true;\r\n    }\r\n\r\n    return (\r\n      <OptionFromSelect\r\n        disabled={disabled}\r\n        fullName={fullName}\r\n        index={index}\r\n        key={key}\r\n      />\r\n    );\r\n  });\r\n  return body;\r\n};\r\n\r\nSelectBody.propType = {\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired)\r\n};\r\n\r\n\r\nexport default SelectBody;","let baseArrOfNotes = [];\r\n\r\nconst BASE_NAMES = [\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\"\r\n];\r\n\r\nconst NAMES_OF_OCTAVES = {\r\n  0: \"Субконтроктава\",\r\n  1: \"Контроктава\",\r\n  2: \"Большая октава\",\r\n  3: \"Малая октава\",\r\n  4: \"Первая октава\",\r\n  5: \"Вторая октава\",\r\n  6: \"Третья октава\",\r\n  7: \"Четвертая октава\",\r\n  8: \"Пятая октава\"\r\n};\r\n\r\nconst BASE_START_NOTE = 21;\r\nconst BASE_FINISH_NOTE = 108;\r\n\r\nlet octaveNumber = 0;\r\n\r\nfor (let i = 0; i <= BASE_FINISH_NOTE - BASE_START_NOTE; i++) {\r\n  const name = BASE_NAMES[i % BASE_NAMES.length];\r\n\r\n  if (name === \"C\") {\r\n    octaveNumber++;\r\n  }\r\n  baseArrOfNotes.push({\r\n    index: i,\r\n    key: i + BASE_START_NOTE,\r\n    name,\r\n    fullName: name + octaveNumber,\r\n    octaveName: NAMES_OF_OCTAVES[octaveNumber]\r\n  });\r\n}\r\n\r\nfunction getBaseArrayOfNotes(\r\n  start = 0,\r\n  finish = BASE_FINISH_NOTE - BASE_START_NOTE\r\n) {\r\n  return [...baseArrOfNotes].slice(start, finish + 1);\r\n}\r\n\r\nfunction getFullArrayAndMapIndexes(arr) {\r\n  const mapIndex = {};\r\n\r\n  const arrOfNotes = [];\r\n\r\n  for (let k = 0; k < arr.length; k++) {\r\n    const obj = arr[k];\r\n    const nextObj = arr[k + 1];\r\n    let i = arrOfNotes.length;\r\n    let section = [];\r\n\r\n    section.push(addNewFields(obj));\r\n\r\n    mapIndex[arr[k].key] = {\r\n      i,\r\n      j: 0\r\n    };\r\n\r\n    if (nextObj && nextObj.name.includes(\"#\")) {\r\n      section.push(addNewFields(nextObj));\r\n      k++;\r\n      mapIndex[arr[k].key] = {\r\n        i,\r\n        j: 1\r\n      };\r\n    }\r\n\r\n    arrOfNotes.push(section);\r\n  }\r\n\r\n  return { mapIndex, arrOfNotes };\r\n}\r\n\r\nfunction addNewFields(obj) {\r\n  return { ...obj, active: false, wrong: false, right: false };\r\n}\r\n\r\nconst getIndexes = ({ key, mapIndex }) => {\r\n  const indexesOfNote = mapIndex[key];\r\n  const i = indexesOfNote.i;\r\n  const j = indexesOfNote.j;\r\n  return { i, j };\r\n};\r\n\r\nwindow.getIndexes = getIndexes;\r\n\r\nconst setVisualEffect = ({ arrOfNotes, sequence, type, active, mapIndex }) => {\r\n  let arr = [...arrOfNotes];\r\n\r\n  sequence.forEach(element => {\r\n    const { i, j } = getIndexes({ key: element, mapIndex });\r\n    if (active) {\r\n      arr[i][j][type] = true;\r\n    } else {\r\n      if (!type) {\r\n        arr[i][j].right = false;\r\n        arr[i][j].wrong = false;\r\n      } else {\r\n        arr[i][j][type] = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  return arr;\r\n};\r\n\r\nexport {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  getIndexes,\r\n  setVisualEffect\r\n};\r\n","import React from \"react\";\r\nimport SelectBody from \"./SelectBody\";\r\n\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectOfRange = ({\r\n  nameOfSelect,\r\n  baseArrOfNotes,\r\n  minAmountOfNotes,\r\n  actionSetBordersOfRange,\r\n  firstBorder,\r\n  secondBorder\r\n}) => {\r\n  const selectChangeHandler = (e, field) => {\r\n    let index = +e.target.value;\r\n    const key = baseArrOfNotes[index].key;\r\n\r\n    if (field === \"firstBorder\") {\r\n      firstBorder = { index, key };\r\n    } else {\r\n      secondBorder = { index, key };\r\n    }\r\n\r\n    actionSetBordersOfRange([firstBorder, secondBorder]);\r\n  };\r\n\r\n  const valueOfSelect =\r\n    nameOfSelect === \"firstBorder\" ? firstBorder.index : secondBorder.index;\r\n\r\n  return (\r\n    <Select\r\n      value={valueOfSelect}\r\n      onChange={e => {\r\n        selectChangeHandler(e, nameOfSelect);\r\n      }}\r\n    >\r\n      <SelectBody\r\n        minAmountOfNotes={minAmountOfNotes}\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect={nameOfSelect}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n      />\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectOfRange.propTypes = {\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n  actionSetBordersOfRange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectOfRange;\r\n","import React from \"react\";\r\nimport SelectOfRange from \"./SelectOfRange\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"../button/Button\";\r\n\r\nconst ChangeRangeOfNotes = ({\r\n  actionUpdatePianoKeys,\r\n  actionSetBordersOfRange,\r\n  piano: { firstBorder, secondBorder, baseArrOfNotes, minAmountOfNotes }\r\n}) => {\r\n  const clickHandler = () => {\r\n    actionUpdatePianoKeys();\r\n  };\r\n\r\n  return (\r\n    <div className=\"changeRangeOfNotes\">\r\n      <h3>Изменить диапазон:</h3>\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"firstBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"secondBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n\r\n      <Button onClick={clickHandler}>Выбрать диапазон</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nChangeRangeOfNotes.propTypes = {\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetBordersOfRange: PropTypes.func.isRequired,\r\n  piano: PropTypes.object\r\n};\r\n\r\nexport default ChangeRangeOfNotes;\r\n","import ChangeRangeOfNotes from \"../components/changeRangeOfNotes/ChangeRangeOfNotes\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  piano\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChangeRangeOfNotes);\r\n","import React from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ClearSettingsModalBody = ({ close, saveButtonHandler }) => {\r\n\r\n  return (\r\n    <ModalWindow close={close} saveButton={true}\r\n      saveButtonName={\"Да\"}\r\n      cancelButton={true}\r\n      cancelButtonName={\"Нет\"}\r\n      saveButtonHandler={saveButtonHandler}\r\n      cancelButtonHandler={() => { }}>\r\n      <h3>Сбросить все настройки</h3>\r\n      <p>Вы уверены, что хотите совершить сброс всех настроек?</p>\r\n    </ModalWindow>\r\n  );\r\n};\r\n\r\nClearSettingsModalBody.propTypes = {\r\n  close: PropTypes.func.isRequired,\r\n  saveButtonHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ClearSettingsModalBody;","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\nimport ClearSettingsModalBody from \"./ClearSettingsModalBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./clearSettings.css\";\r\n\r\nexport default class ClearSettings extends Component {\r\n\r\n\r\n\tmodalOpenerHandler = () => {\r\n\t\tthis.props.actionSetModalWindowFlag(true);\r\n\t}\r\n\r\n\tmodalCloserHandler = () => {\r\n\t\tthis.props.actionSetModalWindowFlag(false);\r\n\t}\r\n\r\n\tsaveButtonHandler = () => {\r\n\t\tlocalStorage.clear();\r\n\t\tthis.props.setInitialState();\r\n\t\tthis.props.actionSetDataClearingFlag(true);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.actionSetDataClearingFlag(false);\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { modalOpenerHandler } = this;\r\n\t\tconst { modalWindowFlag, dataIsClearing } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"clear-settings\">\r\n\t\t\t\t<h3>Сбросить настройки:</h3>\r\n\t\t\t\t<Button onClick={modalOpenerHandler}>\r\n\t\t\t\t\tСбросить все настройки\r\n\t\t\t\t</Button>\r\n\t\t\t\t{dataIsClearing ? <span>\r\n\t\t\t\t\tНастройки сброшены\r\n\t\t\t\t</span> : null}\r\n\t\t\t\t{modalWindowFlag ? <ClearSettingsModalBody close={this.modalCloserHandler} saveButtonHandler={this.saveButtonHandler} /> : null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nClearSettings.propTypes = {\r\n\tactionSetDataClearingFlag: PropTypes.func.isRequired,\r\n\tsetInitialState: PropTypes.func.isRequired,\r\n\tactionSetModalWindowFlag: PropTypes.func.isRequired,\r\n\tmodalWindowFlag: PropTypes.bool,\r\n\tdataIsClearing: PropTypes.bool\r\n};","import ClearSettings from \"../components/clearSettings/ClearSettings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionApplicationSetInitialState, actionSetModalWindowFlag, actionSetDataClearingFlag } from \"../store/actions/applicationActions\";\r\n\r\nconst setInitialState = actionApplicationSetInitialState;\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  dataIsClearing: application.dataIsClearing\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setInitialState,\r\n  actionSetModalWindowFlag,\r\n  actionSetDataClearingFlag\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClearSettings);\r\n","import React from \"react\";\r\nimport Button from \"../../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PlayExampleButton = ({ play, duration }) => {\r\n\tconst clickHandler = () => {\r\n\t\tconst notesKeyArray = [60, 64, 67, 72];\r\n\r\n\t\tfor (let i = 0; i < notesKeyArray.length; i++) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tplay(notesKeyArray[i]);\r\n\t\t\t}, duration * 1000 * i);\r\n\t\t}\r\n\t};\r\n\treturn <Button onClick={clickHandler}>\r\n\t\tВоспроизвести пример\r\n\t</Button>;\r\n};\r\n\r\nPlayExampleButton.propTypes = {\r\n\tplay: PropTypes.func.isRequired,\r\n\tduration: PropTypes.number.isRequired\r\n};\r\n\r\nexport default PlayExampleButton;","import React from \"react\";\r\n\r\nimport \"./inputRange.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst InputRange = ({ level, onChangeHandler, min, max, step }) => {\r\n\r\n\tconst percent = (level - min) / (max - min);\r\n\r\n\tlet levelValueStyle;\r\n\r\n\tif (percent < 0.35) {\r\n\t\tlevelValueStyle = { left: `calc(-8px  + 100% * ${percent} - 10px * ${percent} )` };\r\n\t} else if (percent > 0.85) {\r\n\t\tlevelValueStyle = { left: `calc(-12px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t} else if (percent > 0.65) {\r\n\t\tlevelValueStyle = { left: `calc(-14px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t} else {\r\n\t\tlevelValueStyle = { left: `calc(-18px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"input-range-wrap\" >\r\n\t\t\t<div className=\"input-range-value\" style={levelValueStyle}>{level}</div>\r\n\t\t\t<input type=\"range\" min={min} max={max} step={step} onChange={onChangeHandler} value={level} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nInputRange.propTypes = {\r\n\tlevel: PropTypes.number.isRequired,\r\n\tmin: PropTypes.number.isRequired,\r\n\tmax: PropTypes.number.isRequired,\r\n\tstep: PropTypes.number.isRequired,\r\n\tonChangeHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InputRange;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"../inputRange/InputRange\";\r\n\r\nconst EchoSettings = ({ children, echoLevel, actionSetEchoLevel }) => {\r\n\r\n\tconst onChangeHandler = (e) => {\r\n\t\tactionSetEchoLevel(+e.target.value);\r\n\t};\r\n\r\n\treturn <div className=\"input-settings\">\r\n\t\t<h3>Уровень эхо:</h3>\r\n\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t<InputRange min={0} max={1} step={0.1} level={echoLevel} onChangeHandler={onChangeHandler} />\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t</div >;\r\n};\r\n\r\nEchoSettings.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\techoLevel: PropTypes.number.isRequired,\r\n\tactionSetEchoLevel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default EchoSettings;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"../inputRange/InputRange\";\r\n\r\nconst TempoSettings = ({ children, bpm, actionSetBpmLevel }) => {\r\n\r\n\tconst onChangeHandler = (e) => {\r\n\t\tactionSetBpmLevel(+e.target.value);\r\n\t};\r\n\r\n\treturn <div className=\"input-settings\">\r\n\t\t<h3>Настрока темпа (bpm):</h3>\r\n\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t<InputRange min={50} max={180} step={1} level={bpm} onChangeHandler={onChangeHandler} />\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t</div >;\r\n};\r\n\r\nTempoSettings.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\tbpm: PropTypes.number.isRequired,\r\n\tactionSetBpmLevel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TempoSettings;\r\n","export const instruments = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: \"Acoustic Grand Piano\"\r\n\t},\r\n\t{\r\n\t\tid: 45,\r\n\t\tname: \"Electric Piano\"\r\n\t},\r\n\t{\r\n\t\tid: 117,\r\n\t\tname: \"Vibraphone\"\r\n\t},\r\n\t{\r\n\t\tid: 125,\r\n\t\tname: \"Marimba\"\r\n\t},\r\n\t{\r\n\t\tid: 141,\r\n\t\tname: \"Tubular Bells\"\r\n\t},\r\n\t{\r\n\t\tid: 183,\r\n\t\tname: \"Rock Organ\"\r\n\t},\r\n\t{\r\n\t\tid: 190,\r\n\t\tname: \"Church Organ\"\r\n\t},\r\n\t{\r\n\t\tid: 223,\r\n\t\tname: \"Harmonica\"\r\n\t},\r\n\t{\r\n\t\tid: 246,\r\n\t\tname: \"Acoustic Guitar (nylon)\"\r\n\t},\r\n\t{\r\n\t\tid: 258,\r\n\t\tname: \"Acoustic Guitar (steel)\"\r\n\t},\r\n\t{\r\n\t\tid: 291,\r\n\t\tname: \"Electric Guitar (clean)\"\r\n\t},\r\n\t{\r\n\t\tid: 322,\r\n\t\tname: \"Overdriven Guitar\"\r\n\t},\r\n\t{\r\n\t\tid: 333,\r\n\t\tname: \"Distortion Guitar\"\r\n\t},\r\n\t{\r\n\t\tid: 447,\r\n\t\tname: \"Violin\"\r\n\t},\r\n\t{\r\n\t\tid: 582,\r\n\t\tname: \"Choir Aahs\"\r\n\t}\r\n];","import React from \"react\";\r\n\r\nimport { instruments } from \"./instruments\";\r\nimport OptionFromSelect from \"../changeRangeOfNotes/OptionFromSelect\";\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ChangeInstrument = ({ children, actionSetInstrumentId, instrumentId }) => {\r\n\r\n\tconst selectBody = instruments.map((elem, index) => {\r\n\t\treturn <OptionFromSelect index={elem.id} fullName={`${index + 1}) ${elem.name}`} disabled={false} key={elem.id} />;\r\n\t});\r\n\r\n\tconst selectHandler = (e) => {\r\n\t\tactionSetInstrumentId(+e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"input-settings\">\r\n\t\t\t<h3>Выбрать инструмент:</h3>\r\n\t\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t\t<Select onChange={selectHandler} value={instrumentId}>\r\n\t\t\t\t\t{selectBody}\r\n\t\t\t\t</Select>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nChangeInstrument.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\tactionSetInstrumentId: PropTypes.func.isRequired,\r\n\tinstrumentId: PropTypes.number.isRequired\r\n\r\n};\r\n\r\nexport default ChangeInstrument;","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"../button/Button\";\r\n\r\n\r\nconst HotKeyComponent = ({ hotKeys, actionKeyboardSetNewHotKeyFlag, title, hotKeyType, index }) => {\r\n\r\n\tconst typeInState = hotKeys.newHotKey.newHotKeyType;\r\n\tconst hotKeyInState = hotKeyType === \"listOfIntervalsHotKeys\" ? hotKeys[hotKeyType][index] : hotKeys[hotKeyType];\r\n\r\n\tconst needToChange = hotKeys.newHotKey.change && typeInState === hotKeyType && index === hotKeys.newHotKey.index;\r\n\r\n\tconst keyText = hotKeyInState === \" \" ? \"Space\" : hotKeyInState === null ? \"Не задано\" : hotKeyInState;\r\n\r\n\tconst buttonText = needToChange ? \"Выберите желаемую клавишу\" : `Клавиша: \"${keyText}\"`;\r\n\r\n\tconst cls = needToChange ? \"info\" : \"info-outline\";\r\n\r\n\tconst onClick = () => {\r\n\t\tactionKeyboardSetNewHotKeyFlag(\r\n\t\t\t{\r\n\t\t\t\tchange: true,\r\n\t\t\t\tnewHotKeyType: hotKeyType,\r\n\t\t\t\tindex,\r\n\t\t\t\tkey: null\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h4>{title}</h4>\r\n\t\t\t<p>\r\n\t\t\t\t<Button onClick={onClick} type=\"text\" cls={cls}>\r\n\t\t\t\t\t{buttonText}\r\n\t\t\t\t</Button>\r\n\t\t\t\t{needToChange ? <span>Предыдущее значение:&nbsp;&quot;{keyText}&quot;</span> : null}\r\n\t\t\t</p>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nHotKeyComponent.propTypes = {\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired,\r\n\ttitle: PropTypes.string.isRequired,\r\n\thotKeyType: PropTypes.string.isRequired,\r\n\tindex: PropTypes.number\r\n};\r\n\r\n\r\nexport default HotKeyComponent;","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport HotKeyComponent from \"./HotKeyComponent\";\r\nimport \"./keyboardSettings.css\";\r\n\r\nconst KeyboardSettings = ({ hotKeys, actionKeyboardSetNewHotKeyFlag }) => {\r\n\r\n\tconst intervalHotKeyComponents = hotKeys.listOfIntervalsHotKeys.map((hotKey, index) => {\r\n\t\treturn <HotKeyComponent key={`${hotKey}-${Date.now()}-${index}`} title={`Горячая клавиша ${index + 1}-ого интервала списка:`} hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"listOfIntervalsHotKeys\" index={index} />;\r\n\t});\r\n\r\n\t// const intervalHotKeyComponents = hotKeys.listOfIntervalsHotKeys.map((hotKey, index) => {\r\n\r\n\t// \tconsole.log(hotKey)\r\n\t// \treturn \"12\";\r\n\t// });\r\n\r\n\treturn <div className=\"keyboard-settings\">\r\n\t\t<h3>Настройка горячих клавиш:</h3>\r\n\t\t<HotKeyComponent title=\"Открыть/закрыть меню или всплывающее окно:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"closeHotKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Воспроизвести задание:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"playHotKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Изменить режим в задании:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"changeModeHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Воспроизвести написанную мелодию (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"playWrittenMelodyHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Удалить записанную ноту (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"dictationClearNoteHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Проверить ответ (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"dictationCheckHoteKey\" index={null} />\r\n\t\t{intervalHotKeyComponents}\r\n\t</div>;\r\n};\r\n\r\nKeyboardSettings.propTypes = {\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default KeyboardSettings;","import React, { Component } from \"react\";\r\n\r\nimport ChangeRangeOfNotes from \"../../containers/changeRangeOfNotesContainer\";\r\nimport \"./settings.css\";\r\nimport ClearSettings from \"../../containers/clearSettingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport PlayExampleButton from \"./playExampleButton/PlayExampleButton\";\r\nimport EchoSettings from \"../echoSettings/EchoSettings\";\r\nimport TempoSettings from \"../tempoSettings/TempoSettings\";\r\nimport ChangeInstrument from \"../changeInstrument/ChangeInstrument\";\r\nimport KeyboardSettings from \"../keyboardSettings/KeyboardSettings\";\r\n\r\nexport default class Settings extends Component {\r\n\tcomponentDidMount() {\r\n\r\n\t\tconst { actionUpdatePianoKeys, actionSetMode } = this.props;\r\n\t\tactionUpdatePianoKeys();\r\n\t\tactionSetMode({ mode: \"Настройки\", stat: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { actionSetEchoLevel, echoLevel, bpm, actionSetBpmLevel, actionSetInstrumentId, instrumentId, hotKeys, actionKeyboardSetNewHotKeyFlag } = this.props;\r\n\r\n\t\tconst playExampleComponent = (\r\n\t\t\t<PlayExampleButton play={this.props.play} duration={this.props.duration} />\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"settings\">\r\n\t\t\t\t<ChangeRangeOfNotes />\r\n\t\t\t\t<EchoSettings actionSetEchoLevel={actionSetEchoLevel}\r\n\t\t\t\t\techoLevel={echoLevel}>\r\n\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t</EchoSettings>\r\n\t\t\t\t<TempoSettings actionSetBpmLevel={actionSetBpmLevel}\r\n\t\t\t\t\tbpm={bpm}>\r\n\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t</TempoSettings>\r\n\t\t\t\t<ChangeInstrument actionSetInstrumentId={actionSetInstrumentId} instrumentId={instrumentId}>\r\n\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t</ChangeInstrument>\r\n\t\t\t\t<KeyboardSettings hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} />\r\n\t\t\t\t<ClearSettings />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSettings.propTypes = {\r\n\tactionUpdatePianoKeys: PropTypes.func.isRequired,\r\n\tactionSetMode: PropTypes.func.isRequired,\r\n\tplay: PropTypes.func.isRequired,\r\n\tactionSetEchoLevel: PropTypes.func.isRequired,\r\n\tactionSetBpmLevel: PropTypes.func.isRequired,\r\n\tactionSetInstrumentId: PropTypes.func.isRequired,\r\n\tduration: PropTypes.number.isRequired,\r\n\techoLevel: PropTypes.number.isRequired,\r\n\tbpm: PropTypes.number.isRequired,\r\n\tinstrumentId: PropTypes.number.isRequired,\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n","import Settings from \"../components/settings/Settings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode,\r\n\tactionSetEchoLevel,\r\n\tactionSetBpmLevel,\r\n\tactionSetInstrumentId,\r\n\tactionKeyboardSetNewHotKeyFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n\tduration: application.duration,\r\n\techoLevel: application.echoLevel,\r\n\tbpm: application.bpm,\r\n\thotKeys: application.hotKeys,\r\n\tinstrumentId: application.instrumentId\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys,\r\n\tactionSetEchoLevel,\r\n\tactionSetBpmLevel,\r\n\tactionSetInstrumentId,\r\n\tactionKeyboardSetNewHotKeyFlag\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n","import React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport \"./errorBoundary.css\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n\tstate = {\r\n\t\thasError: false\r\n\t}\r\n\r\n\tcomponentDidCatch() {\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t});\r\n\t}\r\n\r\n\treloadHandler = () => {\r\n\t\twindow.location.reload(true);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.hasError ?\r\n\t\t\t\t\t\t<div className=\"error-boundary\">\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tПохоже, что-то пошло не так. Попробуйте перезагрузить страницу. Если не помоголо, сбросьте все настройки, а после этого повторно перезагрузите страницу.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<Button onClick={this.reloadHandler}>\r\n\t\t\t\t\t\t\t\tПерезагрузить страницу\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tthis.props.children\r\n\t\t\t\t}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n\tchildren: PropTypes.node.isRequired\r\n};","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport MIDISounds from \"midi-sounds-react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport Menu from \"./containers/menuContainer\";\r\nimport Header from \"./containers/headerContainer\";\r\nimport Piano from \"./containers/pianoContainer\";\r\n\r\nimport Intervals from \"./components/intervals/Intervals\";\r\nimport ActivateMidiContainer from \"./containers/activateMidiContainer\";\r\nimport FindNote from \"./containers/findNoteContainer\";\r\nimport Dictation from \"./containers/dictationContainter\";\r\nimport FreeMode from \"./containers/freeModeContainer\";\r\nimport Settings from \"./containers/settingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.midiSounds.setEchoLevel(this.props.echoLevel);\r\n\r\n    document.getElementById(\"root\").addEventListener(\"click\", () => {\r\n      if (this.props.menuIsOpen) {\r\n        this.props.actionMenuAction(false);\r\n      }\r\n    });\r\n\r\n    document.body.onkeydown = this.keyboardEventListener;\r\n\r\n    if (this.props.menuIsOpen) {\r\n      this.props.actionMenuAction();\r\n    }\r\n\r\n    if (this.props.hotKeys.newHotKey.change) {\r\n      this.props.actionKeyboardSetNewHotKeyFlag({\r\n        change: false,\r\n        newHotKeyType: \"\",\r\n        index: null,\r\n        key: null\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  keyboardEventListener = (e) => {\r\n    const { hotKeys } = this.props;\r\n\r\n    if (!hotKeys.newHotKey.change) {\r\n      const indexKeyboardInterval = hotKeys.listOfIntervalsHotKeys.indexOf(e.key);\r\n\r\n      if (e.key === hotKeys.closeHotKey) {\r\n        if (this.props.modalWindowFlag) {\r\n          this.props.actionSetModalWindowFlag(false);\r\n        } else {\r\n          this.props.actionMenuAction();\r\n        }\r\n        e.preventDefault();\r\n      }\r\n      if (e.key === hotKeys.playHotKey && !this.props.playFlag) {\r\n        this.props.actionKeyboardSetPlayFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.playWrittenMelodyHoteKey && !this.props.playWrittenMelodyFlag) {\r\n        this.props.actionKeyboardSetPlayWrittenMelodyFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.changeModeHoteKey && !this.props.changeModeFlag) {\r\n        this.props.actionKeyboardSetChangeModeFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.dictationClearNoteHoteKey && !this.props.dictationClearNoteFlag) {\r\n        this.props.actionKeyboardSetDictationClearNoteFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.dictationCheckHoteKey && !this.props.dictationCheckFlag) {\r\n        this.props.actionKeyboardSetDictationCheckFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (indexKeyboardInterval !== -1 && !this.props.intervalsKeyboardFlag.intervalButtonFlag) {\r\n\r\n        this.props.actionKeyboardSetIntervalButtonFlag(true, indexKeyboardInterval);\r\n        e.preventDefault();\r\n      }\r\n    } else {\r\n      this.props.actionKeyboardSetNewHotKeyFlag(\r\n        {\r\n          change: false,\r\n          newHotKeyType: this.props.hotKeys.newHotKey.newHotKeyType,\r\n          index: this.props.hotKeys.newHotKey.index,\r\n          key: e.key\r\n        },\r\n      );\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.echoLevel !== this.props.echoLevel) {\r\n      this.midiSounds.setEchoLevel(this.props.echoLevel);\r\n    }\r\n\r\n    if (prevProps.instrumentId !== this.props.instrumentId) {\r\n      this.midiSounds.playChordNow(this.props.instrumentId, [60], 0);\r\n    }\r\n  }\r\n\r\n  play = (key, onlyPlay) => {\r\n    throw new Error();\r\n    const { duration, instrumentId } = this.props;\r\n    this.midiSounds.playChordNow((instrumentId ? instrumentId : 1), [key], duration);\r\n\r\n\r\n    if (!onlyPlay) {\r\n      if (this.props.needToWriteNote) {\r\n        const note = this.props.sliceArr.find(elem => elem.key === key);\r\n\r\n        if (this.props.modeDictation) {\r\n          this.props.actionWritePlayNote(note, true);\r\n        } else {\r\n          this.props.actionWritePlayNote(note, false);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { instrumentId } = this.props;\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"app\">\r\n          <Menu />\r\n          <Header />\r\n          <Piano play={this.play} />\r\n\r\n          <Switch>\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              render={() => <FreeMode />}\r\n            />\r\n            <Route\r\n              path=\"/intervals\"\r\n              render={() => <Intervals play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/find-note\"\r\n              render={() => <FindNote play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/dictation\"\r\n              render={() => <Dictation play={this.play} />}\r\n            />\r\n            <Route path=\"/options\" render={() => <Settings play={this.play} />} />\r\n          </Switch>\r\n\r\n          <ActivateMidiContainer play={this.play} />\r\n          <div className=\"midiComponent\" style={{ display: \"none\" }}>\r\n            <MIDISounds\r\n              ref={ref => (this.midiSounds = ref)}\r\n              appElementName=\"root\"\r\n              instruments={[instrumentId ? instrumentId : 1]}\r\n            />\r\n          </div>\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\n{/* <ErrorBoundary>\r\n        <div className=\"app\">\r\n          <Menu />\r\n          <Header />\r\n          <Piano play={this.play} />\r\n\r\n          <Switch>\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              render={() => <FreeMode />}\r\n            />\r\n            <Route\r\n              path=\"/intervals\"\r\n              render={() => <Intervals play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/find-note\"\r\n              render={() => <FindNote play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/dictation\"\r\n              render={() => <Dictation play={this.play} />}\r\n            />\r\n            <Route path=\"/options\" render={() => <Settings play={this.play} />} />\r\n          </Switch>\r\n\r\n          <ActivateMidiContainer play={this.play} />\r\n          <div className=\"midiComponent\" style={{ display: \"none\" }}>\r\n            <MIDISounds\r\n              ref={ref => (this.midiSounds = ref)}\r\n              appElementName=\"root\"\r\n              instruments={[instrumentId ? instrumentId : 1]}\r\n            />\r\n          </div>\r\n        </div>\r\n      </ErrorBoundary> */}\r\n\r\nApp.propTypes = {\r\n  instrumentId: PropTypes.number.isRequired,\r\n  echoLevel: PropTypes.number.isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  modeDictation: PropTypes.bool.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  mapIndex: PropTypes.object.isRequired,\r\n  actionMenuAction: PropTypes.func.isRequired,\r\n  actionWritePlayNote: PropTypes.func.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  modalWindowFlag: PropTypes.bool,\r\n  actionSetModalWindowFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayWrittenMelodyFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetDictationClearNoteFlag: PropTypes.func.isRequired,\r\n  actionKeyboardSetDictationCheckFlag: PropTypes.func.isRequired,\r\n  dictationCheckFlag: PropTypes.bool.isRequired,\r\n  intervalsKeyboardFlag: PropTypes.shape({\r\n    intervalButtonFlag: PropTypes.bool.isRequired,\r\n    interval: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  actionKeyboardSetIntervalButtonFlag: PropTypes.func.isRequired,\r\n  hotKeys: PropTypes.object.isRequired,\r\n  actionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n\r\nexport default App;\r\n","import App from \"../App\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionMenuAction,\r\n  actionWritePlayNote,\r\n  actionKeyboardSetPlayFlag,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionKeyboardSetNewHotKeyFlag\r\n\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application, piano }) => ({\r\n  menuIsOpen: application.menuIsOpen,\r\n  note: application.note,\r\n  needToWriteNote: application.needToWriteNote,\r\n  modeDictation: application.modeDictation,\r\n  echoLevel: application.echoLevel,\r\n  duration: application.duration,\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  playFlag: application.playFlag,\r\n  playWrittenMelodyFlag: application.modalWindowFlag,\r\n  changeModeFlag: application.changeModeFlag,\r\n  instrumentId: application.instrumentId,\r\n  dictationClearNoteFlag: application.dictationClearNoteFlag,\r\n  dictationCheckFlag: application.dictationCheckFlag,\r\n  intervalsKeyboardFlag: application.intervalsKeyboardFlag,\r\n  hotKeys: application.hotKeys,\r\n  sliceArr: piano.sliceArr,\r\n  mapIndex: piano.mapIndex\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction,\r\n  actionWritePlayNote,\r\n  actionKeyboardSetPlayFlag,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionKeyboardSetNewHotKeyFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE,\r\n  SET_INITIAL_STATE,\r\n  SET_ECHO_LEVEL,\r\n  SET_BPM_LEVEL,\r\n  SET_INSTRUMENTID,\r\n  KEYBOARD_SET_PLAY_FLAG,\r\n  SET_MODAL_WINDOW_FLAG,\r\n  DATA_CLEARING_FLAG,\r\n  KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  KEYBOARD_SET_NEW_HOT_KEY_FLAG\r\n} from \"../actionTypes\";\r\n\r\nlet bpm = 80;\r\nlet duration = 60 / bpm;\r\n\r\nconst initialState = {\r\n  menuIsOpen: false,\r\n  playNote: null,\r\n  needToWriteNote: false,\r\n  modeDictation: false,\r\n  mode: \"\",\r\n  stat: true,\r\n  echoLevel: 0.3,\r\n  bpm,\r\n  duration,\r\n  instrumentId: 1,\r\n  dataIsClearing: false,\r\n  playFlag: false,\r\n  playWrittenMelodyFlag: false,\r\n  modalWindowFlag: false,\r\n  changeModeFlag: false,\r\n  dictationClearNoteFlag: false,\r\n  dictationCheckFlag: false,\r\n  intervalsKeyboardFlag: {\r\n    intervalButtonFlag: false,\r\n    interval: 0\r\n  },\r\n  hotKeys: {\r\n    newHotKey: {\r\n      change: false,\r\n      newHotKeyType: \"\",\r\n      index: null,\r\n      key: null\r\n    },\r\n    closeHotKey: \"Escape\",\r\n    playHotKey: \"Enter\",\r\n    playWrittenMelodyHoteKey: \"+\",\r\n    changeModeHoteKey: \" \",\r\n    dictationClearNoteHoteKey: \"Backspace\",\r\n    dictationCheckHoteKey: \"-\",\r\n    listOfIntervalsHotKeys: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"/\", \"*\"]\r\n  }\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MENU_ACTION: {\r\n      let { menuIsOpen } = state;\r\n      let { isOpen } = action.payload;\r\n\r\n      if (typeof isOpen === \"boolean\") {\r\n        menuIsOpen = isOpen;\r\n      } else {\r\n        menuIsOpen = !menuIsOpen;\r\n      }\r\n\r\n      return { ...state, menuIsOpen };\r\n    }\r\n\r\n    case NEED_TO_WRITE_NOTE: {\r\n      return {\r\n        ...state,\r\n        needToWriteNote: action.payload || false,\r\n        playNote: null\r\n      };\r\n    }\r\n\r\n    case WRITE_PLAY_NOTE: {\r\n      return {\r\n        ...state,\r\n        playNote: { ...action.payload },\r\n        needToWriteNote: action.needToWriteNote\r\n      };\r\n    }\r\n\r\n    case INIT_DICTATION: {\r\n      return { ...state, modeDictation: action.payload };\r\n    }\r\n\r\n    case SET_MODE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    case SET_ECHO_LEVEL: {\r\n      return { ...state, echoLevel: action.payload };\r\n    }\r\n\r\n    case SET_BPM_LEVEL: {\r\n      const bpm = action.payload;\r\n      const duration = 60 / bpm;\r\n      return { ...state, bpm, duration };\r\n    }\r\n\r\n    case SET_INSTRUMENTID: {\r\n      return { ...state, instrumentId: action.payload };\r\n    }\r\n\r\n    case SET_MODAL_WINDOW_FLAG: {\r\n      return { ...state, modalWindowFlag: action.payload };\r\n    }\r\n\r\n    case DATA_CLEARING_FLAG: {\r\n      return { ...state, dataIsClearing: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_PLAY_FLAG: {\r\n      return { ...state, playFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG: {\r\n      return { ...state, playWrittenMelodyFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_CHANGE_MODE_FLAG: {\r\n      return { ...state, changeModeFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG: {\r\n      return { ...state, dictationClearNoteFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_DICTATION_CHECK_FLAG: {\r\n      return { ...state, dictationCheckFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_INTERVAL_BUTTON_FLAG: {\r\n      return { ...state, intervalsKeyboardFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_NEW_HOT_KEY_FLAG: {\r\n\r\n      let newHotKey = action.payload;\r\n      let hotKeys = { ...state.hotKeys };\r\n      const listOfIntervalsHotKeys = [...hotKeys.listOfIntervalsHotKeys];\r\n\r\n      if (!newHotKey.key && !newHotKey.change) {\r\n        return { ...state, hotKeys: { ...state.hotKeys, newHotKey } };\r\n      }\r\n\r\n      if (newHotKey.key && !newHotKey.change && hotKeys.newHotKey.change) {\r\n\r\n        for (const elem in hotKeys) {\r\n          if (hotKeys.hasOwnProperty(elem) && elem !== newHotKey.newHotKeyType) {\r\n            if (hotKeys[elem] === newHotKey.key) {\r\n              hotKeys[elem] = null;\r\n            }\r\n          } else {\r\n            hotKeys[elem] = newHotKey.key;\r\n          }\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < listOfIntervalsHotKeys.length; i++) {\r\n          if (newHotKey.index === null || newHotKey.index !== i) {\r\n            if (listOfIntervalsHotKeys[i] === newHotKey.key) {\r\n              listOfIntervalsHotKeys[i] = null;\r\n            }\r\n          } else {\r\n            listOfIntervalsHotKeys[i] = newHotKey.key;\r\n          }\r\n        }\r\n\r\n        hotKeys.newHotKey = newHotKey;\r\n        // hotKeys.listOfIntervalsHotKeys = listOfIntervalsHotKeys;\r\n\r\n        return { ...state, hotKeys: { ...hotKeys } };\r\n      }\r\n\r\n\r\n\r\n      return { ...state, hotKeys: { ...state.hotKeys, newHotKey } };\r\n\r\n    }\r\n\r\n    case SET_INITIAL_STATE: {\r\n\r\n      const { mode, stat } = state;\r\n\r\n      return {\r\n        ...initialState,\r\n        mode,\r\n        stat\r\n      };\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  setVisualEffect\r\n} from \"../arrayOfNotes\";\r\n\r\nimport {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO,\r\n  SET_INITIAL_STATE\r\n} from \"../actionTypes\";\r\n\r\nimport { dataOfIntervals } from \"../dataOfIntervals\";\r\n\r\nconst baseArrOfNotes = getBaseArrayOfNotes();\r\nconst { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(baseArrOfNotes);\r\nconst numberOfSemitones = dataOfIntervals.map(elem => elem.numberOfSemitones);\r\nconst minAmountOfNotes = Math.max.apply(null, numberOfSemitones);\r\n\r\nconst initialState = {\r\n  baseArrOfNotes,\r\n  arrOfNotes,\r\n  mapIndex,\r\n  firstBorder: { index: 0, key: baseArrOfNotes[0].key },\r\n  secondBorder: {\r\n    index: baseArrOfNotes.length - 1,\r\n    key: baseArrOfNotes[baseArrOfNotes.length - 1].key\r\n  },\r\n  sliceArr: baseArrOfNotes,\r\n  minAmountOfNotes\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_BORDERS_OF_RANGE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    case UPDATE_PIANO_KEYS: {\r\n      const sliceArr = getBaseArrayOfNotes(\r\n        state.firstBorder.index,\r\n        state.secondBorder.index\r\n      );\r\n      const { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(sliceArr);\r\n\r\n      return { ...state, arrOfNotes, sliceArr, mapIndex };\r\n    }\r\n\r\n    case SHOW_NOTES_ON_THE_PIANO: {\r\n      let { arrOfNotes, mapIndex } = state;\r\n\r\n      const { sequence, type } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        arrOfNotes: setVisualEffect({\r\n          arrOfNotes,\r\n          sequence,\r\n          type,\r\n          active: true,\r\n          mapIndex\r\n        })\r\n      };\r\n    }\r\n\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  dataOfIntervals,\r\n  getChosenIntervals,\r\n  getNewInterval,\r\n  getNewSequenceOfNotes\r\n} from \"../dataOfIntervals\";\r\n\r\nimport {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL,\r\n  SET_INITIAL_STATE,\r\n  SET_ACTIVE_KEYBOARD_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nconst allIntervals = [...dataOfIntervals];\r\n\r\nconst getNewActiveInterval = arr => {\r\n  let chosenIntervals = getChosenIntervals(arr);\r\n\r\n  let activeInterval = getNewInterval(chosenIntervals);\r\n\r\n  return activeInterval;\r\n};\r\n\r\nconst initialState = {\r\n  allIntervals,\r\n  typeOfInterval: \"melodicUp\",\r\n  activeInterval: null,\r\n  nextActiveInterval: \"\",\r\n  sequenceOfNotes: [],\r\n  settingsIsOpen: false,\r\n  showAnswer: false,\r\n  activeKeyboardInterval: {}\r\n};\r\n\r\nconst findIndex = (arr, name) => {\r\n  const index = arr.findIndex(obj => obj.name === name);\r\n  return index;\r\n};\r\n\r\nconst getLengthOfChosenIntervals = arr => {\r\n  return arr.reduce((sum, elem) => {\r\n    return elem.chosen ? sum + 1 : sum;\r\n  }, 0);\r\n};\r\n\r\nconst getNewData = ({\r\n  initNewIntervalSequence,\r\n  nextActiveInterval,\r\n  nextSequenceOfNotes,\r\n  sliceArr,\r\n  allIntervals\r\n}) => {\r\n\r\n  const activeInterval = !initNewIntervalSequence\r\n    ? nextActiveInterval\r\n      ? nextActiveInterval\r\n      : getNewActiveInterval(allIntervals)\r\n    : getNewActiveInterval(allIntervals);\r\n\r\n\r\n  const sequenceOfNotes = !initNewIntervalSequence\r\n    ? nextSequenceOfNotes\r\n      ? nextSequenceOfNotes\r\n      : getNewSequenceOfNotes(sliceArr, activeInterval)\r\n    : getNewSequenceOfNotes(sliceArr, activeInterval);\r\n\r\n  nextActiveInterval = getNewActiveInterval(allIntervals);\r\n  nextSequenceOfNotes = getNewSequenceOfNotes(sliceArr, nextActiveInterval);\r\n\r\n  return {\r\n    sequenceOfNotes,\r\n    nextActiveInterval,\r\n    nextSequenceOfNotes,\r\n    activeInterval\r\n  };\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_TYPE_OF_INTERVAL: {\r\n      return { ...state, typeOfInterval: action.payload };\r\n    }\r\n\r\n    case INTERVALS_SETTINGS_ACTION: {\r\n      const settingsIsOpen = action.payload;\r\n      return { ...state, settingsIsOpen };\r\n    }\r\n\r\n    case INVERSE_CHOSEN_INTERVAL: {\r\n      const interval = { ...action.payload };\r\n      const chosen = interval.chosen;\r\n\r\n      const allIntervals = [...state.allIntervals];\r\n\r\n      if (chosen && getLengthOfChosenIntervals(allIntervals) <= 2) {\r\n        return { ...state };\r\n      }\r\n\r\n      const index = findIndex(allIntervals, interval.name);\r\n      interval.chosen = !interval.chosen;\r\n\r\n      allIntervals[index] = interval;\r\n\r\n      return { ...state, allIntervals };\r\n    }\r\n\r\n    case SHOW_THE_CORRECT_INTERVAL: {\r\n      return { ...state, showAnswer: true };\r\n    }\r\n\r\n    case GET_NEXT_INTERVAL: {\r\n      const { sliceArr, initNewIntervalSequence } = action.payload;\r\n      const { allIntervals } = state;\r\n\r\n      let {\r\n        sequenceOfNotes,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes,\r\n        activeInterval\r\n      } = getNewData({\r\n        sliceArr,\r\n        initNewIntervalSequence,\r\n        allIntervals,\r\n        nextActiveInterval: state.nextActiveInterval,\r\n        nextSequenceOfNotes: state.nextSequenceOfNotes\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        activeInterval,\r\n        sequenceOfNotes,\r\n        showAnswer: false,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes\r\n      };\r\n    }\r\n\r\n\r\n    case SET_ACTIVE_KEYBOARD_INTERVAL: {\r\n      return { ...state, activeKeyboardInterval: action.payload };\r\n    }\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  nameOfInterval: \"\",\r\n  rightAnswers: 0,\r\n  amountOfAnswers: 0,\r\n  right: false,\r\n  showAnswer: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case STATISTICS_CLEARING: {\r\n      return { ...state, ...initialState };\r\n    }\r\n\r\n    case INCREMENT_RIGHT_ANSWERS: {\r\n      const rightAnswers = state.rightAnswers + 1;\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        rightAnswers,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: true,\r\n        showAnswer: true\r\n      };\r\n    }\r\n    case INCREMENT_AMOUNT_OF_ANSWERS: {\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: false,\r\n        showAnswer: true\r\n      };\r\n    }\r\n\r\n    case NEXT_BUTTON_CLICK: {\r\n      return { ...state, nameOfInterval: \"\", right: false };\r\n    }\r\n\r\n    case STATISTICS_HIDE_ANSWER: {\r\n      return { ...state, showAnswer: false };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nconst initialState = { note: null };\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_NOTE: {\r\n      const sliceArr = action.sliceArr;\r\n      const note = sliceArr[Math.floor(Math.random() * sliceArr.length)].key;\r\n\r\n      return { ...state, note };\r\n    }\r\n\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS,\r\n  SET_INITIAL_STATE\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  amountOfNotes: 4,\r\n  sequenceOfMelody: [],\r\n  sequenceOfWrittenMelody: [],\r\n  readyToCheck: false,\r\n  defaultModeWrite: false,\r\n  answers: [],\r\n  answerGiven: false\r\n};\r\n\r\nconst getNewMelody = ({ sliceArr, amountOfNotes }) => {\r\n  const sequence = [];\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const note = { ...sliceArr[Math.floor(Math.random() * sliceArr.length)] };\r\n    sequence.push(note);\r\n  }\r\n\r\n  return sequence;\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_NEW_MELODY: {\r\n      const { amountOfNotes } = state;\r\n\r\n      const sliceArr = [...action.sliceArr];\r\n\r\n      const sequenceOfMelody = getNewMelody({ sliceArr, amountOfNotes });\r\n\r\n      return { ...state, sequenceOfMelody };\r\n    }\r\n    case CHANGE_MODE: {\r\n      const modeWrite = action.payload;\r\n      return { ...state, modeWrite, readyToCheck: false };\r\n    }\r\n\r\n    case ADD_NOTE_TO_ANSWER_ARRAY: {\r\n      const { sequenceOfWrittenMelody } = state;\r\n      sequenceOfWrittenMelody.push(action.payload);\r\n\r\n      let readyToCheck = false;\r\n\r\n      if (state.amountOfNotes === sequenceOfWrittenMelody.length) {\r\n        readyToCheck = true;\r\n      }\r\n\r\n      return { ...state, sequenceOfWrittenMelody, readyToCheck };\r\n    }\r\n\r\n    case POP_LAST_ELEM_FROM_ANSWER_ARRAY: {\r\n      const sequenceOfWrittenMelody = [...state.sequenceOfWrittenMelody];\r\n\r\n      if (sequenceOfWrittenMelody.length > 0) {\r\n        sequenceOfWrittenMelody.pop();\r\n      }\r\n\r\n      return { ...state, sequenceOfWrittenMelody };\r\n    }\r\n\r\n    case WRITE_ANSWERS: {\r\n      const answerGiven = action.payload.length > 0;\r\n      return { ...state, answers: action.payload, answerGiven };\r\n    }\r\n\r\n    case CLEAR_WRITTEN_MELODY: {\r\n      return { ...state, sequenceOfWrittenMelody: [] };\r\n    }\r\n\r\n    case CHANGE_SETTINGS: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport application from \"./applicationReducer\";\r\nimport piano from \"./pianoReducer\";\r\nimport intervals from \"./intervalsReducer\";\r\nimport statistics from \"./statisticsReducer\";\r\nimport notes from \"./notesReducer\";\r\nimport dictation from \"./dictationReducer\";\r\n\r\nexport default combineReducers({\r\n  application,\r\n  piano,\r\n  intervals,\r\n  statistics,\r\n  notes,\r\n  dictation\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistedState = localStorage.getItem(\"reduxState\")\r\n  ? JSON.parse(localStorage.getItem(\"reduxState\"))\r\n  : {};\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nstore.subscribe(() => {\r\n  const state = store.getState();\r\n\r\n  const sliceState = {};\r\n\r\n  sliceState.piano = state.piano;\r\n  sliceState.dictation = state.dictation;\r\n  sliceState.application = state.application;\r\n  // sliceState.intervals = state.intervals;\r\n\r\n\r\n  const { allIntervals, typeOfInterval } = state.intervals;\r\n  sliceState.intervals = { allIntervals, typeOfInterval };\r\n\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(sliceState));\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./containers/appContainer\";\r\n\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<HashRouter>\r\n\t\t\t<App />\r\n\t\t</HashRouter>\r\n\t</Provider >,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}