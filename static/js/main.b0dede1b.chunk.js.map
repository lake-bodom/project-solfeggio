{"version":3,"sources":["components/burger/Burger.jsx","components/menu/MenuBody.jsx","components/button/Button.jsx","components/buttonsGroup/ButtonsGroup.jsx","components/modalWindow/ModalWindow.jsx","components/clearSettings/ClearSettingsModalBody.jsx","components/clearSettings/ClearSettings.jsx","store/actions/applicationActions.js","store/actionTypes.js","containers/clearSettingsContainer.js","components/ErrorBoundary/ErrorBoundary.jsx","components/menu/Menu.jsx","containers/menuContainer.js","components/header/stat/statInfo/StatInfo.jsx","components/header/stat/statInfo/StatIntervalName.jsx","components/header/stat/Stat.jsx","containers/statContainer.js","components/header/Header.jsx","containers/headerContainer.js","components/piano/PianoKey.jsx","components/piano/PianoSection.jsx","components/piano/PianoBody.jsx","components/piano/Piano.jsx","containers/pianoContainer.js","components/intervals/LeftSideButtons.jsx","components/intervals/RightSideButtons.jsx","components/intervals/IntervalsOptionButtons.jsx","store/actions/statisticsActions.js","store/actions/pianoActions.js","containers/IntervalsOptionButtonsContainer.js","store/actions/intervalsActions.js","components/intervals/GroupOfIntervals.jsx","store/dataOfIntervals.js","components/intervals/ListOfIntervals.jsx","containers/listOfIntervalsContainer.js","components/intervals/Intervals.jsx","components/activateMidi/ActivateMidi.jsx","containers/activateMidiContainer.js","components/findNote/FindNote.jsx","containers/findNoteContainer.js","store/actions/notesActions.js","components/dictation/DictationPlayButtons.jsx","components/dictation/DictationOptionsButtons.jsx","components/dictation/DictationOutputElement.jsx","components/dictation/DictationOutput.jsx","components/select/Select.jsx","components/dictation/selectComponents.jsx","components/dictation/DictationSettings.jsx","containers/dictationSettingsContainer.js","store/actions/dictationActions.js","components/dictation/Dictation.jsx","containers/dictationContainter.js","components/freeMode/FreeMode.jsx","containers/freeModeContainer.js","components/optionFromSelect/OptionFromSelect.jsx","components/changeRangeOfNotes/SelectBody.jsx","store/arrayOfNotes.js","components/changeRangeOfNotes/SelectOfRange.jsx","components/changeRangeOfNotes/ChangeRangeOfNotes.jsx","containers/changeRangeOfNotesContainer.js","components/settings/playExampleButton/PlayExampleButton.jsx","components/inputRange/InputRange.jsx","components/echoSettings/EchoSettings.jsx","components/tempoSettings/TempoSettings.jsx","components/changeInstrument/instruments.js","components/changeInstrument/ChangeInstrument.jsx","components/keyboardSettings/HotKeyComponent.jsx","components/keyboardSettings/KeyboardSettings.jsx","components/settings/Settings.jsx","containers/settingsContainer.js","App.js","containers/appContainer.js","store/reducers/applicationReducer.js","store/reducers/pianoReducer.js","store/reducers/intervalsReducer.js","store/reducers/statisticsReducer.js","store/reducers/notesReducer.js","store/reducers/dictationReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["Burger","_ref","clickHandler","menuIsOpen","left","className","concat","react_default","a","createElement","onFocus","e","target","blur","style","onClick","MenuBody","react_router_dom","to","Button","children","cls","active","disabled","classNames","push","join","defaultProps","ButtonsGroup","ModalWindow","modal","document","closeHandler","setTimeout","_this","props","close","saveHandler","saveButtonHandler","cancelHandler","cancelButtonHandler","this","body","appendChild","overflowY","removeChild","_this$props","saveButton","saveButtonName","cancelButton","cancelButtonName","ReactDOM","createPortal","buttonsGroup_ButtonsGroup","button_Button","Component","ClearSettingsModalBody","ModalWindow_ModalWindow","ClearSettings","modalOpenerHandler","actionSetModalWindowFlag","modalCloserHandler","localStorage","clear","setInitialState","actionSetDataClearingFlag","modalWindowFlag","dataIsClearing","withTitle","clearSettings_ClearSettingsModalBody","actionMenuAction","isOpen","type","payload","actionNeedToWriteNote","bool","actionWritePlayNote","note","needToWriteNote","Object","objectSpread","id","Date","now","actionSetMode","mode","stat","actionKeyboardSetPlayFlag","actionKeyboardSetPlayWrittenMelodyFlag","actionKeyboardSetChangeModeFlag","actionKeyboardSetDictationClearNoteFlag","actionKeyboardSetDictationCheckFlag","actionKeyboardSetIntervalButtonFlag","intervalButtonFlag","interval","arguments","length","undefined","actionKeyboardSetNewHotKeyFlag","mapDispatchToProps","connect","application","ErrorBoundary","state","hasError","reloadHandler","window","location","reload","setState","Fragment","clearSettingsContainer","Menu","leftBurger","leftMenuBody","menuHandler","ErrorBoundary_ErrorBoundary","menu_MenuBody","burger_Burger","getElementById","StatInfo","rightAnswers","amountOfAnswers","percent","Math","floor","round","StatIntervalName","name","Stat","_ref$stat","nameOfInterval","right","showAnswer","statBody","statInfo_StatIntervalName","statInfo_StatInfo","classesNames","statistics","Statistics","Header","statContainer","PianoKey","elem","sharp","play","key","fullName","PianoSection","map","colorKey","includes","wrong","piano_PianoKey","PianoBody","arrOfNotes","elemJSX","piano_PianoSection","Piano","piano_PianoBody","React","piano","LeftSideButtons","sequenceOfNotes","nextSequenceOfNotes","typeOfInterval","settingsIsOpen","sliceArr","duration","actionIntervalsSettingsAction","actionNextButtonClick","actionGetNextInterval","actionHideAnswer","actionUpdatePianoKeys","playFlag","playInterval","first","second","nextClickHandler","playButtonClasses","initNewIntervalSequence","RightSideButtons","actionSetActiveTypeOfInterval","changeModeFlag","primary","modes","melodicUp","melodicDown","harmonic","indexOfMode","indexOf","setModeFromKeyboard","IntervalsOptionButtons","actionStatisticsClearing","intervals_LeftSideButtons","intervals_RightSideButtons","actionIncrementRightAnswers","actionIncrementAmountOfAnswers","actionShowNotesOnThePiano","options","intervals","GroupOfIntervals","groupIndex","group","intervalClickHandler","activeKeyboardInterval","index","chosen","String","fromCharCode","rusName","dataOfIntervals","numberOfSemitones","getChosenIntervals","arr","filter","createGroupsOfIntervals","i","j","tmp","slice","getNewSequenceOfNotes","activeInterval","getBordersOfSequence","num","firstIndex","random","ListOfIntervals","allIntervals","actionInverseChosenInterval","actionShowTheCorrectInterval","intervalsKeyboardFlag","actionSetActiveKeyboardInterval","arrayOfGroups","sortedIntervals","sequence","intervalKeyboardActive","hasOwnProperty","intervals_GroupOfIntervals","visibility","obj","Intervals","IntervalsOptionButtonsContainer","listOfIntervalsContainer","ActivateMidi","status","onMIDIOnStateChange","event","port","manufacturer","requestMIDIAccessSuccess","midi","inputs","values","input","next","done","value","onmidimessage","midiOnMIDImessage","onstatechange","requestMIDIAccessFailure","velocity","data","eventKey","startListening","navigator","requestMIDIAccess","sysex","then","marginTop","marginBottom","FindNote","setVisualEffect","playNote","setRightVisualEffect","setWrongVisualEffect","_ref2","_ref3","options1","options2","playButtonHandler","setMode","answerButtonHandler","actionSetActiveNote","prevProps","_this$props2","notes","DictationPlayButtons","playGuessedMelody","playWrittenMelody","playWrittenMelodyFlag","playGuessedButtonClasses","playWrittenMelodyButtonClasses","DictationOptionsButtons","modeWrite","changeMode","clearButtonHandler","checkAnswerHandler","readyToCheck","answerGiven","nextPlayButtonHandler","settingsButtonHandler","access","clearButtonClasses","dictationClearNoteFlag","DictationOutputElement","rightAnswer","rightElem","rightElemJSX","octaveName","DictationOutput","amountOfNotes","sequenceOfMelody","sequenceOfWrittenMelody","answers","dictationOutputBody","elementJSX","dictation_DictationOutputElement","Select","onChange","amountOfNotesOptions","SelectAmountOfNotes","select_Select","modesOptions","modePlay","ru","SelectModes","DictationSettings","defaultModeWrite","selectAmountOfNotesHandler","selectModesHandler","actionChangeSettings","_this$state","selectComponents_SelectAmountOfNotes","selectComponents_SelectModes","settingsObj","dictation","Dictation","setNewMelody","actionGetNewMelody","clearAnswers","actionWriteAnswers","playMelody","getKeysArrayOfMeloday","_loop","actionChangeMode","actionPopLastElemFromAnswerArray","arrKeysArrayOfMeloday","arrKeysArrayOfWrittenMeloday","checkAnswers","getArrayOfEqualsOfAnswers","changeStat","arr1","arr2","nextButtonHandler","actionClearWrittenMelody","actionInitDictation","dictationCheckFlag","prevState","_this$props$dictation","actionAddNoteToAnswerArray","_this$props$dictation2","dictation_DictationPlayButtons","dictation_DictationOptionsButtons","dictation_DictationOutput","dictationSettingsContainer","FreeMode","OptionFromSelect","SelectBody","baseArrOfNotes","firstBorder","secondBorder","nameOfSelect","minAmountOfNotes","optionFromSelect_OptionFromSelect","propType","PropTypes","number","isRequired","shape","string","arrayOf","object","SelectOfRange","actionSetBordersOfRange","valueOfSelect","field","selectChangeHandler","changeRangeOfNotes_SelectBody","ChangeRangeOfNotes","_ref$piano","changeRangeOfNotes_SelectOfRange","PlayExampleButton","notesKeyArray","InputRange","levelValueStyle","level","onChangeHandler","min","max","step","EchoSettings","echoLevel","actionSetEchoLevel","inputRange_InputRange","TempoSettings","bpm","actionSetBpmLevel","instruments","ChangeInstrument","actionSetInstrumentId","instrumentId","selectBody","HotKeyComponent","hotKeys","title","hotKeyType","typeInState","newHotKey","newHotKeyType","hotKeyInState","needToChange","change","keyText","buttonText","KeyboardSettings","intervalHotKeyComponents","listOfIntervalsHotKeys","hotKey","keyboardSettings_HotKeyComponent","Settings","playExampleComponent","playExampleButton_PlayExampleButton","changeRangeOfNotesContainer","echoSettings_EchoSettings","tempoSettings_TempoSettings","changeInstrument_ChangeInstrument","keyboardSettings_KeyboardSettings","App","keyboardEventListener","preventDefault","indexKeyboardInterval","closeHotKey","playHotKey","playWrittenMelodyHoteKey","changeModeHoteKey","dictationClearNoteHoteKey","dictationCheckHoteKey","onlyPlay","midiSounds","playChordNow","find","modeDictation","_this2","setEchoLevel","addEventListener","onkeydown","_this3","menuContainer","headerContainer","pianoContainer","react_router","path","exact","render","freeModeContainer","intervals_Intervals","findNoteContainer","dictationContainter","settingsContainer","activateMidiContainer","display","midisoundsreact_default","ref","appElementName","mapIndex","initialState","BASE_NAMES","NAMES_OF_OCTAVES","0","1","2","3","4","5","6","7","8","BASE_START_NOTE","BASE_FINISH_NOTE","octaveNumber","getBaseArrayOfNotes","start","finish","getFullArrayAndMapIndexes","k","nextObj","section","addNewFields","toConsumableArray","forEach","element","_getIndexes","indexesOfNote","getIndexes","apply","getNewActiveInterval","getNewInterval","nextActiveInterval","combineReducers","action","_getFullArrayAndMapIn2","_action$payload","reduce","sum","findIndex","_getNewData","getNewData","getNewMelody","pop","persistedState","getItem","JSON","parse","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","sliceState","_state$intervals","setItem","stringify","es","appContainer"],"mappings":"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","file":"static/js/main.b0dede1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./burger.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Burger = ({ clickHandler, menuIsOpen, left }) => {\r\n  const className = `burger${menuIsOpen ? \" active\" : \"\"}`;\r\n  return (\r\n    <div onFocus={(e) => { e.target.blur(); }} style={{ left: left }} className={className} onClick={clickHandler}>\r\n      <span />\r\n      <span />\r\n      <span />\r\n    </div>\r\n  );\r\n};\r\n\r\nBurger.propTypes = {\r\n  clickHandler: PropTypes.func.isRequired,\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  left: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Burger;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MenuBody = ({ left, clickHandler }) => {\r\n  return (\r\n    <div className=\"menu-body\" style={{ left: left }}>\r\n      <nav className=\"nav\">\r\n        <NavLink onClick={clickHandler} to=\"/\">\r\n          Свободная игра\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/find-note\">\r\n          Искать ноту\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/intervals\">\r\n          Поиск Интервала\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/dictation\">\r\n          Музыкальный диктант\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/options\">\r\n          Настройки\r\n        </NavLink>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nMenuBody.propTypes = {\r\n  left: PropTypes.string.isRequired,\r\n  clickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MenuBody;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ onClick, children, cls, active, disabled }) => {\r\n  let classNames = [\"button\", cls];\r\n\r\n  if (active) {\r\n    classNames.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames.join(\" \")}\r\n      disabled={disabled}\r\n      onFocus={(e) => { e.target.blur(); }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\r\n  onClick: PropTypes.func,\r\n  cls: PropTypes.string,\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nButton.defaultProps = {\r\n  children: \"click\",\r\n  onClick: () => { },\r\n  cls: \"secondary-outline\",\r\n  active: false\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./buttonsGroup.css\";\r\n\r\nconst ButtonsGroup = ({ children, cls }) => {\r\n    let classNames = [\"buttonGroup\", cls];\r\n    return <div className={classNames.join(\" \")}>{children}</div>;\r\n};\r\n\r\nButtonsGroup.propTypes = {\r\n    children: PropTypes.array,\r\n    cls: PropTypes.string\r\n};\r\n\r\nButtonsGroup.defaultProps = {\r\n    children: \"\",\r\n    cls: \"horizontal\"\r\n};\r\nexport default ButtonsGroup;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./modalWindow.css\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default class ModalWindow extends Component {\r\n\r\n  modal = document.createElement(\"div\");\r\n\r\n  componentDidMount() {\r\n    this.modal.className = \"modal-wrap\";\r\n    document.body.appendChild(this.modal);\r\n    document.body.style.overflowY = \"hidden\";\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.modal);\r\n    document.body.style.overflowY = \"auto\";\r\n  }\r\n\r\n  closeHandler = () => {\r\n    setTimeout(() => {\r\n      this.props.close();\r\n    }, 100);\r\n  };\r\n\r\n  saveHandler = () => {\r\n    this.closeHandler();\r\n    this.props.saveButtonHandler();\r\n  };\r\n\r\n  cancelHandler = () => {\r\n    this.closeHandler();\r\n    this.props.cancelButtonHandler();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      saveButton,\r\n      saveButtonName,\r\n      cancelButton,\r\n      cancelButtonName\r\n    } = this.props;\r\n\r\n\r\n    return ReactDOM.createPortal(\r\n      <div className=\"modal-window\" >\r\n        <span className=\"close\" onClick={this.closeHandler}>\r\n          &times;\r\n        </span>\r\n        {this.props.children}\r\n        <ButtonsGroup cls=\"flex\">\r\n          {saveButton ? (\r\n            <Button onClick={this.saveHandler} cls=\"info\">\r\n              {saveButtonName}\r\n            </Button>\r\n          ) : null}\r\n          {cancelButton ? (\r\n            <Button onClick={this.cancelHandler} cls=\"danger\">\r\n              {cancelButtonName}\r\n            </Button>\r\n          ) : null}\r\n        </ButtonsGroup>\r\n      </div>,\r\n      this.modal\r\n    );\r\n  }\r\n}\r\n\r\nModalWindow.propTypes = {\r\n  close: PropTypes.func.isRequired,\r\n  saveButton: PropTypes.bool.isRequired,\r\n  saveButtonName: PropTypes.string,\r\n  cancelButton: PropTypes.bool.isRequired,\r\n  cancelButtonName: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n  saveButtonHandler: PropTypes.func,\r\n  cancelButtonHandler: PropTypes.func\r\n};\r\n\r\nModalWindow.defaultProps = {\r\n  cancelButtonHandler: () => { }\r\n};\r\n","import React from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ClearSettingsModalBody = ({ close, saveButtonHandler }) => {\r\n\r\n  return (\r\n    <ModalWindow close={close} saveButton={true}\r\n      saveButtonName={\"Да\"}\r\n      cancelButton={true}\r\n      cancelButtonName={\"Нет\"}\r\n      saveButtonHandler={saveButtonHandler}\r\n      cancelButtonHandler={() => { }}>\r\n      <h3>Сбросить все настройки</h3>\r\n      <p>Вы уверены, что хотите совершить сброс всех настроек?</p>\r\n    </ModalWindow>\r\n  );\r\n};\r\n\r\nClearSettingsModalBody.propTypes = {\r\n  close: PropTypes.func.isRequired,\r\n  saveButtonHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ClearSettingsModalBody;","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\nimport ClearSettingsModalBody from \"./ClearSettingsModalBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./clearSettings.css\";\r\n\r\nexport default class ClearSettings extends Component {\r\n\r\n\r\n\tmodalOpenerHandler = () => {\r\n\t\tthis.props.actionSetModalWindowFlag(true);\r\n\t}\r\n\r\n\tmodalCloserHandler = () => {\r\n\t\tthis.props.actionSetModalWindowFlag(false);\r\n\t}\r\n\r\n\tsaveButtonHandler = () => {\r\n\t\tlocalStorage.clear();\r\n\t\tthis.props.setInitialState();\r\n\t\tthis.props.actionSetDataClearingFlag(true);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.actionSetDataClearingFlag(false);\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { modalOpenerHandler } = this;\r\n\t\tconst { modalWindowFlag, dataIsClearing, withTitle } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"clear-settings\">\r\n\t\t\t\t{withTitle ? <h3>Сбросить настройки:</h3> : null}\r\n\t\t\t\t<Button onClick={modalOpenerHandler}>\r\n\t\t\t\t\tСбросить все настройки\r\n\t\t\t\t</Button>\r\n\t\t\t\t{dataIsClearing ? <span>\r\n\t\t\t\t\tНастройки сброшены\r\n\t\t\t\t</span> : null}\r\n\t\t\t\t{modalWindowFlag ? <ClearSettingsModalBody close={this.modalCloserHandler} saveButtonHandler={this.saveButtonHandler} /> : null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nClearSettings.propTypes = {\r\n\tactionSetDataClearingFlag: PropTypes.func.isRequired,\r\n\tsetInitialState: PropTypes.func.isRequired,\r\n\tactionSetModalWindowFlag: PropTypes.func.isRequired,\r\n\tmodalWindowFlag: PropTypes.bool,\r\n\tdataIsClearing: PropTypes.bool,\r\n\twithTitle: PropTypes.bool.isRequired\r\n};","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE,\r\n  SET_INITIAL_STATE,\r\n  SET_ECHO_LEVEL,\r\n  SET_BPM_LEVEL,\r\n  SET_INSTRUMENTID,\r\n  KEYBOARD_SET_PLAY_FLAG,\r\n  SET_MODAL_WINDOW_FLAG,\r\n  DATA_CLEARING_FLAG,\r\n  KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  KEYBOARD_SET_NEW_HOT_KEY_FLAG\r\n} from \"../actionTypes\";\r\n\r\nexport const actionMenuAction = isOpen => ({\r\n  type: MENU_ACTION,\r\n  payload: { isOpen }\r\n});\r\n\r\nexport const actionNeedToWriteNote = bool => ({\r\n  type: NEED_TO_WRITE_NOTE,\r\n  payload: bool\r\n});\r\n\r\nexport const actionWritePlayNote = (note, needToWriteNote) => ({\r\n  type: WRITE_PLAY_NOTE,\r\n  needToWriteNote,\r\n  payload: { ...note, id: Date.now() }\r\n});\r\n\r\nexport const actionInitDictation = bool => ({\r\n  type: INIT_DICTATION,\r\n  payload: bool\r\n});\r\n\r\nexport const actionSetMode = ({ mode, stat }) => ({\r\n  type: SET_MODE,\r\n  payload: { mode, stat }\r\n});\r\n\r\nexport const actionApplicationSetInitialState = () => ({\r\n  type: SET_INITIAL_STATE\r\n});\r\n\r\nexport const actionSetEchoLevel = (payload) => ({\r\n  type: SET_ECHO_LEVEL,\r\n  payload\r\n});\r\n\r\nexport const actionSetBpmLevel = (payload) => ({\r\n  type: SET_BPM_LEVEL,\r\n  payload\r\n});\r\n\r\nexport const actionSetInstrumentId = (payload) => ({\r\n  type: SET_INSTRUMENTID,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetPlayFlag = (payload) => ({\r\n  type: KEYBOARD_SET_PLAY_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionSetModalWindowFlag = (payload) => ({\r\n  type: SET_MODAL_WINDOW_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionSetDataClearingFlag = (payload) => ({\r\n  type: DATA_CLEARING_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetPlayWrittenMelodyFlag = (payload) => ({\r\n  type: KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetChangeModeFlag = (payload) => ({\r\n  type: KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetDictationClearNoteFlag = (payload) => ({\r\n  type: KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetDictationCheckFlag = (payload) => ({\r\n  type: KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  payload\r\n});\r\n\r\nexport const actionKeyboardSetIntervalButtonFlag = (bool, interval = 0) => ({\r\n  type: KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  payload: {\r\n    intervalButtonFlag: bool,\r\n    interval\r\n  }\r\n});\r\n\r\nexport const actionKeyboardSetNewHotKeyFlag = (payload) => ({\r\n  type: KEYBOARD_SET_NEW_HOT_KEY_FLAG,\r\n  payload\r\n});\r\n","export const MENU_ACTION = \"MENU_ACTION\";\r\nexport const NEED_TO_WRITE_NOTE = \"NEED_TO_WRITE_NOTE\";\r\nexport const WRITE_PLAY_NOTE = \"WRITE_PLAY_NOTE\";\r\nexport const INIT_DICTATION = \"INIT_DICTATION\";\r\nexport const SET_MODE = \"SET_MODE\";\r\nexport const SET_ECHO_LEVEL = \"SET_ECHO_LEVEL\";\r\nexport const SET_BPM_LEVEL = \"SET_BPM_LEVEL\";\r\nexport const SET_INSTRUMENTID = \"SET_INSTRUMENTID\";\r\nexport const SET_MODAL_WINDOW_FLAG = \"SET_MODAL_WINDOW_FLAG\";\r\nexport const DATA_CLEARING_FLAG = \"DATA_CLEARING_FLAG\";\r\nexport const KEYBOARD_SET_PLAY_FLAG = \"KEYBOARD_SET_PLAY_FLAG\";\r\nexport const KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG = \"KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG\";\r\nexport const KEYBOARD_SET_CHANGE_MODE_FLAG = \"KEYBOARD_SET_CHANGE_MODE_FLAG\";\r\nexport const KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG = \"KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG\";\r\nexport const KEYBOARD_SET_DICTATION_CHECK_FLAG = \"KEYBOARD_SET_DICTATION_CHECK_FLAG\";\r\nexport const KEYBOARD_SET_INTERVAL_BUTTON_FLAG = \"KEYBOARD_SET_INTERVAL_BUTTON_FLAG\";\r\nexport const KEYBOARD_SET_NEW_HOT_KEY_FLAG = \"KEYBOARD_SET_NEW_HOT_KEY_FLAG\";\r\n\r\nexport const UPDATE_PIANO_KEYS = \"UPDATE_PIANO_KEYS\";\r\nexport const SET_BORDERS_OF_RANGE = \"SET_BORDERS_OF_RANGE\";\r\nexport const SHOW_NOTES_ON_THE_PIANO = \"SHOW_NOTES_ON_THE_PIANO\";\r\n\r\nexport const SET_ACTIVE_NOTE = \"SET_ACTIVE_NOTE\";\r\n\r\nexport const SET_ACTIVE_TYPE_OF_INTERVAL = \"SET_ACTIVE_TYPE_OF_INTERVAL\";\r\nexport const SET_NEW_INTERVAL = \"SET_NEW_INTERVAL\";\r\nexport const INTERVALS_SETTINGS_ACTION = \"INTERVALS_SETTINGS_ACTION\";\r\nexport const INVERSE_CHOSEN_INTERVAL = \"INVERSE_CHOSEN_INTERVAL\";\r\nexport const GET_ANSWER_INTERVAL = \"GET_ANSWER_INTERVAL\";\r\nexport const GET_NEXT_INTERVAL = \"GET_NEXT_INTERVAL\";\r\nexport const SET_ACTIVE_KEYBOARD_INTERVAL = \"SET_ACTIVE_KEYBOARD_INTERVAL\";\r\n\r\nexport const SHOW_THE_CORRECT_INTERVAL = \"SHOW_THE_CORRECT_INTERVAL\";\r\nexport const INCREMENT_RIGHT_ANSWERS = \"INCREMENT_RIGHT_ANSWERS\";\r\nexport const INCREMENT_AMOUNT_OF_ANSWERS = \"INCREMENT_AMOUNT_OF_ANSWERS\";\r\nexport const NEXT_BUTTON_CLICK = \"NEXT_BUTTON_CLICK\";\r\nexport const STATISTICS_CLEARING = \"STATISTICS_CLEARING\";\r\nexport const STATISTICS_HIDE_ANSWER = \"STATISTICS_HIDE_ANSWER\";\r\n\r\nexport const GET_NEW_MELODY = \"GET_NEW_MELODY\";\r\nexport const CHANGE_MODE = \"CHANGE_MODE\";\r\nexport const ADD_NOTE_TO_ANSWER_ARRAY = \"ADD_NOTE_TO_ANSWER_ARRAY\";\r\nexport const POP_LAST_ELEM_FROM_ANSWER_ARRAY =\r\n  \"POP_LAST_ELEM_FROM_ANSWER_ARRAY\";\r\nexport const WRITE_ANSWERS = \"WRITE_ANSWERS\";\r\nexport const CLEAR_WRITTEN_MELODY = \"CLEAR_WRITTEN_MELODY\";\r\nexport const CHANGE_SETTINGS = \"CHANGE_SETTINGS\";\r\n\r\nexport const SET_INITIAL_STATE = \"SET_INITIAL_STATE\";\r\n","import ClearSettings from \"../components/clearSettings/ClearSettings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionApplicationSetInitialState, actionSetModalWindowFlag, actionSetDataClearingFlag } from \"../store/actions/applicationActions\";\r\n\r\nconst setInitialState = actionApplicationSetInitialState;\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  dataIsClearing: application.dataIsClearing\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setInitialState,\r\n  actionSetModalWindowFlag,\r\n  actionSetDataClearingFlag\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClearSettings);\r\n","import React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport \"./errorBoundary.css\";\r\nimport ClearSettings from \"../../containers/clearSettingsContainer\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n\tstate = {\r\n\t\thasError: false\r\n\t}\r\n\r\n\tcomponentDidCatch() {\r\n\t\tthis.setState({\r\n\t\t\thasError: true\r\n\t\t});\r\n\t}\r\n\r\n\treloadHandler = () => {\r\n\t\twindow.location.reload(true);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.hasError ?\r\n\t\t\t\t\t\t<div className=\"error-boundary\">\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tПохоже, что-то пошло не так. Попробуйте перезагрузить страницу. Если не помогло, сбросьте все настройки, а после этого повторно перезагрузите страницу.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t<ClearSettings withTitle={false} />\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t<Button onClick={this.reloadHandler}>\r\n\t\t\t\t\t\t\t\t\tПерезагрузить страницу\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\tthis.props.children\r\n\t\t\t\t}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n\tchildren: PropTypes.node.isRequired\r\n};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./menu.css\";\r\n\r\nimport Burger from \"../burger/Burger\";\r\nimport MenuBody from \"./MenuBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\n\r\nconst Menu = ({ menuIsOpen, actionMenuAction }) => {\r\n  const leftBurger = menuIsOpen ? \"260px\" : \"10px\";\r\n  const leftMenuBody = menuIsOpen ? \"0px\" : \"-1000px\";\r\n\r\n  const menuHandler = () => {\r\n    actionMenuAction();\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <ErrorBoundary>\r\n      <div className=\"menu\">\r\n        <MenuBody left={leftMenuBody} clickHandler={menuHandler} />\r\n        <Burger\r\n          left={leftBurger}\r\n          clickHandler={menuHandler}\r\n          menuIsOpen={menuIsOpen}\r\n        />\r\n      </div>\r\n    </ErrorBoundary>,\r\n    document.getElementById(\"menu\")\r\n  );\r\n};\r\n\r\nMenu.propTypes = {\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  actionMenuAction: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Menu;\r\n","import Menu from \"../components/menu/Menu\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionMenuAction } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n  menuIsOpen: application.menuIsOpen\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Menu);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatInfo = ({ rightAnswers, amountOfAnswers }) => {\r\n  const percent =\r\n    amountOfAnswers !== 0\r\n      ? Math.floor(Math.round((rightAnswers / amountOfAnswers) * 100))\r\n      : \"0\";\r\n  return (\r\n    <React.Fragment>\r\n      <span>{rightAnswers}</span>&nbsp;/&nbsp;\r\n      <span>{amountOfAnswers}</span>&nbsp;\r\n      <span>({percent}%)</span>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nStatInfo.propTypes = {\r\n  rightAnswers: PropTypes.number.isRequired,\r\n  amountOfAnswers: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatInfo;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatIntervalName = ({ name }) => {\r\n  return <span>{name}</span>;\r\n};\r\n\r\nStatIntervalName.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default StatIntervalName;\r\n","import React from \"react\";\r\nimport StatInfo from \"./statInfo/StatInfo\";\r\nimport StatIntervalName from \"./statInfo/StatIntervalName\";\r\nimport \"./stat.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stat = ({\r\n  stat: { nameOfInterval, right, rightAnswers, amountOfAnswers, showAnswer }\r\n}) => {\r\n  const statBody = nameOfInterval ? (\r\n    <StatIntervalName name={nameOfInterval} />\r\n  ) : (\r\n      <StatInfo rightAnswers={rightAnswers} amountOfAnswers={amountOfAnswers} />\r\n    );\r\n\r\n  let classesNames = [\"stat\"];\r\n\r\n  if (showAnswer) {\r\n    if (right) {\r\n      classesNames.push(\"rightAnswer\");\r\n    } else {\r\n      classesNames.push(\"wrongAnswer\");\r\n    }\r\n  }\r\n\r\n  return <div className={classesNames.join(\" \")}>{statBody}</div>;\r\n};\r\n\r\nStat.propTypes = {\r\n  stat: PropTypes.shape({\r\n    nameOfInterval: PropTypes.string,\r\n    right: PropTypes.bool.isRequired,\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired\r\n};\r\n\r\nexport default Stat;\r\n","import Statistics from \"../components/header/stat/Stat\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ statistics }) => ({\r\n  stat: statistics\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);\r\n","import React from \"react\";\r\nimport Stat from \"../../containers/statContainer\";\r\nimport \"./header.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nconst Header = ({ stat, mode }) => {\r\n  return (\r\n    <ErrorBoundary>\r\n      <div className=\"header\">\r\n        {stat ? <Stat /> : null}\r\n        {mode ? <h2>{mode}</h2> : null}\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  stat: PropTypes.bool.isRequired,\r\n  mode: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import Header from \"../components/header/Header\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n\tmode: application.mode,\r\n\tstat: application.stat\r\n});\r\n\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoKey = ({ elem, className, sharp, play }) => {\r\n  const handleClick = () => {\r\n    play(elem.key);\r\n  };\r\n  return (\r\n    <div className={className.join(\" \")} onClick={handleClick}>\r\n      {sharp ? elem.name : elem.fullName}\r\n    </div>\r\n  );\r\n};\r\n\r\nPianoKey.propTypes = {\r\n  elem: PropTypes.shape({\r\n    key: PropTypes.number,\r\n    name: PropTypes.string,\r\n    fullName: PropTypes.string\r\n  }),\r\n  className: PropTypes.arrayOf(PropTypes.string),\r\n  sharp: PropTypes.bool,\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoKey.defaultProps = {\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoKey;\r\n","import React from \"react\";\r\nimport PianoKey from \"./PianoKey\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoSection = ({ elem, play }) => {\r\n  const section = elem.map(elem => {\r\n    const sharp = elem.name.includes(\"#\");\r\n    let className = [\"piano-key\"];\r\n    const colorKey = sharp ? \"piano-black-key\" : \"piano-white-key\";\r\n    className.push(colorKey);\r\n\r\n    if (elem.active) {\r\n      className.push(\"piano-key-active\");\r\n    }\r\n    if (elem.right) {\r\n      className.push(\"piano-key-right\");\r\n    }\r\n\r\n    if (elem.wrong) {\r\n      className.push(\"piano-key-wrong\");\r\n    }\r\n\r\n    return (\r\n      <PianoKey play={play} key={elem.key} elem={elem} className={className} />\r\n    );\r\n  });\r\n\r\n  return section;\r\n};\r\n\r\nPianoSection.propTypes = {\r\n  play: PropTypes.func,\r\n  elem: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nPianoSection.defaultProps = {\r\n  play: () => {},\r\n  elem: []\r\n};\r\n\r\nexport default PianoSection;\r\n","import React from \"react\";\r\nimport PianoSection from \"./PianoSection\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoBody = ({ arrOfNotes, play }) => {\r\n  const bodyPiano = arrOfNotes.map(elem => {\r\n    const elemJSX = <PianoSection elem={elem} play={play} />;\r\n    return (\r\n      <div key={elem[0].fullName} className={\"piano-keys-section\"}>\r\n        {elemJSX}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return bodyPiano;\r\n};\r\n\r\nPianoBody.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoBody.defaultProps = {\r\n  arrOfNotes: [],\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoBody;\r\n","import React from \"react\";\r\n\r\nimport \"./piano.css\";\r\nimport PianoBody from \"./PianoBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nclass Piano extends React.Component {\r\n  render() {\r\n    const { arrOfNotes, play } = this.props;\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"piano\">\r\n          <PianoBody arrOfNotes={arrOfNotes} play={play} />\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nPiano.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Piano;\r\n","import Piano from \"../components/piano/Piano\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  arrOfNotes: piano.arrOfNotes\r\n});\r\n\r\nexport default connect(mapStateToProps)(Piano);\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LeftSideButtons = ({\r\n  sequenceOfNotes,\r\n  nextSequenceOfNotes,\r\n  typeOfInterval,\r\n  settingsIsOpen,\r\n  showAnswer,\r\n  sliceArr,\r\n  duration,\r\n  play,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionHideAnswer,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  playFlag\r\n}) => {\r\n  const playInterval = () => {\r\n    let first, second;\r\n\r\n    if (showAnswer) {\r\n      first = nextSequenceOfNotes[0];\r\n      second = nextSequenceOfNotes[1];\r\n    } else {\r\n      first = sequenceOfNotes[0];\r\n      second = sequenceOfNotes[1];\r\n    }\r\n\r\n    switch (typeOfInterval) {\r\n      case \"melodicUp\": {\r\n        play(first);\r\n        setTimeout(() => {\r\n          play(second);\r\n        }, duration * 1000);\r\n        break;\r\n      }\r\n      case \"melodicDown\": {\r\n        play(second);\r\n        setTimeout(() => {\r\n          play(first);\r\n        }, duration * 1000);\r\n        break;\r\n      }\r\n      case \"harmonic\": {\r\n        play(first);\r\n        play(second);\r\n        break;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const nextClickHandler = () => {\r\n    actionNextButtonClick(!settingsIsOpen);\r\n    actionGetNextInterval({ sliceArr });\r\n    actionUpdatePianoKeys();\r\n    actionHideAnswer();\r\n    playInterval();\r\n  };\r\n\r\n  const optionsClickHandler = () => {\r\n    actionIntervalsSettingsAction(!settingsIsOpen);\r\n    const initNewIntervalSequence = true;\r\n\r\n    if (settingsIsOpen) {\r\n      actionNextButtonClick();\r\n      actionUpdatePianoKeys();\r\n      actionHideAnswer();\r\n      actionGetNextInterval({ sliceArr, initNewIntervalSequence });\r\n    }\r\n  };\r\n\r\n  if (playFlag && !settingsIsOpen) {\r\n    setTimeout(() => {\r\n      actionKeyboardSetPlayFlag(false);\r\n    }, 300);\r\n    if (showAnswer) {\r\n      nextClickHandler();\r\n\r\n    } else {\r\n      playInterval();\r\n    }\r\n  } else {\r\n    actionKeyboardSetPlayFlag(false);\r\n  }\r\n\r\n  const playButtonClasses = [(settingsIsOpen ? \"secondary\" : \"info\")];\r\n\r\n  if (playFlag) {\r\n    playButtonClasses.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={playButtonClasses.join(\" \")}\r\n        disabled={settingsIsOpen ? true : false}\r\n        onClick={showAnswer ? nextClickHandler : playInterval}\r\n      >\r\n        {showAnswer ? \"Дальше\" : \"Играть интервал\"}\r\n      </Button>\r\n      <Button\r\n        cls={settingsIsOpen ? \"info\" : \"secondary\"}\r\n        onClick={optionsClickHandler}\r\n      >\r\n        {settingsIsOpen ? \"Установить\" : \"Настройки\"}\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nLeftSideButtons.propTypes = {\r\n  settingsIsOpen: PropTypes.bool,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default LeftSideButtons;\r\n\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RightSideButtons = ({\r\n  actionSetActiveTypeOfInterval,\r\n  typeOfInterval,\r\n  changeModeFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n}) => {\r\n  const primary = \"primary active\";\r\n  const primaryOutline = \"primary-outline\";\r\n  const modes = [\"melodicUp\", \"melodicDown\", \"harmonic\"];\r\n\r\n  const melodicUp = typeOfInterval === modes[0];\r\n  const melodicDown = typeOfInterval === modes[1];\r\n  const harmonic = typeOfInterval === modes[2];\r\n\r\n  const setModeFromKeyboard = () => {\r\n    const indexOfMode = modes.indexOf(typeOfInterval);\r\n\r\n    if (indexOfMode !== -1) {\r\n      actionSetActiveTypeOfInterval(modes[(indexOfMode + 1) % modes.length]);\r\n    }\r\n  };\r\n\r\n  if (changeModeFlag) {\r\n    actionKeyboardSetChangeModeFlag(false);\r\n    setModeFromKeyboard();\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={melodicUp ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[0]);\r\n        }}\r\n        disabled={melodicUp ? true : false}\r\n      >\r\n        Мелодический вверх\r\n      </Button>\r\n      <Button\r\n        cls={melodicDown ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[1]);\r\n        }}\r\n        disabled={melodicDown ? true : false}\r\n      >\r\n        Мелодический вниз\r\n      </Button>\r\n      <Button\r\n        cls={harmonic ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(modes[2]);\r\n        }}\r\n        disabled={harmonic ? true : false}\r\n      >\r\n        Гармонический\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nRightSideButtons.propTypes = {\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n\r\n};\r\n\r\nexport default RightSideButtons;\r\n","import React from \"react\";\r\nimport LeftSideButtons from \"./LeftSideButtons\";\r\nimport RightSideButtons from \"./RightSideButtons\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass IntervalsOptionButtons extends React.Component {\r\n  componentDidMount() {\r\n    const initNewIntervalSequence = true;\r\n\r\n    if (this.props.settingsIsOpen) {\r\n      this.props.actionIntervalsSettingsAction(false);\r\n    }\r\n\r\n    this.props.actionGetNextInterval({\r\n      sliceArr: this.props.sliceArr,\r\n      initNewIntervalSequence\r\n    });\r\n\r\n    this.props.actionSetMode({ mode: \"Поиск интервала\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionIntervalsSettingsAction(false);\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sliceArr,\r\n      play,\r\n      typeOfInterval,\r\n      sequenceOfNotes,\r\n      nextSequenceOfNotes,\r\n      settingsIsOpen,\r\n      showAnswer,\r\n      duration,\r\n      actionSetActiveTypeOfInterval,\r\n      actionIntervalsSettingsAction,\r\n      actionNextButtonClick,\r\n      actionGetNextInterval,\r\n      actionHideAnswer,\r\n      actionUpdatePianoKeys,\r\n      playFlag,\r\n      actionKeyboardSetPlayFlag,\r\n      changeModeFlag,\r\n      actionKeyboardSetChangeModeFlag\r\n    } = this.props;\r\n\r\n\r\n    return (\r\n      <div className=\"intervalsOptionsButtons\">\r\n        <LeftSideButtons\r\n          sequenceOfNotes={sequenceOfNotes}\r\n          nextSequenceOfNotes={nextSequenceOfNotes}\r\n          typeOfInterval={typeOfInterval}\r\n          settingsIsOpen={settingsIsOpen}\r\n          showAnswer={showAnswer}\r\n          sliceArr={sliceArr}\r\n          duration={duration}\r\n          play={play}\r\n          actionIntervalsSettingsAction={actionIntervalsSettingsAction}\r\n          actionNextButtonClick={actionNextButtonClick}\r\n          actionGetNextInterval={actionGetNextInterval}\r\n          actionUpdatePianoKeys={actionUpdatePianoKeys}\r\n          actionHideAnswer={actionHideAnswer}\r\n          playFlag={playFlag}\r\n          actionKeyboardSetPlayFlag={actionKeyboardSetPlayFlag}\r\n        />\r\n        <RightSideButtons\r\n          typeOfInterval={typeOfInterval}\r\n          actionSetActiveTypeOfInterval={actionSetActiveTypeOfInterval}\r\n          changeModeFlag={changeModeFlag}\r\n          actionKeyboardSetChangeModeFlag={actionKeyboardSetChangeModeFlag}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIntervalsOptionButtons.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  duration: PropTypes.number.isRequired,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  settingsIsOpen: PropTypes.bool,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n\r\n\r\n\r\n};\r\n\r\nexport default IntervalsOptionButtons;\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nexport const actionIncrementRightAnswers = name => ({\r\n  type: INCREMENT_RIGHT_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionIncrementAmountOfAnswers = name => ({\r\n  type: INCREMENT_AMOUNT_OF_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionNextButtonClick = name => ({\r\n  type: NEXT_BUTTON_CLICK,\r\n  payload: name\r\n});\r\n\r\nexport const actionStatisticsClearing = () => ({\r\n  type: STATISTICS_CLEARING\r\n});\r\n\r\nexport const actionHideAnswer = () => ({\r\n  type: STATISTICS_HIDE_ANSWER\r\n});\r\n\r\n","import {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO\r\n} from \"../actionTypes\";\r\n\r\nexport const actionUpdatePianoKeys = () => ({\r\n  type: UPDATE_PIANO_KEYS\r\n});\r\n\r\nexport const actionSetBordersOfRange = arr => ({\r\n  type: SET_BORDERS_OF_RANGE,\r\n  payload: { firstBorder: arr[0], secondBorder: arr[1] }\r\n});\r\n\r\nexport const actionShowNotesOnThePiano = payload => ({\r\n  type: SHOW_NOTES_ON_THE_PIANO,\r\n  payload\r\n});\r\n","import IntervalsOptionButtons from \"../components/intervals/IntervalsOptionButtons\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionGetNextInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionNextButtonClick,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionUpdatePianoKeys } from \"../store/actions/pianoActions\";\r\n\r\nimport { actionSetMode, actionKeyboardSetPlayFlag, actionKeyboardSetChangeModeFlag } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ intervals, piano, application }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  sequenceOfNotes: intervals.sequenceOfNotes,\r\n  nextSequenceOfNotes: intervals.nextSequenceOfNotes,\r\n  typeOfInterval: intervals.typeOfInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  settingsIsOpen: intervals.settingsIsOpen,\r\n  duration: application.duration,\r\n  playFlag: application.playFlag,\r\n  changeModeFlag: application.changeModeFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionStatisticsClearing,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IntervalsOptionButtons);\r\n","import {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  GET_ANSWER_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL,\r\n  SET_ACTIVE_KEYBOARD_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nexport const actionSetActiveTypeOfInterval = active => ({\r\n  type: SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  payload: active\r\n});\r\n\r\nexport const actionIntervalsSettingsAction = payload => ({\r\n  type: INTERVALS_SETTINGS_ACTION,\r\n  payload\r\n});\r\n\r\nexport const actionInverseChosenInterval = obj => ({\r\n  type: INVERSE_CHOSEN_INTERVAL,\r\n  payload: obj\r\n});\r\n\r\nexport const actionGetAnswerIntervals = () => ({\r\n  type: GET_ANSWER_INTERVAL\r\n});\r\n\r\nexport const actionShowTheCorrectInterval = () => ({\r\n  type: SHOW_THE_CORRECT_INTERVAL\r\n});\r\n\r\nexport const actionGetNextInterval = options => ({\r\n  type: GET_NEXT_INTERVAL,\r\n  payload: options\r\n});\r\n\r\nexport const actionSetActiveKeyboardInterval = obj => ({\r\n  type: SET_ACTIVE_KEYBOARD_INTERVAL,\r\n  payload: obj\r\n});\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GroupOfIntervals = ({\r\n  groupIndex,\r\n  group,\r\n  settingsIsOpen,\r\n  intervalClickHandler,\r\n  activeKeyboardInterval\r\n}) => {\r\n\r\n  const body = group.map((interval, index) => {\r\n\r\n    let cls = [\"secondary-outline\"];\r\n\r\n    if (activeKeyboardInterval && activeKeyboardInterval.name && activeKeyboardInterval.name === interval.name) {\r\n      cls.push(\"active\");\r\n    }\r\n\r\n    return (\r\n      <Button\r\n        key={interval.name}\r\n        onClick={() => {\r\n          intervalClickHandler(interval);\r\n        }}\r\n        cls={cls.join(\" \")}\r\n      >\r\n        {settingsIsOpen ? (\r\n          <span className=\"check\">\r\n            {interval.chosen\r\n              ? String.fromCharCode(10003)\r\n              : String.fromCharCode(215)}\r\n          </span>\r\n        ) : null}\r\n        <b>{groupIndex * 4 + index + 1})&nbsp;</b>{interval.rusName}\r\n      </Button>\r\n    );\r\n  });\r\n\r\n  GroupOfIntervals.propTypes = {\r\n    groupIndex: PropTypes.number.isRequired,\r\n    group: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    settingsIsOpen: PropTypes.bool,\r\n    intervalClickHandler: PropTypes.func.isRequired,\r\n    activeKeyboardInterval: PropTypes.object\r\n  };\r\n\r\n  return <ButtonsGroup cls=\"vertical\">{body}</ButtonsGroup>;\r\n};\r\n\r\nexport default GroupOfIntervals;\r\n","export const dataOfIntervals = [\r\n  {\r\n    name: \"minorSecond\",\r\n    rusName: \"Малая Секунда\",\r\n    numberOfSemitones: 1,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSecond\",\r\n    rusName: \"Большая Секунда\",\r\n    numberOfSemitones: 2,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorThird\",\r\n    rusName: \"Малая Терция\",\r\n    numberOfSemitones: 3,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorThird\",\r\n    rusName: \"Большая Терция\",\r\n    numberOfSemitones: 4,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFourth\",\r\n    rusName: \"Чистая Кварта\",\r\n    numberOfSemitones: 5,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"triton\",\r\n    rusName: \"Тритон\",\r\n    numberOfSemitones: 6,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFifth\",\r\n    rusName: \"Чистая Квинта\",\r\n    numberOfSemitones: 7,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSixth\",\r\n    rusName: \"Малая Секста\",\r\n    numberOfSemitones: 8,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSixth\",\r\n    rusName: \"Большая Секста\",\r\n    numberOfSemitones: 9,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSeventh\",\r\n    rusName: \"Малая Септима\",\r\n    numberOfSemitones: 10,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSeventh\",\r\n    rusName: \"Большая Септима\",\r\n    numberOfSemitones: 11,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"octave\",\r\n    rusName: \"Октава\",\r\n    numberOfSemitones: 12,\r\n    chosen: true\r\n  }\r\n];\r\n\r\nexport const getChosenIntervals = arr => {\r\n  return arr.filter(elem => {\r\n    return elem.chosen;\r\n  });\r\n};\r\n\r\nexport const createGroupsOfIntervals = arr => {\r\n  const chunk = 4;\r\n  let i,\r\n    j,\r\n    tmp = [];\r\n  for (i = 0, j = arr.length; i < j; i += chunk) {\r\n    tmp.push(arr.slice(i, i + chunk));\r\n  }\r\n  return tmp;\r\n};\r\n\r\nexport const getNewInterval = arr => {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n};\r\n\r\nexport const getNewSequenceOfNotes = (sliceArr, activeInterval) => {\r\n  const { numberOfSemitones } = activeInterval;\r\n\r\n  const sequence = getBordersOfSequence(sliceArr, numberOfSemitones);\r\n\r\n  return sequence;\r\n};\r\n\r\nconst getBordersOfSequence = (arr, num) => {\r\n  const firstIndex = Math.floor(Math.random() * (arr.length - num));\r\n\r\n  let firstNote = arr[firstIndex].key;\r\n  let secondNote = arr[firstIndex + num].key;\r\n\r\n\r\n  return [firstNote, secondNote];\r\n};\r\n","import React from \"react\";\r\nimport GroupOfIntervals from \"./GroupOfIntervals\";\r\n\r\nimport {\r\n  getChosenIntervals,\r\n  createGroupsOfIntervals\r\n} from \"../../store/dataOfIntervals\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListOfIntervals = ({\r\n  settingsIsOpen,\r\n  allIntervals,\r\n  activeInterval,\r\n  showAnswer,\r\n  sequenceOfNotes,\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano,\r\n  intervalsKeyboardFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionSetActiveKeyboardInterval,\r\n  activeKeyboardInterval\r\n}) => {\r\n  let arrayOfGroups = [];\r\n  let sortedIntervals = [];\r\n\r\n  if (settingsIsOpen) {\r\n    sortedIntervals = allIntervals;\r\n    arrayOfGroups = createGroupsOfIntervals(sortedIntervals);\r\n  } else {\r\n    sortedIntervals = getChosenIntervals(allIntervals);\r\n    arrayOfGroups = createGroupsOfIntervals(getChosenIntervals(allIntervals));\r\n  }\r\n\r\n  const checkAnswer = interval => {\r\n    actionShowTheCorrectInterval();\r\n    const right = activeInterval.name === interval.name;\r\n    const type = right ? \"right\" : \"wrong\";\r\n\r\n    if (right) {\r\n      actionIncrementRightAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    } else {\r\n      actionIncrementAmountOfAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    }\r\n  };\r\n\r\n  const intervalClickHandler = settingsIsOpen\r\n    ? actionInverseChosenInterval\r\n    : checkAnswer;\r\n\r\n  const intervalKeyboardActive = sortedIntervals[intervalsKeyboardFlag.interval];\r\n\r\n  if (intervalsKeyboardFlag.intervalButtonFlag && intervalKeyboardActive) {\r\n    actionKeyboardSetIntervalButtonFlag(false);\r\n    actionSetActiveKeyboardInterval(intervalKeyboardActive);\r\n\r\n    if (!showAnswer || settingsIsOpen) {\r\n      setTimeout(() => {\r\n        intervalClickHandler(intervalKeyboardActive);\r\n      }, 150);\r\n    }\r\n  } else if (intervalsKeyboardFlag.intervalButtonFlag) {\r\n    actionKeyboardSetIntervalButtonFlag(false);\r\n  }\r\n\r\n  if (activeKeyboardInterval && activeKeyboardInterval.hasOwnProperty(\"name\")) {\r\n    setTimeout(() => {\r\n      actionSetActiveKeyboardInterval(null);\r\n    }, 150);\r\n  }\r\n\r\n  const body = arrayOfGroups.map((group, groupIndex) => (\r\n    <GroupOfIntervals\r\n      groupIndex={groupIndex}\r\n      group={group}\r\n      key={group[0].name}\r\n      settingsIsOpen={settingsIsOpen}\r\n      intervalClickHandler={intervalClickHandler}\r\n      activeKeyboardInterval={activeKeyboardInterval}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className=\"listOfIntervals\"\r\n      style={showAnswer && !settingsIsOpen ? { visibility: \"hidden\" } : null}\r\n    >\r\n      {body}\r\n    </div>\r\n  );\r\n};\r\n\r\nListOfIntervals.propTypes = {\r\n  actionInverseChosenInterval: PropTypes.func.isRequired,\r\n  actionShowTheCorrectInterval: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  allIntervals: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  activeInterval: PropTypes.object,\r\n  showAnswer: PropTypes.bool,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  settingsIsOpen: PropTypes.bool,\r\n  intervalsKeyboardFlag: PropTypes.shape({\r\n    intervalButtonFlag: PropTypes.bool.isRequired,\r\n    interval: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  actionKeyboardSetIntervalButtonFlag: PropTypes.func.isRequired,\r\n  activeKeyboardInterval: PropTypes.object,\r\n  actionSetActiveKeyboardInterval: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListOfIntervals;\r\n","import ListOfIntervals from \"../components/intervals/ListOfIntervals\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionSetActiveKeyboardInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport {\r\n  actionKeyboardSetIntervalButtonFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport { actionShowNotesOnThePiano } from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ intervals, application }) => ({\r\n  settingsIsOpen: intervals.settingsIsOpen,\r\n  allIntervals: intervals.allIntervals,\r\n  activeInterval: intervals.activeInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  sequenceOfNotes: intervals.sequenceOfNotes,\r\n  activeKeyboardInterval: intervals.activeKeyboardInterval,\r\n  intervalsKeyboardFlag: application.intervalsKeyboardFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionSetActiveKeyboardInterval\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ListOfIntervals);\r\n","import React from \"react\";\r\nimport \"./intervals.css\";\r\n\r\nimport IntervalsOptionButtonsContainer from \"../../containers/IntervalsOptionButtonsContainer\";\r\nimport ListOfIntervalsContainer from \"../../containers/listOfIntervalsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nconst Intervals = ({ play }) => {\r\n  return (\r\n    <ErrorBoundary>\r\n      <div className=\"intervals\">\r\n        <IntervalsOptionButtonsContainer\r\n          play={play}\r\n        ></IntervalsOptionButtonsContainer>\r\n\r\n        <ListOfIntervalsContainer />\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nIntervals.propTypes = {\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Intervals;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ActivateMidi extends Component {\r\n  state = { status: \"\" };\r\n\r\n  onMIDIOnStateChange = event => {\r\n    this.setState({\r\n      status:\r\n        event.port.manufacturer + \" \" + event.port.name + \" \" + event.port.state\r\n    });\r\n  };\r\n\r\n  requestMIDIAccessSuccess = midi => {\r\n    const inputs = midi.inputs.values();\r\n    for (\r\n      let input = inputs.next();\r\n      input && !input.done;\r\n      input = inputs.next()\r\n    ) {\r\n      input.value.onmidimessage = this.midiOnMIDImessage;\r\n    }\r\n    midi.onstatechange = this.onMIDIOnStateChange;\r\n  };\r\n\r\n  requestMIDIAccessFailure = () => {\r\n    this.setState({ status: \"MIDI Access Failure\" });\r\n  };\r\n\r\n  midiOnMIDImessage = event => {\r\n    const keydown = 144;\r\n    const keyup = 128;\r\n    const velocity = event.data[2];\r\n\r\n    const eventKey = event.data[0];\r\n    const note = event.data[1];\r\n\r\n    const { sliceArr } = this.props;\r\n    if (note >= sliceArr[0].key && note <= sliceArr[sliceArr.length - 1].key) {\r\n      const options = { sequence: [note], type: \"active\" };\r\n\r\n      if (eventKey === keydown && velocity !== 0) {\r\n        this.props.actionShowNotesOnThePiano(options);\r\n        this.props.play(note);\r\n      } else if (eventKey === keyup || velocity === 0) {\r\n        this.props.actionUpdatePianoKeys();\r\n      }\r\n    }\r\n  };\r\n\r\n  startListening = () => {\r\n    this.setState({ status: \"waiting\" });\r\n    if (navigator.requestMIDIAccess) {\r\n      navigator\r\n        .requestMIDIAccess({ sysex: true })\r\n        .then(this.requestMIDIAccessSuccess, this.requestMIDIAccessFailure);\r\n    } else {\r\n      this.setState({ status: \"Нет доступа к миди-устройству\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"activate-midi\">\r\n        <Button cls=\"primary\" onClick={this.startListening}>\r\n          Включить MIDI клавиатуру\r\n        </Button>\r\n        <p style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\r\n          <b>Статус midi:</b>{\" \"}\r\n          {this.state.status ? this.state.status : \"отключена\"}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nActivateMidi.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n","import ActivateMidi from \"../components/activateMidi/ActivateMidi\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  sliceArr: piano.sliceArr\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ActivateMidi);\r\n","import React, { Component } from \"react\";\r\n\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nexport default class FindNote extends Component {\r\n  componentDidMount() {\r\n    this.props.actionSetActiveNote(this.props.sliceArr);\r\n    this.props.actionSetMode({ mode: \"Искать ноту\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n\r\n    const { needToWriteNote, playNote, note, actionIncrementRightAnswers, actionIncrementAmountOfAnswers, actionSetActiveNote, playFlag, actionKeyboardSetPlayFlag, changeModeFlag, actionKeyboardSetChangeModeFlag, sliceArr } = this.props;\r\n\r\n    if (prevProps.needToWriteNote && !needToWriteNote) {\r\n      if (playNote !== null) {\r\n        const playNoteKey = playNote.key;\r\n\r\n        if (playNoteKey === note) {\r\n          actionIncrementRightAnswers();\r\n          this.setVisualEffect({ right: true });\r\n        } else {\r\n          actionIncrementAmountOfAnswers();\r\n          this.setVisualEffect({ right: false, note });\r\n        }\r\n        actionSetActiveNote(sliceArr);\r\n      }\r\n    }\r\n\r\n    if (playFlag) {\r\n      this.playButtonHandler();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayFlag(false);\r\n      }, 300);\r\n    }\r\n    if (changeModeFlag) {\r\n      this.setMode(!needToWriteNote);\r\n      actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n  }\r\n\r\n  setVisualEffect = ({ right, note }) => {\r\n    const sequence = [this.props.playNote.key];\r\n    if (right) {\r\n      this.setRightVisualEffect({ sequence });\r\n    } else {\r\n      this.setWrongVisualEffect({ sequence, note });\r\n    }\r\n  };\r\n\r\n  setRightVisualEffect = ({ sequence }) => {\r\n    const options = { sequence, type: \"right\" };\r\n    this.props.actionShowNotesOnThePiano(options);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 2000);\r\n  };\r\n\r\n  setWrongVisualEffect = ({ sequence, note }) => {\r\n    const options1 = {\r\n      sequence,\r\n      type: \"wrong\"\r\n    };\r\n\r\n    const options2 = {\r\n      sequence: [note],\r\n      type: \"right\"\r\n    };\r\n\r\n    this.props.actionShowNotesOnThePiano(options1);\r\n    this.props.actionShowNotesOnThePiano(options2);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 1500);\r\n  };\r\n\r\n  playButtonHandler = () => {\r\n    const { note } = this.props;\r\n\r\n    this.props.play(note);\r\n    this.setMode(false);\r\n  };\r\n\r\n  answerButtonHandler = () => {\r\n    this.setMode(true);\r\n  };\r\n\r\n  setMode = bool => {\r\n    if (this.props.needToWriteNote !== bool) {\r\n      this.props.actionNeedToWriteNote(bool);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { needToWriteNote, playFlag } = this.props;\r\n    const { playButtonHandler, answerButtonHandler } = this;\r\n\r\n    const playButtonClasses = [(needToWriteNote ? \"secondary-outline\" : \"info\")];\r\n\r\n    if (playFlag) {\r\n      playButtonClasses.push(\"active\");\r\n    }\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"findNote\">\r\n          <ButtonsGroup cls=\"horizontal\">\r\n            <Button\r\n              cls={playButtonClasses.join(\" \")}\r\n              onClick={playButtonHandler}\r\n            >\r\n              Играть ноту\r\n          </Button>\r\n            <Button\r\n              cls={needToWriteNote ? \"info\" : \"secondary-outline\"}\r\n              onClick={answerButtonHandler}\r\n            >\r\n              Ответить\r\n          </Button>\r\n          </ButtonsGroup>\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nFindNote.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  actionSetActiveNote: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  statistics: PropTypes.shape({\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    right: PropTypes.bool.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  note: PropTypes.number,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  playNote: PropTypes.object,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired\r\n};\r\n\r\n","import FindNote from \"../components/findNote/FindNote\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionSetActiveNote } from \"../store/actions/notesActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionNeedToWriteNote, actionSetMode, actionKeyboardSetPlayFlag, actionKeyboardSetChangeModeFlag } from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ statistics, notes, piano, application }) => ({\r\n  statistics,\r\n  note: notes.note,\r\n  sliceArr: piano.sliceArr,\r\n  playNote: application.playNote,\r\n  needToWriteNote: application.needToWriteNote,\r\n  playFlag: application.playFlag,\r\n  changeModeFlag: application.changeModeFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionStatisticsClearing,\r\n  actionSetActiveNote,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionNeedToWriteNote,\r\n  actionShowNotesOnThePiano,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetChangeModeFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FindNote);\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nexport const actionSetActiveNote = arr => ({\r\n  type: SET_ACTIVE_NOTE,\r\n  sliceArr: arr\r\n});\r\n\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationPlayButtons = ({ playGuessedMelody, playWrittenMelody, playFlag, playWrittenMelodyFlag }) => {\r\n\r\n  const playGuessedButtonClasses = [(\"secondary-outline\")];\r\n  const playWrittenMelodyButtonClasses = [(\"secondary-outline\")];\r\n\r\n  if (playFlag) {\r\n    playGuessedButtonClasses.push(\"active\");\r\n  }\r\n\r\n  if (playWrittenMelodyFlag) {\r\n    playWrittenMelodyButtonClasses.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button cls={playGuessedButtonClasses.join(\" \")} onClick={playGuessedMelody}>Играть угадываемую мелодию</Button>\r\n      <Button cls={playWrittenMelodyButtonClasses.join(\" \")} onClick={playWrittenMelody}>Играть написанную мелодию</Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nDictationPlayButtons.propTypes = {\r\n  playGuessedMelody: PropTypes.func.isRequired,\r\n  playWrittenMelody: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool\r\n};\r\n\r\nDictationPlayButtons.defaultProps = {\r\n  playWrittenMelodyFlag: false\r\n};\r\n\r\nexport default DictationPlayButtons;\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst DictationOptionsButtons = ({\r\n  modeWrite,\r\n  changeMode,\r\n  clearButtonHandler,\r\n  checkAnswerHandler,\r\n  readyToCheck,\r\n  answerGiven,\r\n  nextPlayButtonHandler,\r\n  settingsButtonHandler,\r\n  dictationClearNoteFlag\r\n}) => {\r\n\r\n  const access = readyToCheck && !answerGiven;\r\n\r\n\r\n  const clearButtonClasses = [\"secondary-outline\"];\r\n\r\n  if (dictationClearNoteFlag) {\r\n    clearButtonClasses.push(\"active\");\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"dictation-options-buttons\">\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button\r\n          onClick={nextPlayButtonHandler}\r\n          cls={modeWrite ? \"info-outline\" : \"info active\"}\r\n          disabled={modeWrite ? false : true}\r\n        >\r\n          {answerGiven ? \"Далее\" : \"Играть\"}\r\n        </Button>\r\n        {answerGiven ? null : (\r\n          <Button\r\n            onClick={changeMode}\r\n            cls={modeWrite ? \"info active\" : \"info-outline\"}\r\n            disabled={modeWrite ? true : false}\r\n          >\r\n            Писать\r\n          </Button>\r\n        )}\r\n      </ButtonsGroup>\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button onClick={clearButtonHandler} cls={clearButtonClasses.join(\" \")}>Стереть</Button>\r\n        <Button\r\n          onClick={checkAnswerHandler}\r\n          cls={access ? \"danger\" : \"danger-outline\"}\r\n          disabled={!access}\r\n        >\r\n          Проверить\r\n        </Button>\r\n      </ButtonsGroup>\r\n      <Button cls=\"primary\" onClick={settingsButtonHandler}>\r\n        Настроки\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DictationOptionsButtons;\r\n\r\nDictationOptionsButtons.propTypes = {\r\n  modeWrite: PropTypes.bool.isRequired,\r\n  changeMode: PropTypes.func.isRequired,\r\n  nextPlayButtonHandler: PropTypes.func.isRequired,\r\n  clearButtonHandler: PropTypes.func.isRequired,\r\n  checkAnswerHandler: PropTypes.func.isRequired,\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object),\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  readyToCheck: PropTypes.bool.isRequired\r\n};\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationOutputElement = ({\r\n  elem,\r\n  index,\r\n  rightAnswer,\r\n  answerGiven,\r\n  rightElem\r\n}) => {\r\n  const cls = answerGiven ? (rightAnswer ? \"right\" : \"wrong\") : \"\";\r\n\r\n  const rightElemJSX = answerGiven ? (\r\n    rightAnswer ? null : (\r\n      <span className=\"right\">\r\n        &nbsp;\r\n        {rightElem ? `${rightElem.octaveName} - ${rightElem.fullName}` : \" ?\"}\r\n      </span>\r\n    )\r\n  ) : null;\r\n\r\n  return (\r\n    <p className=\"dictation-output-element\">\r\n      <span className=\"index-output-element\">{`${index + 1} нота:`}</span>&nbsp;\r\n      <span className={cls}>\r\n        {elem ? `${elem.octaveName} - ${elem.fullName}` : \" ?\"}\r\n      </span>\r\n      {rightElemJSX}\r\n    </p>\r\n  );\r\n};\r\n\r\nDictationOutputElement.propTypes = {\r\n  elem: PropTypes.object,\r\n  index: PropTypes.number.isRequired,\r\n  rightAnswer: PropTypes.bool,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n  rightElem: PropTypes.object\r\n};\r\n\r\nexport default DictationOutputElement;\r\n","import React from \"react\";\r\nimport DictationOutputElement from \"./DictationOutputElement\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationOutput = ({\r\n  amountOfNotes,\r\n  sequenceOfMelody,\r\n  sequenceOfWrittenMelody,\r\n  answerGiven,\r\n  answers\r\n}) => {\r\n  let dictationOutputBody = [];\r\n\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const elem = sequenceOfWrittenMelody[i];\r\n    const rightElem = sequenceOfMelody[i];\r\n    const elementJSX = (\r\n      <DictationOutputElement\r\n        elem={elem}\r\n        index={i}\r\n        answerGiven={answerGiven}\r\n        rightAnswer={answers[i]}\r\n        rightElem={rightElem}\r\n        key={i}\r\n      />\r\n    );\r\n\r\n    dictationOutputBody.push(elementJSX);\r\n  }\r\n  return (\r\n    <div className=\"dictation-output\">\r\n      <h3>Список отгаданных нот:</h3>\r\n      {dictationOutputBody}\r\n    </div>\r\n  );\r\n};\r\n\r\nDictationOutput.propTypes = {\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  answers: PropTypes.arrayOf(PropTypes.bool).isRequired,\r\n  answerGiven: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default DictationOutput;\r\n","import React from \"react\";\r\nimport \"./select.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Select = ({ onChange, children, value }) => {\r\n\treturn <select className=\"select\" value={value} onChange={onChange}>\r\n\t\t{children}\r\n\t</select>;\r\n};\r\n\r\nSelect.propTypes = {\r\n\tvalue: PropTypes.PropTypes.oneOfType([\r\n\t\tPropTypes.bool,\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\tonChange: PropTypes.func.isRequired,\r\n\tchildren: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Select;","import React from \"react\";\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst amountOfNotes = [3, 4, 5, 6, 7];\r\n\r\nconst amountOfNotesOptions = amountOfNotes.map(elem => (\r\n  <option value={elem} key={elem}>\r\n    {elem}\r\n  </option>\r\n));\r\n\r\nconst SelectAmountOfNotes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {amountOfNotesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectAmountOfNotes.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst modes = [\r\n  { modePlay: false, ru: \"Играть\" },\r\n  { modePlay: true, ru: \"Писать\" }\r\n];\r\n\r\nconst modesOptions = modes.map(elem => (\r\n  <option value={elem.modePlay} key={elem.ru}>\r\n    {elem.ru}\r\n  </option>\r\n));\r\n\r\nconst SelectModes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {modesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectModes.propTypes = {\r\n  value: PropTypes.bool.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport { SelectAmountOfNotes, SelectModes };\r\n","import React, { Component } from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\";\r\nimport { SelectAmountOfNotes, SelectModes } from \"./selectComponents\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DictationSettings extends Component {\r\n  state = {\r\n    amountOfNotes: 4,\r\n    defaultModeWrite: false,\r\n    modeWrite: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { amountOfNotes, defaultModeWrite } = this.props;\r\n    this.setState({\r\n      amountOfNotes,\r\n      defaultModeWrite\r\n    });\r\n  }\r\n\r\n  selectAmountOfNotesHandler = e => {\r\n    this.setState({\r\n      amountOfNotes: +e.target.value\r\n    });\r\n  };\r\n\r\n  selectModesHandler = e => {\r\n    let defaultModeWrite, modeWrite;\r\n    const value = e.target.value;\r\n\r\n    if (value === \"true\") {\r\n      defaultModeWrite = true;\r\n      modeWrite = true;\r\n    }\r\n    if (value === \"false\") {\r\n      defaultModeWrite = false;\r\n      modeWrite = false;\r\n    }\r\n\r\n    this.setState({\r\n      defaultModeWrite,\r\n      modeWrite\r\n    });\r\n  };\r\n\r\n  saveButtonHandler = () => {\r\n    this.props.actionChangeSettings(this.state);\r\n  };\r\n\r\n  cancelButtonHandler = () => {\r\n    this.setState({\r\n      amountOfNotes: this.props.amountOfNotes,\r\n      defaultModeWrite: this.props.defaultModeWrite\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      settingsButtonHandler\r\n    } = this.props;\r\n\r\n    const { amountOfNotes, defaultModeWrite } = this.state;\r\n\r\n    const {\r\n      selectAmountOfNotesHandler,\r\n      selectModesHandler,\r\n      saveButtonHandler,\r\n      cancelButtonHandler\r\n    } = this;\r\n    return (\r\n      <ModalWindow\r\n        close={settingsButtonHandler}\r\n        saveButton={true}\r\n        saveButtonName={\"Сохранить\"}\r\n        cancelButton={true}\r\n        cancelButtonName={\"Отменить\"}\r\n        saveButtonHandler={saveButtonHandler}\r\n        cancelButtonHandler={cancelButtonHandler}\r\n      >\r\n        <h3>Настройки диктанта</h3>\r\n        <h4>Количество нот:</h4>\r\n        <SelectAmountOfNotes\r\n          value={amountOfNotes}\r\n          onChange={selectAmountOfNotesHandler}\r\n        />\r\n        <h4>Режим по умолчанию:</h4>\r\n        <SelectModes value={defaultModeWrite} onChange={selectModesHandler} />\r\n      </ModalWindow>\r\n    );\r\n  }\r\n}\r\n\r\nDictationSettings.propTypes = {\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  actionChangeSettings: PropTypes.func.isRequired,\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  defaultModeWrite: PropTypes.bool.isRequired\r\n};\r\n\r\n","import DictationSettings from \"../components/dictation/DictationSettings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionChangeSettings } from \"../store/actions/dictationActions\";\r\n\r\nconst mapStateToProps = ({ dictation }) => ({\r\n  amountOfNotes: dictation.amountOfNotes,\r\n  defaultModeWrite: dictation.defaultModeWrite\r\n});\r\n\r\nconst mapDispatchToProps = { actionChangeSettings };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DictationSettings);\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS\r\n} from \"../actionTypes\";\r\n\r\nexport const actionGetNewMelody = (sliceArr) => ({\r\n  type: GET_NEW_MELODY,\r\n  sliceArr\r\n});\r\n\r\nexport const actionChangeMode = (payload) => ({\r\n  type: CHANGE_MODE,\r\n  payload\r\n});\r\n\r\nexport const actionAddNoteToAnswerArray = (payload) => ({\r\n  type: ADD_NOTE_TO_ANSWER_ARRAY,\r\n  payload\r\n});\r\n\r\nexport const actionPopLastElemFromAnswerArray = () => ({\r\n  type: POP_LAST_ELEM_FROM_ANSWER_ARRAY\r\n});\r\n\r\nexport const actionWriteAnswers = (arr) => ({\r\n  type: WRITE_ANSWERS,\r\n  payload: arr\r\n});\r\n\r\nexport const actionClearWrittenMelody = () => ({\r\n  type: CLEAR_WRITTEN_MELODY\r\n});\r\n\r\nexport const actionChangeSettings = (settingsObj) => ({\r\n  type: CHANGE_SETTINGS,\r\n  payload: settingsObj\r\n});\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./dictation.css\";\r\n\r\nimport DictationPlayButtons from \"./DictationPlayButtons\";\r\nimport DictationOptionsButtons from \"./DictationOptionsButtons\";\r\nimport DuctationOutput from \"./DictationOutput\";\r\nimport DictationSettings from \"../../containers/dictationSettingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nexport default class Dictation extends Component {\r\n  componentDidMount() {\r\n    const { defaultModeWrite } = this.props.dictation;\r\n    this.props.actionWritePlayNote(null, false);\r\n\r\n    this.changeMode(null, defaultModeWrite);\r\n\r\n    if (this.props.needToWriteNote !== defaultModeWrite) {\r\n      this.props.actionNeedToWriteNote(defaultModeWrite);\r\n    }\r\n\r\n    this.setNewMelody();\r\n    this.props.actionInitDictation(true);\r\n    this.props.actionSetMode({ mode: \"Музыкальный диктант\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n    this.props.actionClearWrittenMelody();\r\n    this.clearAnswers();\r\n\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.playWrittenMelodyFlag) {\r\n      this.props.actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.modalWindowFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationClearNoteFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationCheckFlag) {\r\n      this.props.actionKeyboardSetDictationCheckFlag(false);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionInitDictation(false);\r\n    this.clearAnswers();\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionClearWrittenMelody();\r\n\r\n    if (this.props.modalWindowFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.playFlag) {\r\n      this.props.actionKeyboardSetPlayFlag(false);\r\n    }\r\n    if (this.props.playWrittenMelodyFlag) {\r\n      this.props.actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n    }\r\n    if (this.props.changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n    }\r\n    if (this.props.dictationClearNoteFlag) {\r\n      this.props.actionSetModalWindowFlag(false);\r\n    }\r\n    if (this.props.dictationCheckFlag) {\r\n      this.props.actionKeyboardSetDictationCheckFlag(false);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const { sequenceOfWrittenMelody, amountOfNotes, answerGiven, readyToCheck } = this.props.dictation;\r\n    const { playNote, playFlag, actionKeyboardSetPlayFlag, playWrittenMelodyFlag, actionKeyboardSetPlayWrittenMelodyFlag, changeModeFlag, dictationClearNoteFlag, actionKeyboardSetDictationClearNoteFlag, dictationCheckFlag,\r\n      actionKeyboardSetDictationCheckFlag } = this.props;\r\n\r\n    if (prevState.dictation.amountOfNotes !== amountOfNotes) {\r\n      this.setNewMelody();\r\n    }\r\n\r\n    if (sequenceOfWrittenMelody.length < amountOfNotes && playNote) {\r\n      if (\r\n        (prevState.playNote && playNote.id !== prevState.playNote.id) ||\r\n        (prevState.playNote === null && playNote !== null)\r\n      ) {\r\n        this.props.actionAddNoteToAnswerArray(playNote);\r\n      }\r\n    }\r\n\r\n    if (playFlag) {\r\n      this.playGuessedMelody();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (playWrittenMelodyFlag) {\r\n      this.playWrittenMelody();\r\n      setTimeout(() => {\r\n        actionKeyboardSetPlayWrittenMelodyFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (changeModeFlag) {\r\n      this.props.actionKeyboardSetChangeModeFlag(false);\r\n      this.nextPlayButtonHandler();\r\n    }\r\n\r\n    if (dictationClearNoteFlag) {\r\n      this.clearButtonHandler();\r\n      setTimeout(() => {\r\n        actionKeyboardSetDictationClearNoteFlag(false);\r\n      }, 300);\r\n    }\r\n\r\n    if (dictationCheckFlag) {\r\n      actionKeyboardSetDictationCheckFlag(false);\r\n      if (dictationCheckFlag && readyToCheck && !answerGiven) {\r\n        this.checkAnswerHandler();\r\n        setTimeout(() => {\r\n        }, 300);\r\n      }\r\n    }\r\n  }\r\n\r\n  setNewMelody = () => {\r\n    this.props.actionGetNewMelody(this.props.sliceArr);\r\n  };\r\n\r\n  clearAnswers = () => {\r\n    this.props.actionWriteAnswers([]);\r\n  };\r\n\r\n  playGuessedMelody = () => {\r\n    const sequence = this.props.dictation.sequenceOfMelody.map(\r\n      elem => elem.key\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playWrittenMelody = () => {\r\n    const sequence = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playMelody = sequence => {\r\n    const onlyPlay = true;\r\n    for (let i = 0; i < sequence.length; i++) {\r\n      if (sequence[i]) {\r\n        setTimeout(() => {\r\n          this.props.play(sequence[i], onlyPlay);\r\n        }, this.props.duration * 1000 * i);\r\n      }\r\n    }\r\n  };\r\n\r\n  changeMode = (e, modeWrite) => {\r\n    modeWrite =\r\n      typeof modeWrite === \"boolean\"\r\n        ? modeWrite\r\n        : !this.props.dictation.modeWrite;\r\n\r\n    this.props.actionChangeMode(modeWrite);\r\n\r\n    this.props.actionNeedToWriteNote(modeWrite);\r\n  };\r\n\r\n  clearButtonHandler = () => {\r\n    if (this.props.dictation.sequenceOfWrittenMelody.length > 0) {\r\n      this.props.actionPopLastElemFromAnswerArray();\r\n    }\r\n  };\r\n\r\n  checkAnswerHandler = () => {\r\n    const arrKeysArrayOfMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfMelody\r\n    );\r\n\r\n    const arrKeysArrayOfWrittenMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n    if (arrKeysArrayOfMeloday.length === arrKeysArrayOfWrittenMeloday.length) {\r\n      const checkAnswers = this.getArrayOfEqualsOfAnswers(arrKeysArrayOfMeloday\r\n        , arrKeysArrayOfWrittenMeloday);\r\n\r\n      this.changeStat(checkAnswers);\r\n      this.props.actionWriteAnswers(checkAnswers);\r\n    }\r\n  };\r\n\r\n  getKeysArrayOfMeloday = sequence => {\r\n    const arr = sequence.map(elem => elem.key);\r\n\r\n    return arr;\r\n  };\r\n\r\n  getArrayOfEqualsOfAnswers = (arr1, arr2) => {\r\n\r\n\r\n    const checkAnswers = [];\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      checkAnswers.push(arr1[i] === arr2[i]);\r\n    }\r\n\r\n    return checkAnswers;\r\n  };\r\n\r\n  changeStat = arr => {\r\n    if (arr.indexOf(false) === -1) {\r\n      this.props.actionIncrementRightAnswers();\r\n    } else {\r\n      this.props.actionIncrementAmountOfAnswers();\r\n    }\r\n  };\r\n\r\n  nextButtonHandler = () => {\r\n    this.setNewMelody();\r\n\r\n    this.clearAnswers();\r\n\r\n    this.props.actionClearWrittenMelody();\r\n\r\n    this.props.actionHideAnswer();\r\n  };\r\n\r\n  settingsButtonHandler = () => {\r\n    this.props.actionSetModalWindowFlag(!this.props.modalWindowFlag);\r\n  };\r\n\r\n  nextPlayButtonHandler = () => {\r\n    this.changeMode();\r\n    if (this.props.dictation.answerGiven) {\r\n      this.nextButtonHandler();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const modeWrite = this.props.dictation.modeWrite || false;\r\n\r\n    const needToWriteNote = this.props.needToWriteNote;\r\n\r\n    const {\r\n      amountOfNotes,\r\n      sequenceOfMelody,\r\n      sequenceOfWrittenMelody,\r\n      answerGiven,\r\n      answers,\r\n      readyToCheck\r\n    } = this.props.dictation;\r\n\r\n    const { playFlag, playWrittenMelodyFlag, dictationClearNoteFlag } = this.props;\r\n\r\n    const { nextPlayButtonHandler, settingsButtonHandler } = this;\r\n\r\n    return (\r\n      <ErrorBoundary>\r\n        <div>\r\n          <DictationPlayButtons\r\n            playGuessedMelody={this.playGuessedMelody}\r\n            playWrittenMelody={this.playWrittenMelody}\r\n            playFlag={playFlag}\r\n            playWrittenMelodyFlag={playWrittenMelodyFlag}\r\n          />\r\n          <DictationOptionsButtons\r\n            modeWrite={modeWrite}\r\n            changeMode={this.changeMode}\r\n            clearButtonHandler={this.clearButtonHandler}\r\n            checkAnswerHandler={this.checkAnswerHandler}\r\n            sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n            amountOfNotes={amountOfNotes}\r\n            answerGiven={answerGiven}\r\n            nextPlayButtonHandler={nextPlayButtonHandler}\r\n            settingsButtonHandler={settingsButtonHandler}\r\n            dictationClearNoteFlag={dictationClearNoteFlag}\r\n            readyToCheck={readyToCheck}\r\n          />\r\n          <DuctationOutput\r\n            amountOfNotes={amountOfNotes}\r\n            needToWriteNote={needToWriteNote}\r\n            sequenceOfMelody={sequenceOfMelody}\r\n            sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n            answerGiven={answerGiven}\r\n            answers={answers}\r\n          />\r\n\r\n          {this.props.modalWindowFlag ? (\r\n            <DictationSettings settingsButtonHandler={settingsButtonHandler} />\r\n          ) : null}\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nDictation.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  playNote: PropTypes.object,\r\n  actionGetNewMelody: PropTypes.func.isRequired,\r\n  actionChangeMode: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionInitDictation: PropTypes.func.isRequired,\r\n  actionAddNoteToAnswerArray: PropTypes.func.isRequired,\r\n  actionWritePlayNote: PropTypes.func.isRequired,\r\n  actionPopLastElemFromAnswerArray: PropTypes.func.isRequired,\r\n  actionWriteAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionClearWrittenMelody: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  dictation: PropTypes.shape({\r\n    amountOfNotes: PropTypes.number.isRequired,\r\n    sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    defaultModeWrite: PropTypes.bool.isRequired,\r\n    answers: PropTypes.array.isRequired,\r\n    answerGiven: PropTypes.bool.isRequired,\r\n    modeWrite: PropTypes.bool,\r\n    readyToCheck: PropTypes.bool\r\n  }).isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  actionSetModalWindowFlag: PropTypes.func.isRequired,\r\n  modalWindowFlag: PropTypes.bool,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayWrittenMelodyFlag: PropTypes.func.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetDictationClearNoteFlag: PropTypes.func.isRequired,\r\n  actionKeyboardSetDictationCheckFlag: PropTypes.func.isRequired,\r\n  dictationCheckFlag: PropTypes.bool.isRequired\r\n};\r\n","import Dictation from \"../components/dictation/Dictation\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nimport {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionAddNoteToAnswerArray,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionClearWrittenMelody\r\n} from \"../store/actions/dictationActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport {\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionWritePlayNote,\r\n  actionSetMode,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ piano, dictation, application }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  dictation,\r\n  needToWriteNote: application.needToWriteNote,\r\n  playNote: application.playNote,\r\n  duration: application.duration,\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  playFlag: application.playFlag,\r\n  playWrittenMelodyFlag: application.playWrittenMelodyFlag,\r\n  changeModeFlag: application.changeModeFlag,\r\n  dictationClearNoteFlag: application.dictationClearNoteFlag,\r\n  dictationCheckFlag: application.dictationCheckFlag\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionAddNoteToAnswerArray,\r\n  actionWritePlayNote,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionClearWrittenMelody,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dictation);\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FreeMode = ({ actionSetMode, actionUpdatePianoKeys }) => {\r\n  actionSetMode({ mode: \"Свободная игра\", stat: false });\r\n  actionUpdatePianoKeys();\r\n  return <div className=\"free-mode\"></div>;\r\n};\r\n\r\nFreeMode.propTypes = {\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FreeMode;\r\n","import FreeMode from \"../components/freeMode/FreeMode\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FreeMode);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OptionFromSelect = ({ index, fullName, disabled }) => {\r\n  return (\r\n    <option disabled={disabled} value={index}>\r\n      {fullName}\r\n    </option>\r\n  );\r\n};\r\n\r\nOptionFromSelect.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  fullName: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nOptionFromSelect.defaultProps = {\r\n  disabled: false\r\n};\r\n\r\nexport default OptionFromSelect;\r\n","import React from \"react\";\r\nimport OptionFromSelect from \"../optionFromSelect/OptionFromSelect\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectBody = ({\r\n  baseArrOfNotes,\r\n  firstBorder,\r\n  secondBorder,\r\n  nameOfSelect,\r\n  minAmountOfNotes\r\n}) => {\r\n  const body = baseArrOfNotes.map(({ fullName, key, index }) => {\r\n    let disabled = false;\r\n\r\n    if (nameOfSelect === \"firstBorder\") {\r\n      if (key > secondBorder.key - minAmountOfNotes) {\r\n        disabled = true;\r\n      }\r\n    } else if (key < firstBorder.key + minAmountOfNotes) {\r\n      disabled = true;\r\n    }\r\n\r\n    return (\r\n      <OptionFromSelect\r\n        disabled={disabled}\r\n        fullName={fullName}\r\n        index={index}\r\n        key={key}\r\n      />\r\n    );\r\n  });\r\n  return body;\r\n};\r\n\r\nSelectBody.propType = {\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired)\r\n};\r\n\r\n\r\nexport default SelectBody;","let baseArrOfNotes = [];\r\n\r\nconst BASE_NAMES = [\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\"\r\n];\r\n\r\nconst NAMES_OF_OCTAVES = {\r\n  0: \"Субконтроктава\",\r\n  1: \"Контроктава\",\r\n  2: \"Большая октава\",\r\n  3: \"Малая октава\",\r\n  4: \"Первая октава\",\r\n  5: \"Вторая октава\",\r\n  6: \"Третья октава\",\r\n  7: \"Четвертая октава\",\r\n  8: \"Пятая октава\"\r\n};\r\n\r\nconst BASE_START_NOTE = 21;\r\nconst BASE_FINISH_NOTE = 108;\r\n\r\nlet octaveNumber = 0;\r\n\r\nfor (let i = 0; i <= BASE_FINISH_NOTE - BASE_START_NOTE; i++) {\r\n  const name = BASE_NAMES[i % BASE_NAMES.length];\r\n\r\n  if (name === \"C\") {\r\n    octaveNumber++;\r\n  }\r\n  baseArrOfNotes.push({\r\n    index: i,\r\n    key: i + BASE_START_NOTE,\r\n    name,\r\n    fullName: name + octaveNumber,\r\n    octaveName: NAMES_OF_OCTAVES[octaveNumber]\r\n  });\r\n}\r\n\r\nfunction getBaseArrayOfNotes(\r\n  start = 0,\r\n  finish = BASE_FINISH_NOTE - BASE_START_NOTE\r\n) {\r\n  return [...baseArrOfNotes].slice(start, finish + 1);\r\n}\r\n\r\nfunction getFullArrayAndMapIndexes(arr) {\r\n  const mapIndex = {};\r\n\r\n  const arrOfNotes = [];\r\n\r\n  for (let k = 0; k < arr.length; k++) {\r\n    const obj = arr[k];\r\n    const nextObj = arr[k + 1];\r\n    let i = arrOfNotes.length;\r\n    let section = [];\r\n\r\n    section.push(addNewFields(obj));\r\n\r\n    mapIndex[arr[k].key] = {\r\n      i,\r\n      j: 0\r\n    };\r\n\r\n    if (nextObj && nextObj.name.includes(\"#\")) {\r\n      section.push(addNewFields(nextObj));\r\n      k++;\r\n      mapIndex[arr[k].key] = {\r\n        i,\r\n        j: 1\r\n      };\r\n    }\r\n\r\n    arrOfNotes.push(section);\r\n  }\r\n\r\n  return { mapIndex, arrOfNotes };\r\n}\r\n\r\nfunction addNewFields(obj) {\r\n  return { ...obj, active: false, wrong: false, right: false };\r\n}\r\n\r\nconst getIndexes = ({ key, mapIndex }) => {\r\n  const indexesOfNote = mapIndex[key];\r\n  const i = indexesOfNote.i;\r\n  const j = indexesOfNote.j;\r\n  return { i, j };\r\n};\r\n\r\nconst setVisualEffect = ({ arrOfNotes, sequence, type, active, mapIndex }) => {\r\n  let arr = [...arrOfNotes];\r\n\r\n  sequence.forEach(element => {\r\n    const { i, j } = getIndexes({ key: element, mapIndex });\r\n    if (active) {\r\n      arr[i][j][type] = true;\r\n    } else {\r\n      if (!type) {\r\n        arr[i][j].right = false;\r\n        arr[i][j].wrong = false;\r\n      } else {\r\n        arr[i][j][type] = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  return arr;\r\n};\r\n\r\nexport {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  getIndexes,\r\n  setVisualEffect\r\n};\r\n","import React from \"react\";\r\nimport SelectBody from \"./SelectBody\";\r\n\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectOfRange = ({\r\n  nameOfSelect,\r\n  baseArrOfNotes,\r\n  minAmountOfNotes,\r\n  actionSetBordersOfRange,\r\n  firstBorder,\r\n  secondBorder\r\n}) => {\r\n  const selectChangeHandler = (e, field) => {\r\n    let index = +e.target.value;\r\n    const key = baseArrOfNotes[index].key;\r\n\r\n    if (field === \"firstBorder\") {\r\n      firstBorder = { index, key };\r\n    } else {\r\n      secondBorder = { index, key };\r\n    }\r\n\r\n    actionSetBordersOfRange([firstBorder, secondBorder]);\r\n  };\r\n\r\n  const valueOfSelect =\r\n    nameOfSelect === \"firstBorder\" ? firstBorder.index : secondBorder.index;\r\n\r\n  return (\r\n    <Select\r\n      value={valueOfSelect}\r\n      onChange={e => {\r\n        selectChangeHandler(e, nameOfSelect);\r\n      }}\r\n    >\r\n      <SelectBody\r\n        minAmountOfNotes={minAmountOfNotes}\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect={nameOfSelect}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n      />\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectOfRange.propTypes = {\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n  actionSetBordersOfRange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectOfRange;\r\n","import React from \"react\";\r\nimport SelectOfRange from \"./SelectOfRange\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"../button/Button\";\r\n\r\nconst ChangeRangeOfNotes = ({\r\n  actionUpdatePianoKeys,\r\n  actionSetBordersOfRange,\r\n  piano: { firstBorder, secondBorder, baseArrOfNotes, minAmountOfNotes }\r\n}) => {\r\n  const clickHandler = () => {\r\n    actionUpdatePianoKeys();\r\n  };\r\n\r\n  return (\r\n    <div className=\"changeRangeOfNotes\">\r\n      <h3>Изменить диапазон:</h3>\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"firstBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"secondBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n\r\n      <Button onClick={clickHandler}>Выбрать диапазон</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nChangeRangeOfNotes.propTypes = {\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetBordersOfRange: PropTypes.func.isRequired,\r\n  piano: PropTypes.object\r\n};\r\n\r\nexport default ChangeRangeOfNotes;\r\n","import ChangeRangeOfNotes from \"../components/changeRangeOfNotes/ChangeRangeOfNotes\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  piano\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChangeRangeOfNotes);\r\n","import React from \"react\";\r\nimport Button from \"../../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PlayExampleButton = ({ play, duration }) => {\r\n\tconst clickHandler = () => {\r\n\t\tconst notesKeyArray = [60, 64, 67, 72];\r\n\r\n\t\tfor (let i = 0; i < notesKeyArray.length; i++) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tplay(notesKeyArray[i]);\r\n\t\t\t}, duration * 1000 * i);\r\n\t\t}\r\n\t};\r\n\treturn <Button onClick={clickHandler}>\r\n\t\tВоспроизвести пример\r\n\t</Button>;\r\n};\r\n\r\nPlayExampleButton.propTypes = {\r\n\tplay: PropTypes.func.isRequired,\r\n\tduration: PropTypes.number.isRequired\r\n};\r\n\r\nexport default PlayExampleButton;","import React from \"react\";\r\n\r\nimport \"./inputRange.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst InputRange = ({ level, onChangeHandler, min, max, step }) => {\r\n\r\n\tconst percent = (level - min) / (max - min);\r\n\r\n\tlet levelValueStyle;\r\n\r\n\tif (percent < 0.35) {\r\n\t\tlevelValueStyle = { left: `calc(-8px  + 100% * ${percent} - 10px * ${percent} )` };\r\n\t} else if (percent > 0.85) {\r\n\t\tlevelValueStyle = { left: `calc(-12px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t} else if (percent > 0.65) {\r\n\t\tlevelValueStyle = { left: `calc(-14px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t} else {\r\n\t\tlevelValueStyle = { left: `calc(-18px * ${percent ? percent : 1} + 100% * ${percent} - 11px * ${percent} )` };\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"input-range-wrap\" >\r\n\t\t\t<div className=\"input-range-value\" style={levelValueStyle}>{level}</div>\r\n\t\t\t<input type=\"range\" min={min} max={max} step={step} onChange={onChangeHandler} value={level} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nInputRange.propTypes = {\r\n\tlevel: PropTypes.number.isRequired,\r\n\tmin: PropTypes.number.isRequired,\r\n\tmax: PropTypes.number.isRequired,\r\n\tstep: PropTypes.number.isRequired,\r\n\tonChangeHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InputRange;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"../inputRange/InputRange\";\r\n\r\nconst EchoSettings = ({ children, echoLevel, actionSetEchoLevel }) => {\r\n\r\n\tconst onChangeHandler = (e) => {\r\n\t\tactionSetEchoLevel(+e.target.value);\r\n\t};\r\n\r\n\treturn <div className=\"input-settings\">\r\n\t\t<h3>Уровень эхо:</h3>\r\n\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t<InputRange min={0} max={1} step={0.1} level={echoLevel} onChangeHandler={onChangeHandler} />\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t</div >;\r\n};\r\n\r\nEchoSettings.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\techoLevel: PropTypes.number.isRequired,\r\n\tactionSetEchoLevel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default EchoSettings;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport InputRange from \"../inputRange/InputRange\";\r\n\r\nconst TempoSettings = ({ children, bpm, actionSetBpmLevel }) => {\r\n\r\n\tconst onChangeHandler = (e) => {\r\n\t\tactionSetBpmLevel(+e.target.value);\r\n\t};\r\n\r\n\treturn <div className=\"input-settings\">\r\n\t\t<h3>Настрока темпа (bpm):</h3>\r\n\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t<InputRange min={50} max={180} step={1} level={bpm} onChangeHandler={onChangeHandler} />\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t</div >;\r\n};\r\n\r\nTempoSettings.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\tbpm: PropTypes.number.isRequired,\r\n\tactionSetBpmLevel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TempoSettings;\r\n","export const instruments = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: \"Acoustic Grand Piano\"\r\n\t},\r\n\t{\r\n\t\tid: 45,\r\n\t\tname: \"Electric Piano\"\r\n\t},\r\n\t{\r\n\t\tid: 117,\r\n\t\tname: \"Vibraphone\"\r\n\t},\r\n\t{\r\n\t\tid: 125,\r\n\t\tname: \"Marimba\"\r\n\t},\r\n\t{\r\n\t\tid: 141,\r\n\t\tname: \"Tubular Bells\"\r\n\t},\r\n\t{\r\n\t\tid: 183,\r\n\t\tname: \"Rock Organ\"\r\n\t},\r\n\t{\r\n\t\tid: 190,\r\n\t\tname: \"Church Organ\"\r\n\t},\r\n\t{\r\n\t\tid: 223,\r\n\t\tname: \"Harmonica\"\r\n\t},\r\n\t{\r\n\t\tid: 246,\r\n\t\tname: \"Acoustic Guitar (nylon)\"\r\n\t},\r\n\t{\r\n\t\tid: 258,\r\n\t\tname: \"Acoustic Guitar (steel)\"\r\n\t},\r\n\t{\r\n\t\tid: 291,\r\n\t\tname: \"Electric Guitar (clean)\"\r\n\t},\r\n\t{\r\n\t\tid: 322,\r\n\t\tname: \"Overdriven Guitar\"\r\n\t},\r\n\t{\r\n\t\tid: 333,\r\n\t\tname: \"Distortion Guitar\"\r\n\t},\r\n\t{\r\n\t\tid: 447,\r\n\t\tname: \"Violin\"\r\n\t},\r\n\t{\r\n\t\tid: 582,\r\n\t\tname: \"Choir Aahs\"\r\n\t}\r\n];","import React from \"react\";\r\n\r\nimport { instruments } from \"./instruments\";\r\nimport OptionFromSelect from \"../optionFromSelect/OptionFromSelect\";\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ChangeInstrument = ({ children, actionSetInstrumentId, instrumentId }) => {\r\n\r\n\tconst selectBody = instruments.map((elem, index) => {\r\n\t\treturn <OptionFromSelect index={elem.id} fullName={`${index + 1}) ${elem.name}`} disabled={false} key={elem.id} />;\r\n\t});\r\n\r\n\tconst selectHandler = (e) => {\r\n\t\tactionSetInstrumentId(+e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"input-settings\">\r\n\t\t\t<h3>Выбрать инструмент:</h3>\r\n\t\t\t<div className=\"input-settings-wrap\">\r\n\t\t\t\t<Select onChange={selectHandler} value={instrumentId}>\r\n\t\t\t\t\t{selectBody}\r\n\t\t\t\t</Select>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nChangeInstrument.propTypes = {\r\n\tchildren: PropTypes.node.isRequired,\r\n\tactionSetInstrumentId: PropTypes.func.isRequired,\r\n\tinstrumentId: PropTypes.number.isRequired\r\n\r\n};\r\n\r\nexport default ChangeInstrument;","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"../button/Button\";\r\n\r\n\r\nconst HotKeyComponent = ({ hotKeys, actionKeyboardSetNewHotKeyFlag, title, hotKeyType, index }) => {\r\n\r\n\tconst typeInState = hotKeys.newHotKey.newHotKeyType;\r\n\tconst hotKeyInState = hotKeyType === \"listOfIntervalsHotKeys\" ? hotKeys[hotKeyType][index] : hotKeys[hotKeyType];\r\n\r\n\tconst needToChange = hotKeys.newHotKey.change && typeInState === hotKeyType && index === hotKeys.newHotKey.index;\r\n\r\n\tconst keyText = hotKeyInState === \" \" ? \"Space\" : hotKeyInState === null ? \"Не задано\" : hotKeyInState;\r\n\r\n\tconst buttonText = needToChange ? \"Выберите желаемую клавишу\" : `Клавиша: \"${keyText}\"`;\r\n\r\n\tconst cls = needToChange ? \"info\" : \"info-outline\";\r\n\r\n\tconst onClick = () => {\r\n\t\tactionKeyboardSetNewHotKeyFlag(\r\n\t\t\t{\r\n\t\t\t\tchange: true,\r\n\t\t\t\tnewHotKeyType: hotKeyType,\r\n\t\t\t\tindex,\r\n\t\t\t\tkey: null\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h4>{title}</h4>\r\n\t\t\t<p>\r\n\t\t\t\t<Button onClick={onClick} type=\"text\" cls={cls}>\r\n\t\t\t\t\t{buttonText}\r\n\t\t\t\t</Button>\r\n\t\t\t\t{needToChange ? <span>Предыдущее значение:&nbsp;&quot;{keyText}&quot;</span> : null}\r\n\t\t\t</p>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nHotKeyComponent.propTypes = {\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired,\r\n\ttitle: PropTypes.string.isRequired,\r\n\thotKeyType: PropTypes.string.isRequired,\r\n\tindex: PropTypes.number\r\n};\r\n\r\n\r\nexport default HotKeyComponent;","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport HotKeyComponent from \"./HotKeyComponent\";\r\nimport \"./keyboardSettings.css\";\r\n\r\nconst KeyboardSettings = ({ hotKeys, actionKeyboardSetNewHotKeyFlag }) => {\r\n\r\n\tconst intervalHotKeyComponents = hotKeys.listOfIntervalsHotKeys.map((hotKey, index) => {\r\n\t\treturn <HotKeyComponent key={`${hotKey}-${Date.now()}-${index}`} title={`Горячая клавиша ${index + 1}-ого интервала списка:`} hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"listOfIntervalsHotKeys\" index={index} />;\r\n\t});\r\n\r\n\treturn <div className=\"keyboard-settings\">\r\n\t\t<h3>Настройка горячих клавиш:</h3>\r\n\t\t<HotKeyComponent title=\"Открыть/закрыть меню или всплывающее окно:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"closeHotKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Воспроизвести задание:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"playHotKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Изменить режим в задании:\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"changeModeHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Воспроизвести написанную мелодию (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"playWrittenMelodyHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Удалить записанную ноту (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"dictationClearNoteHoteKey\" index={null} />\r\n\t\t<HotKeyComponent title=\"Проверить ответ (диктант):\" hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} hotKeyType=\"dictationCheckHoteKey\" index={null} />\r\n\t\t{intervalHotKeyComponents}\r\n\t</div>;\r\n};\r\n\r\nKeyboardSettings.propTypes = {\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport default KeyboardSettings;","import React, { Component } from \"react\";\r\n\r\nimport ChangeRangeOfNotes from \"../../containers/changeRangeOfNotesContainer\";\r\nimport \"./settings.css\";\r\nimport ClearSettings from \"../../containers/clearSettingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport PlayExampleButton from \"./playExampleButton/PlayExampleButton\";\r\nimport EchoSettings from \"../echoSettings/EchoSettings\";\r\nimport TempoSettings from \"../tempoSettings/TempoSettings\";\r\nimport ChangeInstrument from \"../changeInstrument/ChangeInstrument\";\r\nimport KeyboardSettings from \"../keyboardSettings/KeyboardSettings\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\n\r\nexport default class Settings extends Component {\r\n\tcomponentDidMount() {\r\n\r\n\t\tconst { actionUpdatePianoKeys, actionSetMode } = this.props;\r\n\t\tactionUpdatePianoKeys();\r\n\t\tactionSetMode({ mode: \"Настройки\", stat: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { actionSetEchoLevel, echoLevel, bpm, actionSetBpmLevel, actionSetInstrumentId, instrumentId, hotKeys, actionKeyboardSetNewHotKeyFlag } = this.props;\r\n\r\n\t\tconst playExampleComponent = (\r\n\t\t\t<PlayExampleButton play={this.props.play} duration={this.props.duration} />\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<div className=\"settings\">\r\n\t\t\t\t\t<ChangeRangeOfNotes />\r\n\t\t\t\t\t<EchoSettings actionSetEchoLevel={actionSetEchoLevel}\r\n\t\t\t\t\t\techoLevel={echoLevel}>\r\n\t\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t\t</EchoSettings>\r\n\t\t\t\t\t<TempoSettings actionSetBpmLevel={actionSetBpmLevel}\r\n\t\t\t\t\t\tbpm={bpm}>\r\n\t\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t\t</TempoSettings>\r\n\t\t\t\t\t<ChangeInstrument actionSetInstrumentId={actionSetInstrumentId} instrumentId={instrumentId}>\r\n\t\t\t\t\t\t{playExampleComponent}\r\n\t\t\t\t\t</ChangeInstrument>\r\n\t\t\t\t\t<KeyboardSettings hotKeys={hotKeys} actionKeyboardSetNewHotKeyFlag={actionKeyboardSetNewHotKeyFlag} />\r\n\t\t\t\t\t<ClearSettings withTitle={true} />\r\n\t\t\t\t</div>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSettings.propTypes = {\r\n\tactionUpdatePianoKeys: PropTypes.func.isRequired,\r\n\tactionSetMode: PropTypes.func.isRequired,\r\n\tplay: PropTypes.func.isRequired,\r\n\tactionSetEchoLevel: PropTypes.func.isRequired,\r\n\tactionSetBpmLevel: PropTypes.func.isRequired,\r\n\tactionSetInstrumentId: PropTypes.func.isRequired,\r\n\tduration: PropTypes.number.isRequired,\r\n\techoLevel: PropTypes.number.isRequired,\r\n\tbpm: PropTypes.number.isRequired,\r\n\tinstrumentId: PropTypes.number.isRequired,\r\n\thotKeys: PropTypes.object.isRequired,\r\n\tactionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n","import Settings from \"../components/settings/Settings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode,\r\n\tactionSetEchoLevel,\r\n\tactionSetBpmLevel,\r\n\tactionSetInstrumentId,\r\n\tactionKeyboardSetNewHotKeyFlag\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n\tduration: application.duration,\r\n\techoLevel: application.echoLevel,\r\n\tbpm: application.bpm,\r\n\thotKeys: application.hotKeys,\r\n\tinstrumentId: application.instrumentId\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys,\r\n\tactionSetEchoLevel,\r\n\tactionSetBpmLevel,\r\n\tactionSetInstrumentId,\r\n\tactionKeyboardSetNewHotKeyFlag\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport MIDISounds from \"midi-sounds-react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport Menu from \"./containers/menuContainer\";\r\nimport Header from \"./containers/headerContainer\";\r\nimport Piano from \"./containers/pianoContainer\";\r\n\r\nimport Intervals from \"./components/intervals/Intervals\";\r\nimport ActivateMidiContainer from \"./containers/activateMidiContainer\";\r\nimport FindNote from \"./containers/findNoteContainer\";\r\nimport Dictation from \"./containers/dictationContainter\";\r\nimport FreeMode from \"./containers/freeModeContainer\";\r\nimport Settings from \"./containers/settingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.midiSounds.setEchoLevel(this.props.echoLevel);\r\n\r\n    document.getElementById(\"root\").addEventListener(\"click\", () => {\r\n      if (this.props.menuIsOpen) {\r\n        this.props.actionMenuAction(false);\r\n      }\r\n    });\r\n\r\n    document.body.onkeydown = this.keyboardEventListener;\r\n\r\n    if (this.props.menuIsOpen) {\r\n      this.props.actionMenuAction();\r\n    }\r\n\r\n    if (this.props.hotKeys.newHotKey.change) {\r\n      this.props.actionKeyboardSetNewHotKeyFlag({\r\n        change: false,\r\n        newHotKeyType: \"\",\r\n        index: null,\r\n        key: null\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  keyboardEventListener = (e) => {\r\n    const { hotKeys } = this.props;\r\n\r\n    if (!hotKeys.newHotKey.change) {\r\n      const indexKeyboardInterval = hotKeys.listOfIntervalsHotKeys.indexOf(e.key);\r\n\r\n      if (e.key === hotKeys.closeHotKey) {\r\n        if (this.props.modalWindowFlag) {\r\n          this.props.actionSetModalWindowFlag(false);\r\n        } else {\r\n          this.props.actionMenuAction();\r\n        }\r\n        e.preventDefault();\r\n      }\r\n      if (e.key === hotKeys.playHotKey && !this.props.playFlag) {\r\n        this.props.actionKeyboardSetPlayFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.playWrittenMelodyHoteKey && !this.props.playWrittenMelodyFlag) {\r\n        this.props.actionKeyboardSetPlayWrittenMelodyFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.changeModeHoteKey && !this.props.changeModeFlag) {\r\n        this.props.actionKeyboardSetChangeModeFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.dictationClearNoteHoteKey && !this.props.dictationClearNoteFlag) {\r\n        this.props.actionKeyboardSetDictationClearNoteFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (e.key === hotKeys.dictationCheckHoteKey && !this.props.dictationCheckFlag) {\r\n        this.props.actionKeyboardSetDictationCheckFlag(true);\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (indexKeyboardInterval !== -1 && !this.props.intervalsKeyboardFlag.intervalButtonFlag) {\r\n\r\n        this.props.actionKeyboardSetIntervalButtonFlag(true, indexKeyboardInterval);\r\n        e.preventDefault();\r\n      }\r\n    } else {\r\n      this.props.actionKeyboardSetNewHotKeyFlag(\r\n        {\r\n          change: false,\r\n          newHotKeyType: this.props.hotKeys.newHotKey.newHotKeyType,\r\n          index: this.props.hotKeys.newHotKey.index,\r\n          key: e.key\r\n        },\r\n      );\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.echoLevel !== this.props.echoLevel) {\r\n      this.midiSounds.setEchoLevel(this.props.echoLevel);\r\n    }\r\n\r\n    if (prevProps.instrumentId !== this.props.instrumentId) {\r\n      this.midiSounds.playChordNow(this.props.instrumentId, [60], 0);\r\n    }\r\n  }\r\n\r\n  play = (key, onlyPlay) => {\r\n    const { duration, instrumentId } = this.props;\r\n    this.midiSounds.playChordNow((instrumentId ? instrumentId : 1), [key], duration);\r\n\r\n\r\n    if (!onlyPlay) {\r\n      if (this.props.needToWriteNote) {\r\n        const note = this.props.sliceArr.find(elem => elem.key === key);\r\n\r\n        if (this.props.modeDictation) {\r\n          this.props.actionWritePlayNote(note, true);\r\n        } else {\r\n          this.props.actionWritePlayNote(note, false);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { instrumentId } = this.props;\r\n    return (\r\n      <ErrorBoundary>\r\n        <div className=\"app\">\r\n          <Menu />\r\n          <Header />\r\n          <Piano play={this.play} />\r\n\r\n          <Switch>\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              render={() => <FreeMode />}\r\n            />\r\n            <Route\r\n              path=\"/intervals\"\r\n              render={() => <Intervals play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/find-note\"\r\n              render={() => <FindNote play={this.play} />}\r\n            />\r\n            <Route\r\n              path=\"/dictation\"\r\n              render={() => <Dictation play={this.play} />}\r\n            />\r\n            <Route path=\"/options\" render={() => <Settings play={this.play} />} />\r\n          </Switch>\r\n\r\n          <ActivateMidiContainer play={this.play} />\r\n          <div className=\"midiComponent\" style={{ display: \"none\" }}>\r\n            <MIDISounds\r\n              ref={ref => (this.midiSounds = ref)}\r\n              appElementName=\"root\"\r\n              instruments={[instrumentId ? instrumentId : 1]}\r\n            />\r\n          </div>\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  instrumentId: PropTypes.number.isRequired,\r\n  echoLevel: PropTypes.number.isRequired,\r\n  duration: PropTypes.number.isRequired,\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  modeDictation: PropTypes.bool.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  mapIndex: PropTypes.object.isRequired,\r\n  actionMenuAction: PropTypes.func.isRequired,\r\n  actionWritePlayNote: PropTypes.func.isRequired,\r\n  actionKeyboardSetPlayFlag: PropTypes.func.isRequired,\r\n  modalWindowFlag: PropTypes.bool,\r\n  actionSetModalWindowFlag: PropTypes.func.isRequired,\r\n  playFlag: PropTypes.bool.isRequired,\r\n  playWrittenMelodyFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetPlayWrittenMelodyFlag: PropTypes.func.isRequired,\r\n  changeModeFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetChangeModeFlag: PropTypes.func.isRequired,\r\n  dictationClearNoteFlag: PropTypes.bool.isRequired,\r\n  actionKeyboardSetDictationClearNoteFlag: PropTypes.func.isRequired,\r\n  actionKeyboardSetDictationCheckFlag: PropTypes.func.isRequired,\r\n  dictationCheckFlag: PropTypes.bool.isRequired,\r\n  intervalsKeyboardFlag: PropTypes.shape({\r\n    intervalButtonFlag: PropTypes.bool.isRequired,\r\n    interval: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  actionKeyboardSetIntervalButtonFlag: PropTypes.func.isRequired,\r\n  hotKeys: PropTypes.object.isRequired,\r\n  actionKeyboardSetNewHotKeyFlag: PropTypes.func.isRequired\r\n};\r\n\r\nexport default App;\r\n","import App from \"../App\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionMenuAction,\r\n  actionWritePlayNote,\r\n  actionKeyboardSetPlayFlag,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionKeyboardSetNewHotKeyFlag\r\n\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application, piano }) => ({\r\n  menuIsOpen: application.menuIsOpen,\r\n  note: application.note,\r\n  needToWriteNote: application.needToWriteNote,\r\n  modeDictation: application.modeDictation,\r\n  echoLevel: application.echoLevel,\r\n  duration: application.duration,\r\n  modalWindowFlag: application.modalWindowFlag,\r\n  playFlag: application.playFlag,\r\n  playWrittenMelodyFlag: application.modalWindowFlag,\r\n  changeModeFlag: application.changeModeFlag,\r\n  instrumentId: application.instrumentId,\r\n  dictationClearNoteFlag: application.dictationClearNoteFlag,\r\n  dictationCheckFlag: application.dictationCheckFlag,\r\n  intervalsKeyboardFlag: application.intervalsKeyboardFlag,\r\n  hotKeys: application.hotKeys,\r\n  sliceArr: piano.sliceArr,\r\n  mapIndex: piano.mapIndex\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction,\r\n  actionWritePlayNote,\r\n  actionKeyboardSetPlayFlag,\r\n  actionSetModalWindowFlag,\r\n  actionKeyboardSetPlayWrittenMelodyFlag,\r\n  actionKeyboardSetChangeModeFlag,\r\n  actionKeyboardSetDictationClearNoteFlag,\r\n  actionKeyboardSetDictationCheckFlag,\r\n  actionKeyboardSetIntervalButtonFlag,\r\n  actionKeyboardSetNewHotKeyFlag\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE,\r\n  SET_INITIAL_STATE,\r\n  SET_ECHO_LEVEL,\r\n  SET_BPM_LEVEL,\r\n  SET_INSTRUMENTID,\r\n  KEYBOARD_SET_PLAY_FLAG,\r\n  SET_MODAL_WINDOW_FLAG,\r\n  DATA_CLEARING_FLAG,\r\n  KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG,\r\n  KEYBOARD_SET_CHANGE_MODE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG,\r\n  KEYBOARD_SET_DICTATION_CHECK_FLAG,\r\n  KEYBOARD_SET_INTERVAL_BUTTON_FLAG,\r\n  KEYBOARD_SET_NEW_HOT_KEY_FLAG\r\n} from \"../actionTypes\";\r\n\r\nlet bpm = 80;\r\nlet duration = 60 / bpm;\r\n\r\nconst initialState = {\r\n  menuIsOpen: false,\r\n  playNote: null,\r\n  needToWriteNote: false,\r\n  modeDictation: false,\r\n  mode: \"\",\r\n  stat: true,\r\n  echoLevel: 0.3,\r\n  bpm,\r\n  duration,\r\n  instrumentId: 1,\r\n  dataIsClearing: false,\r\n  playFlag: false,\r\n  playWrittenMelodyFlag: false,\r\n  modalWindowFlag: false,\r\n  changeModeFlag: false,\r\n  dictationClearNoteFlag: false,\r\n  dictationCheckFlag: false,\r\n  intervalsKeyboardFlag: {\r\n    intervalButtonFlag: false,\r\n    interval: 0\r\n  },\r\n  hotKeys: {\r\n    newHotKey: {\r\n      change: false,\r\n      newHotKeyType: \"\",\r\n      index: null,\r\n      key: null\r\n    },\r\n    closeHotKey: \"Escape\",\r\n    playHotKey: \"Enter\",\r\n    playWrittenMelodyHoteKey: \"+\",\r\n    changeModeHoteKey: \" \",\r\n    dictationClearNoteHoteKey: \"Backspace\",\r\n    dictationCheckHoteKey: \"-\",\r\n    listOfIntervalsHotKeys: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"/\", \"*\"]\r\n  }\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MENU_ACTION: {\r\n      let { menuIsOpen } = state;\r\n      let { isOpen } = action.payload;\r\n\r\n      if (typeof isOpen === \"boolean\") {\r\n        menuIsOpen = isOpen;\r\n      } else {\r\n        menuIsOpen = !menuIsOpen;\r\n      }\r\n\r\n      return { ...state, menuIsOpen };\r\n    }\r\n\r\n    case NEED_TO_WRITE_NOTE: {\r\n      return {\r\n        ...state,\r\n        needToWriteNote: action.payload || false,\r\n        playNote: null\r\n      };\r\n    }\r\n\r\n    case WRITE_PLAY_NOTE: {\r\n      return {\r\n        ...state,\r\n        playNote: { ...action.payload },\r\n        needToWriteNote: action.needToWriteNote\r\n      };\r\n    }\r\n\r\n    case INIT_DICTATION: {\r\n      return { ...state, modeDictation: action.payload };\r\n    }\r\n\r\n    case SET_MODE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    case SET_ECHO_LEVEL: {\r\n      return { ...state, echoLevel: action.payload };\r\n    }\r\n\r\n    case SET_BPM_LEVEL: {\r\n      const bpm = action.payload;\r\n      const duration = 60 / bpm;\r\n      return { ...state, bpm, duration };\r\n    }\r\n\r\n    case SET_INSTRUMENTID: {\r\n      return { ...state, instrumentId: action.payload };\r\n    }\r\n\r\n    case SET_MODAL_WINDOW_FLAG: {\r\n      return { ...state, modalWindowFlag: action.payload };\r\n    }\r\n\r\n    case DATA_CLEARING_FLAG: {\r\n      return { ...state, dataIsClearing: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_PLAY_FLAG: {\r\n      return { ...state, playFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_PLAY_WRITTEN_MELODY_FLAG: {\r\n      return { ...state, playWrittenMelodyFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_CHANGE_MODE_FLAG: {\r\n      return { ...state, changeModeFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_DICTATION_CLEAR_NOTE_FLAG: {\r\n      return { ...state, dictationClearNoteFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_DICTATION_CHECK_FLAG: {\r\n      return { ...state, dictationCheckFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_INTERVAL_BUTTON_FLAG: {\r\n      return { ...state, intervalsKeyboardFlag: action.payload };\r\n    }\r\n\r\n    case KEYBOARD_SET_NEW_HOT_KEY_FLAG: {\r\n\r\n      let newHotKey = action.payload;\r\n      let hotKeys = { ...state.hotKeys };\r\n      const listOfIntervalsHotKeys = [...hotKeys.listOfIntervalsHotKeys];\r\n\r\n      if (!newHotKey.key && !newHotKey.change) {\r\n        return { ...state, hotKeys: { ...state.hotKeys, newHotKey } };\r\n      }\r\n\r\n      if (newHotKey.key && !newHotKey.change && hotKeys.newHotKey.change) {\r\n\r\n        for (const elem in hotKeys) {\r\n          if (hotKeys.hasOwnProperty(elem) && elem !== newHotKey.newHotKeyType) {\r\n            if (hotKeys[elem] === newHotKey.key) {\r\n              hotKeys[elem] = null;\r\n            }\r\n          } else {\r\n            hotKeys[elem] = newHotKey.key;\r\n          }\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < listOfIntervalsHotKeys.length; i++) {\r\n          if (newHotKey.index === null || newHotKey.index !== i) {\r\n            if (listOfIntervalsHotKeys[i] === newHotKey.key) {\r\n              listOfIntervalsHotKeys[i] = null;\r\n            }\r\n          } else {\r\n            listOfIntervalsHotKeys[i] = newHotKey.key;\r\n          }\r\n        }\r\n\r\n        hotKeys.newHotKey = newHotKey;\r\n        hotKeys.listOfIntervalsHotKeys = listOfIntervalsHotKeys;\r\n\r\n        return { ...state, hotKeys: { ...hotKeys } };\r\n      }\r\n\r\n\r\n\r\n      return { ...state, hotKeys: { ...state.hotKeys, newHotKey } };\r\n\r\n    }\r\n\r\n    case SET_INITIAL_STATE: {\r\n\r\n      const { mode, stat } = state;\r\n\r\n      return {\r\n        ...initialState,\r\n        mode,\r\n        stat\r\n      };\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  setVisualEffect\r\n} from \"../arrayOfNotes\";\r\n\r\nimport {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO,\r\n  SET_INITIAL_STATE\r\n} from \"../actionTypes\";\r\n\r\nimport { dataOfIntervals } from \"../dataOfIntervals\";\r\n\r\nconst baseArrOfNotes = getBaseArrayOfNotes();\r\nconst { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(baseArrOfNotes);\r\nconst numberOfSemitones = dataOfIntervals.map(elem => elem.numberOfSemitones);\r\nconst minAmountOfNotes = Math.max.apply(null, numberOfSemitones);\r\n\r\nconst initialState = {\r\n  baseArrOfNotes,\r\n  arrOfNotes,\r\n  mapIndex,\r\n  firstBorder: { index: 0, key: baseArrOfNotes[0].key },\r\n  secondBorder: {\r\n    index: baseArrOfNotes.length - 1,\r\n    key: baseArrOfNotes[baseArrOfNotes.length - 1].key\r\n  },\r\n  sliceArr: baseArrOfNotes,\r\n  minAmountOfNotes\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_BORDERS_OF_RANGE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    case UPDATE_PIANO_KEYS: {\r\n      const sliceArr = getBaseArrayOfNotes(\r\n        state.firstBorder.index,\r\n        state.secondBorder.index\r\n      );\r\n      const { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(sliceArr);\r\n\r\n      return { ...state, arrOfNotes, sliceArr, mapIndex };\r\n    }\r\n\r\n    case SHOW_NOTES_ON_THE_PIANO: {\r\n      let { arrOfNotes, mapIndex } = state;\r\n\r\n      const { sequence, type } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        arrOfNotes: setVisualEffect({\r\n          arrOfNotes,\r\n          sequence,\r\n          type,\r\n          active: true,\r\n          mapIndex\r\n        })\r\n      };\r\n    }\r\n\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  dataOfIntervals,\r\n  getChosenIntervals,\r\n  getNewInterval,\r\n  getNewSequenceOfNotes\r\n} from \"../dataOfIntervals\";\r\n\r\nimport {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL,\r\n  SET_INITIAL_STATE,\r\n  SET_ACTIVE_KEYBOARD_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nconst allIntervals = [...dataOfIntervals];\r\n\r\nconst getNewActiveInterval = arr => {\r\n  let chosenIntervals = getChosenIntervals(arr);\r\n\r\n  let activeInterval = getNewInterval(chosenIntervals);\r\n\r\n  return activeInterval;\r\n};\r\n\r\nconst initialState = {\r\n  allIntervals,\r\n  typeOfInterval: \"melodicUp\",\r\n  activeInterval: null,\r\n  nextActiveInterval: \"\",\r\n  sequenceOfNotes: [],\r\n  settingsIsOpen: false,\r\n  showAnswer: false,\r\n  activeKeyboardInterval: {}\r\n};\r\n\r\nconst findIndex = (arr, name) => {\r\n  const index = arr.findIndex(obj => obj.name === name);\r\n  return index;\r\n};\r\n\r\nconst getLengthOfChosenIntervals = arr => {\r\n  return arr.reduce((sum, elem) => {\r\n    return elem.chosen ? sum + 1 : sum;\r\n  }, 0);\r\n};\r\n\r\nconst getNewData = ({\r\n  initNewIntervalSequence,\r\n  nextActiveInterval,\r\n  nextSequenceOfNotes,\r\n  sliceArr,\r\n  allIntervals\r\n}) => {\r\n\r\n  const activeInterval = !initNewIntervalSequence\r\n    ? nextActiveInterval\r\n      ? nextActiveInterval\r\n      : getNewActiveInterval(allIntervals)\r\n    : getNewActiveInterval(allIntervals);\r\n\r\n\r\n  const sequenceOfNotes = !initNewIntervalSequence\r\n    ? nextSequenceOfNotes\r\n      ? nextSequenceOfNotes\r\n      : getNewSequenceOfNotes(sliceArr, activeInterval)\r\n    : getNewSequenceOfNotes(sliceArr, activeInterval);\r\n\r\n  nextActiveInterval = getNewActiveInterval(allIntervals);\r\n  nextSequenceOfNotes = getNewSequenceOfNotes(sliceArr, nextActiveInterval);\r\n\r\n  return {\r\n    sequenceOfNotes,\r\n    nextActiveInterval,\r\n    nextSequenceOfNotes,\r\n    activeInterval\r\n  };\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_TYPE_OF_INTERVAL: {\r\n      return { ...state, typeOfInterval: action.payload };\r\n    }\r\n\r\n    case INTERVALS_SETTINGS_ACTION: {\r\n      const settingsIsOpen = action.payload;\r\n      return { ...state, settingsIsOpen };\r\n    }\r\n\r\n    case INVERSE_CHOSEN_INTERVAL: {\r\n      const interval = { ...action.payload };\r\n      const chosen = interval.chosen;\r\n\r\n      const allIntervals = [...state.allIntervals];\r\n\r\n      if (chosen && getLengthOfChosenIntervals(allIntervals) <= 2) {\r\n        return { ...state };\r\n      }\r\n\r\n      const index = findIndex(allIntervals, interval.name);\r\n      interval.chosen = !interval.chosen;\r\n\r\n      allIntervals[index] = interval;\r\n\r\n      return { ...state, allIntervals };\r\n    }\r\n\r\n    case SHOW_THE_CORRECT_INTERVAL: {\r\n      return { ...state, showAnswer: true };\r\n    }\r\n\r\n    case GET_NEXT_INTERVAL: {\r\n      const { sliceArr, initNewIntervalSequence } = action.payload;\r\n      const { allIntervals } = state;\r\n\r\n      let {\r\n        sequenceOfNotes,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes,\r\n        activeInterval\r\n      } = getNewData({\r\n        sliceArr,\r\n        initNewIntervalSequence,\r\n        allIntervals,\r\n        nextActiveInterval: state.nextActiveInterval,\r\n        nextSequenceOfNotes: state.nextSequenceOfNotes\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        activeInterval,\r\n        sequenceOfNotes,\r\n        showAnswer: false,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes\r\n      };\r\n    }\r\n\r\n\r\n    case SET_ACTIVE_KEYBOARD_INTERVAL: {\r\n      return { ...state, activeKeyboardInterval: action.payload };\r\n    }\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  nameOfInterval: \"\",\r\n  rightAnswers: 0,\r\n  amountOfAnswers: 0,\r\n  right: false,\r\n  showAnswer: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case STATISTICS_CLEARING: {\r\n      return { ...state, ...initialState };\r\n    }\r\n\r\n    case INCREMENT_RIGHT_ANSWERS: {\r\n      const rightAnswers = state.rightAnswers + 1;\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        rightAnswers,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: true,\r\n        showAnswer: true\r\n      };\r\n    }\r\n    case INCREMENT_AMOUNT_OF_ANSWERS: {\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: false,\r\n        showAnswer: true\r\n      };\r\n    }\r\n\r\n    case NEXT_BUTTON_CLICK: {\r\n      return { ...state, nameOfInterval: \"\", right: false };\r\n    }\r\n\r\n    case STATISTICS_HIDE_ANSWER: {\r\n      return { ...state, showAnswer: false };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nconst initialState = { note: null };\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_NOTE: {\r\n      const sliceArr = action.sliceArr;\r\n      const note = sliceArr[Math.floor(Math.random() * sliceArr.length)].key;\r\n\r\n      return { ...state, note };\r\n    }\r\n\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS,\r\n  SET_INITIAL_STATE\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  amountOfNotes: 4,\r\n  sequenceOfMelody: [],\r\n  sequenceOfWrittenMelody: [],\r\n  readyToCheck: false,\r\n  defaultModeWrite: false,\r\n  answers: [],\r\n  answerGiven: false\r\n};\r\n\r\nconst getNewMelody = ({ sliceArr, amountOfNotes }) => {\r\n  const sequence = [];\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const note = { ...sliceArr[Math.floor(Math.random() * sliceArr.length)] };\r\n    sequence.push(note);\r\n  }\r\n\r\n  return sequence;\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_NEW_MELODY: {\r\n      const { amountOfNotes } = state;\r\n\r\n      const sliceArr = [...action.sliceArr];\r\n\r\n      const sequenceOfMelody = getNewMelody({ sliceArr, amountOfNotes });\r\n\r\n      return { ...state, sequenceOfMelody };\r\n    }\r\n    case CHANGE_MODE: {\r\n      const modeWrite = action.payload;\r\n      return { ...state, modeWrite, readyToCheck: false };\r\n    }\r\n\r\n    case ADD_NOTE_TO_ANSWER_ARRAY: {\r\n      const { sequenceOfWrittenMelody } = state;\r\n      sequenceOfWrittenMelody.push(action.payload);\r\n\r\n      let readyToCheck = false;\r\n\r\n      if (state.amountOfNotes === sequenceOfWrittenMelody.length) {\r\n        readyToCheck = true;\r\n      }\r\n\r\n      return { ...state, sequenceOfWrittenMelody, readyToCheck };\r\n    }\r\n\r\n    case POP_LAST_ELEM_FROM_ANSWER_ARRAY: {\r\n      const sequenceOfWrittenMelody = [...state.sequenceOfWrittenMelody];\r\n\r\n      if (sequenceOfWrittenMelody.length > 0) {\r\n        sequenceOfWrittenMelody.pop();\r\n      }\r\n\r\n      return { ...state, sequenceOfWrittenMelody };\r\n    }\r\n\r\n    case WRITE_ANSWERS: {\r\n      const answerGiven = action.payload.length > 0;\r\n      return { ...state, answers: action.payload, answerGiven };\r\n    }\r\n\r\n    case CLEAR_WRITTEN_MELODY: {\r\n      return { ...state, sequenceOfWrittenMelody: [] };\r\n    }\r\n\r\n    case CHANGE_SETTINGS: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n\r\n    case SET_INITIAL_STATE: {\r\n      return initialState;\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport application from \"./applicationReducer\";\r\nimport piano from \"./pianoReducer\";\r\nimport intervals from \"./intervalsReducer\";\r\nimport statistics from \"./statisticsReducer\";\r\nimport notes from \"./notesReducer\";\r\nimport dictation from \"./dictationReducer\";\r\n\r\nexport default combineReducers({\r\n  application,\r\n  piano,\r\n  intervals,\r\n  statistics,\r\n  notes,\r\n  dictation\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistedState = localStorage.getItem(\"reduxState\")\r\n  ? JSON.parse(localStorage.getItem(\"reduxState\"))\r\n  : {};\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nstore.subscribe(() => {\r\n  const state = store.getState();\r\n\r\n  const sliceState = {};\r\n\r\n  sliceState.piano = state.piano;\r\n  sliceState.dictation = state.dictation;\r\n  sliceState.application = state.application;\r\n  // sliceState.intervals = state.intervals;\r\n\r\n\r\n  const { allIntervals, typeOfInterval } = state.intervals;\r\n  sliceState.intervals = { allIntervals, typeOfInterval };\r\n\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(sliceState));\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./containers/appContainer\";\r\n\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<HashRouter>\r\n\t\t\t<App />\r\n\t\t</HashRouter>\r\n\t</Provider >,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}