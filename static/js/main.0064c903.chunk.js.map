{"version":3,"sources":["components/burger/Burger.jsx","components/menu/MenuBody.jsx","components/menu/Menu.jsx","store/actions/applicationActions.js","store/actionTypes.js","containers/menuContainer.js","components/header/stat/statInfo/StatInfo.jsx","components/header/stat/statInfo/StatIntervalName.jsx","components/header/stat/Stat.jsx","containers/statContainer.js","components/header/Header.jsx","containers/headerContainer.js","components/piano/PianoKey.jsx","components/piano/PianoSection.jsx","components/piano/PianoBody.jsx","components/piano/Piano.jsx","containers/pianoContainer.js","components/buttonsGroup/ButtonsGroup.jsx","components/button/Button.jsx","components/intervals/LeftSideButtons.jsx","components/intervals/RightSideButtons.jsx","components/intervals/IntervalsOptionButtons.jsx","store/actions/statisticsActions.js","store/actions/pianoActions.js","containers/IntervalsOptionButtonsContainer.js","store/actions/intervalsActions.js","components/intervals/GroupOfIntervals.jsx","store/dataOfIntervals.js","components/intervals/ListOfIntervals.jsx","containers/listOfIntervalsContainer.js","components/intervals/Intervals.jsx","components/activateMidi/ActivateMidi.jsx","containers/activateMidiContainer.js","components/findNote/FindNote.jsx","containers/findNoteContainer.js","store/actions/notesActions.js","components/dictation/DictationPlayButtons.jsx","components/dictation/DictationOptionsButtons.jsx","components/dictation/DictationOutputElement.jsx","components/dictation/DuctationOutput.jsx","components/modalWindow/ModalWindow.jsx","components/select/Select.jsx","components/dictation/selectComponents.jsx","components/dictation/DictationSettings.jsx","containers/dictationSettingsContainer.js","store/actions/dictationActions.js","components/dictation/Dictation.jsx","containers/dictationContainter.js","components/freeMode/FreeMode.jsx","containers/freeModeContainer.js","components/changeRangeOfNotes/OptionFromSelectRanges.jsx","components/changeRangeOfNotes/SelectBody.jsx","store/arrayOfNotes.js","components/changeRangeOfNotes/SelectOfRange.jsx","components/changeRangeOfNotes/ChangeRangeOfNotes.jsx","containers/changeRangeOfNotesContainer.js","components/clearSettings/ClearSettingsModalBody.jsx","components/clearSettings/ClearSettings.jsx","components/settings/Settings.jsx","containers/settingsContainer.js","App.js","containers/appContainer.js","store/reducers/applicationReducer.js","store/reducers/pianoReducer.js","store/reducers/intervalsReducer.js","store/reducers/statisticsReducer.js","store/reducers/notesReducer.js","store/reducers/dictationReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["Burger","_ref","clickHandler","menuIsOpen","left","className","concat","react_default","a","createElement","style","onClick","MenuBody","react_router_dom","to","Menu","actionMenuAction","leftBurger","play","leftMenuBody","menuHandler","ReactDOM","createPortal","menu_MenuBody","burger_Burger","document","getElementById","isOpen","type","payload","actionNeedToWriteNote","bool","actionWritePlayNote","note","needToWriteNote","Object","objectSpread","id","Date","now","actionSetMode","mode","stat","mapDispatchToProps","connect","application","StatInfo","rightAnswers","amountOfAnswers","percent","Math","floor","round","Fragment","StatIntervalName","name","Stat","_ref$stat","nameOfInterval","right","showAnswer","statBody","statInfo_StatIntervalName","statInfo_StatInfo","classesNames","push","join","statistics","Statistics","Header","statContainer","PianoKey","elem","sharp","key","fullName","defaultProps","PianoSection","map","colorKey","includes","active","wrong","piano_PianoKey","PianoBody","arrOfNotes","elemJSX","piano_PianoSection","Piano","_this$props","this","props","piano_PianoBody","React","Component","piano","ButtonsGroup","children","classNames","cls","Button","disabled","LeftSideButtons","sequenceOfNotes","nextSequenceOfNotes","typeOfInterval","settingsIsOpen","sliceArr","actionIntervalsSettingsAction","actionNextButtonClick","actionGetNextInterval","actionHideAnswer","actionUpdatePianoKeys","playInterval","first","second","setTimeout","buttonsGroup_ButtonsGroup","button_Button","initNewIntervalSequence","RightSideButtons","actionSetActiveTypeOfInterval","primary","melodicUp","melodicDown","harmonic","IntervalsOptionButtons","actionStatisticsClearing","intervals_LeftSideButtons","intervals_RightSideButtons","actionIncrementRightAnswers","actionIncrementAmountOfAnswers","actionShowNotesOnThePiano","options","intervals","GroupOfIntervals","group","activeInterval","actionShowTheCorrectInterval","actionInverseChosenInterval","funcOnClick","interval","rusName","sequence","body","chosen","String","fromCharCode","dataOfIntervals","numberOfSemitones","getChosenIntervals","arr","toConsumableArray","filter","createGroupsOfIntervals","i","j","tmp","length","slice","getNewSequenceOfNotes","getBordersOfSequence","num","firstNote","random","secondNote","indexOf","ListOfIntervals","allIntervals","intervals_GroupOfIntervals","visibility","obj","Intervals","IntervalsOptionButtonsContainer","listOfIntervalsContainer","ActivateMidi","state","status","onMIDIOnStateChange","event","_this","setState","port","manufacturer","requestMIDIAccessSuccess","midi","inputs","values","input","next","done","value","onmidimessage","midiOnMIDImessage","onstatechange","requestMIDIAccessFailure","velocity","data","eventKey","startListening","navigator","requestMIDIAccess","sysex","then","marginTop","FindNote","setVisualEffect","playNote","setRightVisualEffect","setWrongVisualEffect","_ref2","_ref3","options1","options2","playButtonHandler","setMode","answerButtonHandler","actionSetActiveNote","prevProps","notes","DictationPlayButtons","playGuessedMelody","playWrittenMelody","DictationOptionsButtons","modeWrite","changeMode","clearButtonHandler","checkAnswerHandler","sequenceOfWrittenMelody","amountOfNotes","answerGiven","nextButtonHandler","settingsButtonHandler","access","DictationOutputElement","index","rightAnswer","rightElem","rightElemJSX","octaveName","DuctationOutput","sequenceOfMelody","answers","dictationOutputBody","elementJSX","dictation_DictationOutputElement","ModalWindow","opacity","modal","closeHandler","close","saveHandler","saveButtonHandler","cancelHandler","cancelButtonHandler","_this2","appendChild","overflow","removeChild","saveButton","saveButtonName","cancelButton","cancelButtonName","Select","onChange","defaultValue","amountOfNotesOptions","SelectAmountOfNotes","select_Select","modesOptions","modePlay","ru","SelectModes","DictationSettings","defaultModeWrite","selectAmountOfNotesHandler","e","target","selectModesHandler","actionChangeSettings","_this$props2","ModalWindow_ModalWindow","selectComponents_SelectAmountOfNotes","selectComponents_SelectModes","settingsObj","dictation","Dictation","modalIsOpen","setNewMelody","actionGetNewMelody","clearAnswers","actionWriteAnswers","playMelody","getKeysArrayOfMeloday","_loop","actionChangeMode","actionPopLastElemFromAnswerArray","arrKeysArrayOfMeloday","arrKeysArrayOfWrittenMeloday","checkAnswers","getArrayOfEqualsOfAnswers","changeStat","arr1","arr2","actionClearWrittenMelody","prevState","actionInitDictation","actionAddNoteToAnswerArray","_this$props$dictation","dictation_DictationPlayButtons","dictation_DictationOptionsButtons","dictation_DuctationOutput","dictationSettingsContainer","FreeMode","OptionFromSelectRanges","SelectBody","baseArrOfNotes","firstBorder","secondBorder","nameOfSelect","minAmountOfNotes","changeRangeOfNotes_OptionFromSelectRanges","propType","PropTypes","number","isRequired","shape","string","arrayOf","object","SelectOfRange","actionSetBordersOfRange","valueOfSelect","field","selectChangeHandler","changeRangeOfNotes_SelectBody","ChangeRangeOfNotes","_ref$piano","changeRangeOfNotes_SelectOfRange","ClearLocalStorageModalBody","ClearLocalStorage","modalOpenerHandler","prev","ClearSettingsModalBody","Settings","changeRangeOfNotesContainer","ClearSettings_ClearLocalStorage","App","onlyPlay","duration","midiSounds","playChordNow","find","modeDictation","N","setEchoLevel","addEventListener","keyCode","_this3","menuContainer","headerContainer","pianoContainer","react_router","path","exact","render","freeModeContainer","intervals_Intervals","findNoteContainer","dictationContainter","settingsContainer","activateMidiContainer","display","midisoundsreact_default","ref","appElementName","instruments","mapIndex","initialState","BASE_NAMES","NAMES_OF_OCTAVES","0","1","2","3","4","5","6","7","8","BASE_START_NOTE","BASE_FINISH_NOTE","octaveNumber","getBaseArrayOfNotes","start","arguments","undefined","finish","getFullArrayAndMapIndexes","k","nextObj","section","addNewFields","getIndexes","indexesOfNote","window","forEach","element","_getIndexes","max","apply","getNewActiveInterval","getNewInterval","nextActiveInterval","combineReducers","action","_getFullArrayAndMapIn2","_action$payload","reduce","sum","findIndex","_getNewData","getNewData","getNewMelody","pop","persistedState","localStorage","getItem","JSON","parse","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","sliceState","_state$intervals","setItem","stringify","es","appContainer"],"mappings":"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","file":"static/js/main.0064c903.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./burger.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Burger = ({ clickHandler, menuIsOpen, left }) => {\r\n  const className = `burger${menuIsOpen ? \" active\" : \"\"}`;\r\n  return (\r\n    <div style={{ left: left }} className={className} onClick={clickHandler}>\r\n      <span />\r\n      <span />\r\n      <span />\r\n    </div>\r\n  );\r\n};\r\n\r\nBurger.propTypes = {\r\n  clickHandler: PropTypes.func.isRequired,\r\n  menuIsOpen: PropTypes.bool.isRequired,\r\n  left: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nexport default Burger;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst MenuBody = ({ left, clickHandler }) => {\r\n  return (\r\n    <div className=\"menu-body\" style={{ left: left }}>\r\n      <nav className=\"nav\">\r\n        <NavLink onClick={clickHandler} to=\"/\">\r\n          Свободная игра\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/find-note\">\r\n          Искать ноту\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/intervals\">\r\n          Поиск Интервала\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/dictation\">\r\n          Музыкальный диктант\r\n        </NavLink>\r\n        <NavLink onClick={clickHandler} to=\"/options\">\r\n          Настройки\r\n        </NavLink>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuBody;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./menu.css\";\r\n\r\nimport Burger from \"../burger/Burger\";\r\nimport MenuBody from \"./MenuBody\";\r\n\r\nconst Menu = ({ menuIsOpen, actionMenuAction, play }) => {\r\n  const leftBurger = menuIsOpen ? \"260px\" : \"10px\";\r\n  const leftMenuBody = menuIsOpen ? \"0px\" : \"-1000px\";\r\n\r\n  const menuHandler = () => {\r\n    actionMenuAction();\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"menu\">\r\n      <MenuBody left={leftMenuBody} clickHandler={menuHandler} />\r\n      <Burger\r\n        left={leftBurger}\r\n        clickHandler={menuHandler}\r\n        menuIsOpen={menuIsOpen}\r\n      />\r\n    </div>,\r\n    document.getElementById(\"menu\")\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE\r\n} from \"../actionTypes\";\r\n\r\nexport const actionMenuAction = isOpen => ({\r\n  type: MENU_ACTION,\r\n  payload: { isOpen }\r\n});\r\n\r\nexport const actionNeedToWriteNote = bool => ({\r\n  type: NEED_TO_WRITE_NOTE,\r\n  payload: bool\r\n});\r\n\r\nexport const actionWritePlayNote = (note, needToWriteNote) => ({\r\n  type: WRITE_PLAY_NOTE,\r\n  needToWriteNote,\r\n  payload: { ...note, id: Date.now() }\r\n});\r\n\r\nexport const actionInitDictation = bool => ({\r\n  type: INIT_DICTATION,\r\n  payload: bool\r\n});\r\n\r\nexport const actionSetMode = ({ mode, stat }) => ({\r\n  type: SET_MODE,\r\n  payload: { mode, stat }\r\n});\r\n\r\n","export const MENU_ACTION = \"MENU_ACTION\";\r\nexport const NEED_TO_WRITE_NOTE = \"NEED_TO_WRITE_NOTE\";\r\nexport const WRITE_PLAY_NOTE = \"WRITE_PLAY_NOTE\";\r\nexport const INIT_DICTATION = \"INIT_DICTATION\";\r\nexport const SET_MODE = \"SET_MODE\";\r\n\r\nexport const UPDATE_PIANO_KEYS = \"UPDATE_PIANO_KEYS\";\r\nexport const SET_BORDERS_OF_RANGE = \"SET_BORDERS_OF_RANGE\";\r\nexport const SHOW_NOTES_ON_THE_PIANO = \"SHOW_NOTES_ON_THE_PIANO\";\r\n\r\nexport const SET_ACTIVE_NOTE = \"SET_ACTIVE_NOTE\";\r\n\r\nexport const SET_ACTIVE_TYPE_OF_INTERVAL = \"SET_ACTIVE_TYPE_OF_INTERVAL\";\r\nexport const SET_NEW_INTERVAL = \"SET_NEW_INTERVAL\";\r\nexport const INTERVALS_SETTINGS_ACTION = \"INTERVALS_SETTINGS_ACTION\";\r\nexport const INVERSE_CHOSEN_INTERVAL = \"INVERSE_CHOSEN_INTERVAL\";\r\nexport const GET_ANSWER_INTERVAL = \"GET_ANSWER_INTERVAL\";\r\nexport const GET_NEXT_INTERVAL = \"GET_NEXT_INTERVAL\";\r\n\r\nexport const SHOW_THE_CORRECT_INTERVAL = \"SHOW_THE_CORRECT_INTERVAL\";\r\nexport const INCREMENT_RIGHT_ANSWERS = \"INCREMENT_RIGHT_ANSWERS\";\r\nexport const INCREMENT_AMOUNT_OF_ANSWERS = \"INCREMENT_AMOUNT_OF_ANSWERS\";\r\nexport const NEXT_BUTTON_CLICK = \"NEXT_BUTTON_CLICK\";\r\nexport const STATISTICS_CLEARING = \"STATISTICS_CLEARING\";\r\nexport const STATISTICS_HIDE_ANSWER = \"STATISTICS_HIDE_ANSWER\";\r\n\r\nexport const GET_NEW_MELODY = \"GET_NEW_MELODY\";\r\nexport const CHANGE_MODE = \"CHANGE_MODE\";\r\nexport const ADD_NOTE_TO_ANSWER_ARRAY = \"ADD_NOTE_TO_ANSWER_ARRAY\";\r\nexport const POP_LAST_ELEM_FROM_ANSWER_ARRAY =\r\n  \"POP_LAST_ELEM_FROM_ANSWER_ARRAY\";\r\nexport const WRITE_ANSWERS = \"WRITE_ANSWERS\";\r\nexport const CLEAR_WRITTEN_MELODY = \"CLEAR_WRITTEN_MELODY\";\r\nexport const CHANGE_SETTINGS = \"CHANGE_SETTINGS\";\r\n","import Menu from \"../components/menu/Menu\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionMenuAction } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n  menuIsOpen: application.menuIsOpen\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Menu);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatInfo = ({ rightAnswers, amountOfAnswers }) => {\r\n  const percent =\r\n    amountOfAnswers !== 0\r\n      ? Math.floor(Math.round((rightAnswers / amountOfAnswers) * 100))\r\n      : \"0\";\r\n  return (\r\n    <React.Fragment>\r\n      <span>{rightAnswers}</span>&nbsp;/&nbsp;\r\n      <span>{amountOfAnswers}</span>&nbsp;\r\n      <span>({percent}%)</span>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nStatInfo.propTypes = {\r\n  rightAnswers: PropTypes.number.isRequired,\r\n  amountOfAnswers: PropTypes.number.isRequired\r\n};\r\n\r\nexport default StatInfo;\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst StatIntervalName = ({ name }) => {\r\n  return <span>{name}</span>;\r\n};\r\n\r\nStatIntervalName.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default StatIntervalName;\r\n","import React from \"react\";\r\nimport StatInfo from \"./statInfo/StatInfo\";\r\nimport StatIntervalName from \"./statInfo/StatIntervalName\";\r\nimport \"./stat.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Stat = ({\r\n  stat: { nameOfInterval, right, rightAnswers, amountOfAnswers, showAnswer }\r\n}) => {\r\n  const statBody = nameOfInterval ? (\r\n    <StatIntervalName name={nameOfInterval} />\r\n  ) : (\r\n      <StatInfo rightAnswers={rightAnswers} amountOfAnswers={amountOfAnswers} />\r\n    );\r\n\r\n  let classesNames = [\"stat\"];\r\n\r\n  if (showAnswer) {\r\n    if (right) {\r\n      classesNames.push(\"rightAnswer\");\r\n    } else {\r\n      classesNames.push(\"wrongAnswer\");\r\n    }\r\n  }\r\n\r\n  return <div className={classesNames.join(\" \")}>{statBody}</div>;\r\n};\r\n\r\nStat.propTypes = {\r\n  stat: PropTypes.shape({\r\n    nameOfInterval: PropTypes.string,\r\n    right: PropTypes.bool.isRequired,\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired\r\n};\r\n\r\nexport default Stat;\r\n","import Statistics from \"../components/header/stat/Stat\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ statistics }) => ({\r\n  stat: statistics\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);\r\n","import React from \"react\";\r\nimport Stat from \"../../containers/statContainer\";\r\nimport \"./header.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = ({ stat, mode }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      {stat ? <Stat /> : null}\r\n      {mode ? <h2>{mode}</h2> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  stat: PropTypes.bool.isRequired,\r\n  mode: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import Header from \"../components/header/Header\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ application }) => ({\r\n\tmode: application.mode,\r\n\tstat: application.stat\r\n});\r\n\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoKey = ({ elem, className, sharp, play }) => {\r\n  const handleClick = () => {\r\n    play(elem.key);\r\n  };\r\n  return (\r\n    <div className={className.join(\" \")} onClick={handleClick}>\r\n      {sharp ? elem.name : elem.fullName}\r\n    </div>\r\n  );\r\n};\r\n\r\nPianoKey.propTypes = {\r\n  elem: PropTypes.shape({\r\n    key: PropTypes.number,\r\n    name: PropTypes.string,\r\n    fullName: PropTypes.string\r\n  }),\r\n  className: PropTypes.arrayOf(PropTypes.string),\r\n  sharp: PropTypes.bool,\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoKey.defaultProps = {\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoKey;\r\n","import React from \"react\";\r\nimport PianoKey from \"./PianoKey\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoSection = ({ elem, play }) => {\r\n  const section = elem.map(elem => {\r\n    const sharp = elem.name.includes(\"#\");\r\n    let className = [\"piano-key\"];\r\n    const colorKey = sharp ? \"piano-black-key\" : \"piano-white-key\";\r\n    className.push(colorKey);\r\n\r\n    if (elem.active) {\r\n      className.push(\"piano-key-active\");\r\n    }\r\n    if (elem.right) {\r\n      className.push(\"piano-key-right\");\r\n    }\r\n\r\n    if (elem.wrong) {\r\n      className.push(\"piano-key-wrong\");\r\n    }\r\n\r\n    return (\r\n      <PianoKey play={play} key={elem.key} elem={elem} className={className} />\r\n    );\r\n  });\r\n\r\n  return section;\r\n};\r\n\r\nPianoSection.propTypes = {\r\n  play: PropTypes.func,\r\n  elem: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nPianoSection.defaultProps = {\r\n  play: () => {},\r\n  elem: []\r\n};\r\n\r\nexport default PianoSection;\r\n","import React from \"react\";\r\nimport PianoSection from \"./PianoSection\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PianoBody = ({ arrOfNotes, play }) => {\r\n  const bodyPiano = arrOfNotes.map(elem => {\r\n    const elemJSX = <PianoSection elem={elem} play={play} />;\r\n    return (\r\n      <div key={elem[0].fullName} className={\"piano-keys-section\"}>\r\n        {elemJSX}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return bodyPiano;\r\n};\r\n\r\nPianoBody.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func\r\n};\r\n\r\nPianoBody.defaultProps = {\r\n  arrOfNotes: [],\r\n  play: () => {}\r\n};\r\n\r\nexport default PianoBody;\r\n","import React from \"react\";\r\n\r\nimport \"./piano.css\";\r\nimport PianoBody from \"./PianoBody\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Piano extends React.Component {\r\n  render() {\r\n    const { arrOfNotes, play } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"piano\">\r\n          <PianoBody arrOfNotes={arrOfNotes} play={play} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPiano.propTypes = {\r\n  arrOfNotes: PropTypes.arrayOf(PropTypes.array),\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Piano;\r\n","import Piano from \"../components/piano/Piano\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  arrOfNotes: piano.arrOfNotes\r\n});\r\n\r\nexport default connect(mapStateToProps)(Piano);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./buttonsGroup.css\";\r\n\r\nconst ButtonsGroup = ({ children, cls }) => {\r\n  let classNames = [\"buttonGroup\", cls];\r\n  return <div className={classNames.join(\" \")}>{children}</div>;\r\n};\r\n\r\nButtonsGroup.propTypes = {\r\n  children: PropTypes.array,\r\n  cls: PropTypes.string\r\n};\r\n\r\nButtonsGroup.defaultProps = {\r\n  children: \"\",\r\n  cls: \"horizontal\"\r\n};\r\nexport default ButtonsGroup;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ onClick, children, cls, active, disabled }) => {\r\n  let classNames = [\"button\", cls];\r\n\r\n  if (active) {\r\n    classNames.push(\"active\");\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={classNames.join(\" \")}\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\r\n  onClick: PropTypes.func,\r\n  cls: PropTypes.string,\r\n  active: PropTypes.bool,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nButton.defaultProps = {\r\n  children: \"click\",\r\n  onClick: () => { },\r\n  cls: \"secondary-outline\",\r\n  active: false\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LeftSideButtons = ({\r\n  sequenceOfNotes,\r\n  nextSequenceOfNotes,\r\n  typeOfInterval,\r\n  settingsIsOpen,\r\n  showAnswer,\r\n  sliceArr,\r\n  play,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionHideAnswer,\r\n  actionUpdatePianoKeys\r\n}) => {\r\n  const playInterval = () => {\r\n    let first, second;\r\n\r\n    if (showAnswer) {\r\n      first = nextSequenceOfNotes[0];\r\n      second = nextSequenceOfNotes[1];\r\n    } else {\r\n      first = sequenceOfNotes[0];\r\n      second = sequenceOfNotes[1];\r\n    }\r\n\r\n    switch (typeOfInterval) {\r\n      case \"melodicUp\": {\r\n        play(first);\r\n        setTimeout(() => {\r\n          play(second);\r\n        }, 800);\r\n        break;\r\n      }\r\n      case \"melodicDown\": {\r\n        play(second);\r\n        setTimeout(() => {\r\n          play(first);\r\n        }, 800);\r\n        break;\r\n      }\r\n      case \"harmonic\": {\r\n        play(first);\r\n        play(second);\r\n        break;\r\n      }\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const nextClickHandler = () => {\r\n    actionNextButtonClick(!settingsIsOpen);\r\n    actionGetNextInterval({ sliceArr });\r\n    actionUpdatePianoKeys();\r\n    actionHideAnswer();\r\n    playInterval();\r\n  };\r\n\r\n  const optionsClickHandler = () => {\r\n    actionIntervalsSettingsAction(!settingsIsOpen);\r\n    const initNewIntervalSequence = true;\r\n\r\n    if (settingsIsOpen) {\r\n      actionNextButtonClick();\r\n      actionUpdatePianoKeys();\r\n      actionHideAnswer();\r\n      actionGetNextInterval({ sliceArr, initNewIntervalSequence });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={settingsIsOpen ? \"secondary\" : \"info\"}\r\n        disabled={settingsIsOpen ? true : false}\r\n        onClick={showAnswer ? nextClickHandler : playInterval}\r\n      >\r\n        {showAnswer ? \"Дальше\" : \"Играть интервал\"}\r\n      </Button>\r\n      <Button\r\n        cls={settingsIsOpen ? \"info\" : \"secondary\"}\r\n        onClick={optionsClickHandler}\r\n      >\r\n        {settingsIsOpen ? \"Установить\" : \"Настройки\"}\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nLeftSideButtons.propTypes = {\r\n  settingsIsOpen: PropTypes.bool,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired\r\n};\r\n\r\nexport default LeftSideButtons;\r\n\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RightSideButtons = ({\r\n  actionSetActiveTypeOfInterval,\r\n  typeOfInterval\r\n}) => {\r\n  const primary = \"primary active\";\r\n  const primaryOutline = \"primary-outline\";\r\n\r\n  const melodicUp = typeOfInterval === \"melodicUp\";\r\n  const melodicDown = typeOfInterval === \"melodicDown\";\r\n  const harmonic = typeOfInterval === \"harmonic\";\r\n\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button\r\n        cls={melodicUp ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(\"melodicUp\");\r\n        }}\r\n        disabled={melodicUp ? true : false}\r\n      >\r\n        Мелодический вверх\r\n      </Button>\r\n      <Button\r\n        cls={melodicDown ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(\"melodicDown\");\r\n        }}\r\n        disabled={melodicDown ? true : false}\r\n      >\r\n        Мелодический вниз\r\n      </Button>\r\n      <Button\r\n        cls={harmonic ? primary : primaryOutline}\r\n        onClick={() => {\r\n          actionSetActiveTypeOfInterval(\"harmonic\");\r\n        }}\r\n        disabled={harmonic ? true : false}\r\n      >\r\n        Гармонический\r\n      </Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nRightSideButtons.propTypes = {\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired\r\n};\r\n\r\nexport default RightSideButtons;\r\n","import React from \"react\";\r\nimport LeftSideButtons from \"./LeftSideButtons\";\r\nimport RightSideButtons from \"./RightSideButtons\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass IntervalsOptionButtons extends React.Component {\r\n  componentDidMount() {\r\n    const initNewIntervalSequence = true;\r\n\r\n    this.props.actionGetNextInterval({\r\n      sliceArr: this.props.sliceArr,\r\n      initNewIntervalSequence\r\n    });\r\n\r\n    this.props.actionSetMode({ mode: \"Поиск интервала\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionIntervalsSettingsAction(false);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sliceArr,\r\n      play,\r\n      typeOfInterval,\r\n      sequenceOfNotes,\r\n      nextSequenceOfNotes,\r\n      settingsIsOpen,\r\n      showAnswer,\r\n      actionSetActiveTypeOfInterval,\r\n      actionIntervalsSettingsAction,\r\n      actionNextButtonClick,\r\n      actionGetNextInterval,\r\n      actionHideAnswer,\r\n      actionUpdatePianoKeys\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"intervalsOptionsButtons\">\r\n        <LeftSideButtons\r\n          sequenceOfNotes={sequenceOfNotes}\r\n          nextSequenceOfNotes={nextSequenceOfNotes}\r\n          typeOfInterval={typeOfInterval}\r\n          settingsIsOpen={settingsIsOpen}\r\n          showAnswer={showAnswer}\r\n          sliceArr={sliceArr}\r\n          play={play}\r\n          actionIntervalsSettingsAction={actionIntervalsSettingsAction}\r\n          actionNextButtonClick={actionNextButtonClick}\r\n          actionGetNextInterval={actionGetNextInterval}\r\n          actionUpdatePianoKeys={actionUpdatePianoKeys}\r\n          actionHideAnswer={actionHideAnswer}\r\n        />\r\n        <RightSideButtons\r\n          typeOfInterval={typeOfInterval}\r\n          actionSetActiveTypeOfInterval={actionSetActiveTypeOfInterval}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIntervalsOptionButtons.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  nextSequenceOfNotes: PropTypes.arrayOf(PropTypes.number),\r\n  typeOfInterval: PropTypes.string.isRequired,\r\n  showAnswer: PropTypes.bool,\r\n  actionSetActiveTypeOfInterval: PropTypes.func.isRequired,\r\n  actionIntervalsSettingsAction: PropTypes.func.isRequired,\r\n  actionNextButtonClick: PropTypes.func.isRequired,\r\n  actionGetNextInterval: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n\r\nexport default IntervalsOptionButtons;\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nexport const actionIncrementRightAnswers = name => ({\r\n  type: INCREMENT_RIGHT_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionIncrementAmountOfAnswers = name => ({\r\n  type: INCREMENT_AMOUNT_OF_ANSWERS,\r\n  payload: name\r\n});\r\n\r\nexport const actionNextButtonClick = name => ({\r\n  type: NEXT_BUTTON_CLICK,\r\n  payload: name\r\n});\r\n\r\nexport const actionStatisticsClearing = () => ({\r\n  type: STATISTICS_CLEARING\r\n});\r\n\r\nexport const actionHideAnswer = () => ({\r\n  type: STATISTICS_HIDE_ANSWER\r\n});\r\n","import {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO,\r\n} from \"../actionTypes\";\r\n\r\nexport const actionUpdatePianoKeys = () => ({\r\n  type: UPDATE_PIANO_KEYS\r\n});\r\n\r\nexport const actionSetBordersOfRange = arr => ({\r\n  type: SET_BORDERS_OF_RANGE,\r\n  payload: { firstBorder: arr[0], secondBorder: arr[1] }\r\n});\r\n\r\nexport const actionShowNotesOnThePiano = payload => ({\r\n  type: SHOW_NOTES_ON_THE_PIANO,\r\n  payload\r\n});\r\n","import IntervalsOptionButtons from \"../components/intervals/IntervalsOptionButtons\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionGetNextInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionNextButtonClick,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionUpdatePianoKeys } from \"../store/actions/pianoActions\";\r\n\r\nimport { actionSetMode } from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ intervals, piano }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  sequenceOfNotes: intervals.sequenceOfNotes,\r\n  nextSequenceOfNotes: intervals.nextSequenceOfNotes,\r\n  typeOfInterval: intervals.typeOfInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  settingsIsOpen: intervals.settingsIsOpen\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetActiveTypeOfInterval,\r\n  actionIntervalsSettingsAction,\r\n  actionNextButtonClick,\r\n  actionGetNextInterval,\r\n  actionStatisticsClearing,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(IntervalsOptionButtons);\r\n","import {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  GET_ANSWER_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nexport const actionSetActiveTypeOfInterval = active => ({\r\n  type: SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  payload: active\r\n});\r\n\r\nexport const actionIntervalsSettingsAction = payload => ({\r\n  type: INTERVALS_SETTINGS_ACTION,\r\n  payload\r\n});\r\n\r\nexport const actionInverseChosenInterval = obj => ({\r\n  type: INVERSE_CHOSEN_INTERVAL,\r\n  payload: obj\r\n});\r\n\r\nexport const actionGetAnswerIntervals = () => ({\r\n  type: GET_ANSWER_INTERVAL\r\n});\r\n\r\nexport const actionShowTheCorrectInterval = () => ({\r\n  type: SHOW_THE_CORRECT_INTERVAL\r\n});\r\n\r\nexport const actionGetNextInterval = options => ({\r\n  type: GET_NEXT_INTERVAL,\r\n  payload: options\r\n});\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GroupOfIntervals = ({\r\n  group,\r\n  settingsIsOpen,\r\n  activeInterval,\r\n  sequenceOfNotes,\r\n  actionShowTheCorrectInterval,\r\n  actionInverseChosenInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano\r\n}) => {\r\n  const checkAnswer = interval => {\r\n    actionShowTheCorrectInterval();\r\n    const right = activeInterval.name === interval.name;\r\n    const type = right ? \"right\" : \"wrong\";\r\n\r\n    if (right) {\r\n      actionIncrementRightAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    } else {\r\n      actionIncrementAmountOfAnswers(activeInterval.rusName);\r\n      actionShowNotesOnThePiano({ type, sequence: sequenceOfNotes });\r\n    }\r\n  };\r\n\r\n  const funcOnClick = settingsIsOpen\r\n    ? actionInverseChosenInterval\r\n    : checkAnswer;\r\n\r\n  const body = group.map(interval => {\r\n    return (\r\n      <Button\r\n        key={interval.name}\r\n        onClick={() => {\r\n          funcOnClick(interval);\r\n        }}\r\n      >\r\n        {settingsIsOpen ? (\r\n          <span className=\"check\">\r\n            {interval.chosen\r\n              ? String.fromCharCode(10003)\r\n              : String.fromCharCode(215)}\r\n          </span>\r\n        ) : null}\r\n        {interval.rusName}\r\n      </Button>\r\n    );\r\n  });\r\n\r\n  GroupOfIntervals.propTypes = {\r\n    settingsIsOpen: PropTypes.bool,\r\n    group: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    activeInterval: PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      rusName: PropTypes.string.isRequired,\r\n      numberOfSemitones: PropTypes.number.isRequired,\r\n      chosen: PropTypes.bool.isRequired\r\n    }).isRequired,\r\n    sequenceOfNotes: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    actionShowTheCorrectInterval: PropTypes.func.isRequired,\r\n    actionInverseChosenInterval: PropTypes.func.isRequired,\r\n    actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n    actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n    actionShowNotesOnThePiano: PropTypes.func.isRequired\r\n  };\r\n\r\n  return <ButtonsGroup cls=\"vertical\">{body}</ButtonsGroup>;\r\n};\r\n\r\nexport default GroupOfIntervals;\r\n\r\n","export const dataOfIntervals = [\r\n  {\r\n    name: \"minorSecond\",\r\n    rusName: \"Малая Секунда\",\r\n    numberOfSemitones: 1,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSecond\",\r\n    rusName: \"Большая Секунда\",\r\n    numberOfSemitones: 2,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorThird\",\r\n    rusName: \"Малая Терция\",\r\n    numberOfSemitones: 3,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorThird\",\r\n    rusName: \"Большая Терция\",\r\n    numberOfSemitones: 4,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFourth\",\r\n    rusName: \"Чистая Кварта\",\r\n    numberOfSemitones: 5,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"triton\",\r\n    rusName: \"Тритон\",\r\n    numberOfSemitones: 6,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"perfectFifth\",\r\n    rusName: \"Чистая Квинта\",\r\n    numberOfSemitones: 7,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSixth\",\r\n    rusName: \"Малая Секста\",\r\n    numberOfSemitones: 8,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSixth\",\r\n    rusName: \"Большая Секста\",\r\n    numberOfSemitones: 9,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"minorSeventh\",\r\n    rusName: \"Малая Септима\",\r\n    numberOfSemitones: 10,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"majorSeventh\",\r\n    rusName: \"Большая Септима\",\r\n    numberOfSemitones: 11,\r\n    chosen: true\r\n  },\r\n  {\r\n    name: \"octave\",\r\n    rusName: \"Октава\",\r\n    numberOfSemitones: 12,\r\n    chosen: true\r\n  }\r\n];\r\n\r\nexport const getChosenIntervals = arr => {\r\n  return [...arr].filter(elem => {\r\n    return elem.chosen;\r\n  });\r\n};\r\n\r\nexport const createGroupsOfIntervals = arr => {\r\n  const chunk = 4;\r\n  var i,\r\n    j,\r\n    tmp = [];\r\n  for (i = 0, j = arr.length; i < j; i += chunk) {\r\n    tmp.push(arr.slice(i, i + chunk));\r\n  }\r\n  return tmp;\r\n};\r\n\r\nexport const getNewInterval = arr => {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n};\r\n\r\nexport const getNewSequenceOfNotes = (sliceArr, activeInterval) => {\r\n  const { numberOfSemitones } = activeInterval;\r\n\r\n  const sequence = getBordersOfSequence(sliceArr, numberOfSemitones);\r\n\r\n  return sequence;\r\n};\r\n\r\nconst getBordersOfSequence = (arr, num) => {\r\n  let firstNote = arr[Math.floor(Math.random() * arr.length)];\r\n  let secondNote = arr[arr.indexOf(firstNote) + num];\r\n\r\n  if (!secondNote) {\r\n    secondNote = arr[arr.length - 1];\r\n    firstNote = arr[arr.indexOf(secondNote) - num];\r\n  }\r\n\r\n  return [firstNote.key, secondNote.key];\r\n};\r\n","import React from \"react\";\r\nimport GroupOfIntervals from \"./GroupOfIntervals\";\r\n\r\nimport {\r\n  getChosenIntervals,\r\n  createGroupsOfIntervals\r\n} from \"../../store/dataOfIntervals\";\r\n\r\nconst ListOfIntervals = ({\r\n  settingsIsOpen,\r\n  allIntervals,\r\n  activeInterval,\r\n  showAnswer,\r\n  sequenceOfNotes,\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano\r\n}) => {\r\n  let arr = [];\r\n\r\n  if (settingsIsOpen) {\r\n    arr = createGroupsOfIntervals(allIntervals);\r\n  } else {\r\n    arr = createGroupsOfIntervals(getChosenIntervals(allIntervals));\r\n  }\r\n\r\n  const body = arr.map(group => (\r\n    <GroupOfIntervals\r\n      group={group}\r\n      key={group[0].name}\r\n      settingsIsOpen={settingsIsOpen}\r\n      activeInterval={activeInterval}\r\n      sequenceOfNotes={sequenceOfNotes}\r\n      actionShowTheCorrectInterval={actionShowTheCorrectInterval}\r\n      actionInverseChosenInterval={actionInverseChosenInterval}\r\n      actionIncrementRightAnswers={actionIncrementRightAnswers}\r\n      actionIncrementAmountOfAnswers={actionIncrementAmountOfAnswers}\r\n      actionShowNotesOnThePiano={actionShowNotesOnThePiano}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className=\"listOfIntervals\"\r\n      style={showAnswer && !settingsIsOpen ? { visibility: \"hidden\" } : null}\r\n    >\r\n      {body}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfIntervals;\r\n","import ListOfIntervals from \"../components/intervals/ListOfIntervals\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval\r\n} from \"../store/actions/intervalsActions\";\r\n\r\nimport {\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionShowNotesOnThePiano } from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ intervals }) => ({\r\n  settingsIsOpen: intervals.settingsIsOpen,\r\n  allIntervals: intervals.allIntervals,\r\n  activeInterval: intervals.activeInterval,\r\n  showAnswer: intervals.showAnswer,\r\n  sequenceOfNotes: intervals.sequenceOfNotes\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionInverseChosenInterval,\r\n  actionShowTheCorrectInterval,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionShowNotesOnThePiano\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ListOfIntervals);\r\n","import React from \"react\";\r\nimport \"./intervals.css\";\r\n\r\nimport IntervalsOptionButtonsContainer from \"../../containers/IntervalsOptionButtonsContainer\";\r\nimport ListOfIntervalsContainer from \"../../containers/listOfIntervalsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Intervals = ({ play }) => {\r\n  return (\r\n    <div className=\"intervals\">\r\n      <IntervalsOptionButtonsContainer\r\n        play={play}\r\n      ></IntervalsOptionButtonsContainer>\r\n\r\n      <ListOfIntervalsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nIntervals.propTypes = {\r\n  play: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Intervals;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ActivateMidi extends Component {\r\n  state = { status: \"\" };\r\n\r\n  onMIDIOnStateChange = event => {\r\n    this.setState({\r\n      status:\r\n        event.port.manufacturer + \" \" + event.port.name + \" \" + event.port.state\r\n    });\r\n  };\r\n\r\n  requestMIDIAccessSuccess = midi => {\r\n    var inputs = midi.inputs.values();\r\n    for (\r\n      var input = inputs.next();\r\n      input && !input.done;\r\n      input = inputs.next()\r\n    ) {\r\n      input.value.onmidimessage = this.midiOnMIDImessage;\r\n    }\r\n    midi.onstatechange = this.onMIDIOnStateChange;\r\n  };\r\n\r\n  requestMIDIAccessFailure = () => {\r\n    this.setState({ status: \"MIDI Access Failure\" });\r\n  };\r\n\r\n  midiOnMIDImessage = event => {\r\n    const keydown = 144;\r\n    const keyup = 128;\r\n    const velocity = event.data[2];\r\n\r\n    const eventKey = event.data[0];\r\n    const note = event.data[1];\r\n\r\n    const { sliceArr } = this.props;\r\n    if (note >= sliceArr[0].key && note <= sliceArr[sliceArr.length - 1].key) {\r\n      const options = { sequence: [note], type: \"active\" };\r\n\r\n      if (eventKey === keydown && velocity !== 0) {\r\n        this.props.actionShowNotesOnThePiano(options);\r\n        this.props.play(note);\r\n      } else if (eventKey === keyup || velocity === 0) {\r\n        this.props.actionUpdatePianoKeys();\r\n      }\r\n    }\r\n  };\r\n\r\n  startListening = () => {\r\n    this.setState({ status: \"waiting\" });\r\n    if (navigator.requestMIDIAccess) {\r\n      navigator\r\n        .requestMIDIAccess({ sysex: true })\r\n        .then(this.requestMIDIAccessSuccess, this.requestMIDIAccessFailure);\r\n    } else {\r\n      this.setState({ status: \"Нет доступа к миди-устройству\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"activate-midi\">\r\n        <Button cls=\"primary\" onClick={this.startListening}>\r\n          Включить MIDI клавиатуру\r\n        </Button>\r\n        <p style={{ marginTop: \"20px\" }}>\r\n          <b>Статус midi:</b>{\" \"}\r\n          {this.state.status ? this.state.status : \"отключена\"}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nActivateMidi.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n","import ActivateMidi from \"../components/activateMidi/ActivateMidi\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  sliceArr: piano.sliceArr\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ActivateMidi);\r\n","import React, { Component } from \"react\";\r\n\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class FindNote extends Component {\r\n  componentDidMount() {\r\n    this.props.actionSetActiveNote(this.props.sliceArr);\r\n    this.props.actionSetMode({ mode: \"Искать ноту\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionStatisticsClearing();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.needToWriteNote && !this.props.needToWriteNote) {\r\n      if (this.props.playNote !== null) {\r\n        const playNote = this.props.playNote.key;\r\n        const note = this.props.note;\r\n\r\n        if (playNote === note) {\r\n          this.props.actionIncrementRightAnswers();\r\n          this.setVisualEffect({ right: true });\r\n        } else {\r\n          this.props.actionIncrementAmountOfAnswers();\r\n          this.setVisualEffect({ right: false, note });\r\n        }\r\n        this.props.actionSetActiveNote(this.props.sliceArr);\r\n      }\r\n    }\r\n  }\r\n\r\n  setVisualEffect = ({ right, note }) => {\r\n    const sequence = [this.props.playNote.key];\r\n    if (right) {\r\n      this.setRightVisualEffect({ sequence });\r\n    } else {\r\n      this.setWrongVisualEffect({ sequence, note });\r\n    }\r\n  };\r\n\r\n  setRightVisualEffect = ({ sequence }) => {\r\n    const options = { sequence, type: \"right\" };\r\n    this.props.actionShowNotesOnThePiano(options);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 2000);\r\n  };\r\n\r\n  setWrongVisualEffect = ({ sequence, note }) => {\r\n    const options1 = {\r\n      sequence,\r\n      type: \"wrong\"\r\n    };\r\n\r\n    const options2 = {\r\n      sequence: [note],\r\n      type: \"right\"\r\n    };\r\n\r\n    this.props.actionShowNotesOnThePiano(options1);\r\n    this.props.actionShowNotesOnThePiano(options2);\r\n\r\n    setTimeout(() => {\r\n      this.props.actionUpdatePianoKeys();\r\n      this.props.actionHideAnswer();\r\n    }, 1500);\r\n  };\r\n\r\n  playButtonHandler = () => {\r\n    const { note } = this.props;\r\n\r\n    this.props.play(note);\r\n    this.setMode(false);\r\n  };\r\n\r\n  answerButtonHandler = () => {\r\n    this.setMode(true);\r\n  };\r\n\r\n  setMode = bool => {\r\n    if (this.props.needToWriteNote !== bool) {\r\n      this.props.actionNeedToWriteNote(bool);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { needToWriteNote } = this.props;\r\n    const { playButtonHandler, answerButtonHandler } = this;\r\n\r\n    return (\r\n      <div className=\"findNote\">\r\n        <ButtonsGroup cls=\"horizontal\">\r\n          <Button\r\n            cls={needToWriteNote ? \"secondary-outline\" : \"info\"}\r\n            onClick={playButtonHandler}\r\n          >\r\n            Играть ноту\r\n          </Button>\r\n          <Button\r\n            cls={needToWriteNote ? \"info\" : \"secondary-outline\"}\r\n            onClick={answerButtonHandler}\r\n          >\r\n            Ответить\r\n          </Button>\r\n        </ButtonsGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFindNote.propTypes = {\r\n  play: PropTypes.func.isRequired,\r\n  actionSetActiveNote: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionShowNotesOnThePiano: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  statistics: PropTypes.shape({\r\n    nameOfInterval: PropTypes.string.isRequired,\r\n    rightAnswers: PropTypes.number.isRequired,\r\n    amountOfAnswers: PropTypes.number.isRequired,\r\n    right: PropTypes.bool.isRequired,\r\n    showAnswer: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  note: PropTypes.number.isRequired,\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  playNote: PropTypes.object,\r\n  needToWriteNote: PropTypes\r\n};\r\n\r\n","import FindNote from \"../components/findNote/FindNote\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionSetActiveNote } from \"../store/actions/notesActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport { actionNeedToWriteNote, actionSetMode } from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n  actionShowNotesOnThePiano,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ statistics, notes, piano, application }) => ({\r\n  statistics,\r\n  note: notes.note,\r\n  sliceArr: piano.sliceArr,\r\n  playNote: application.playNote,\r\n  needToWriteNote: application.needToWriteNote\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionStatisticsClearing,\r\n  actionSetActiveNote,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionNeedToWriteNote,\r\n  actionShowNotesOnThePiano,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FindNote);\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nexport const actionSetActiveNote = arr => ({\r\n  type: SET_ACTIVE_NOTE,\r\n  sliceArr: arr\r\n});\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationPlayButtons = ({ playGuessedMelody, playWrittenMelody }) => {\r\n  return (\r\n    <ButtonsGroup cls=\"horizontal\">\r\n      <Button onClick={playGuessedMelody}>Играть угадываемую мелодию</Button>\r\n      <Button onClick={playWrittenMelody}>Играть написанную мелодию</Button>\r\n    </ButtonsGroup>\r\n  );\r\n};\r\n\r\nDictationPlayButtons.propTypes = {\r\n  playGuessedMelody: PropTypes.func.isRequired,\r\n  playWrittenMelody: PropTypes.func.isRequired\r\n};\r\n\r\nexport default DictationPlayButtons;\r\n","import React from \"react\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst DictationOptionsButtons = ({\r\n  modeWrite,\r\n  changeMode,\r\n  clearButtonHandler,\r\n  checkAnswerHandler,\r\n  sequenceOfWrittenMelody,\r\n  amountOfNotes,\r\n  answerGiven,\r\n  nextButtonHandler,\r\n  settingsButtonHandler\r\n}) => {\r\n  const access = amountOfNotes === sequenceOfWrittenMelody.length && !answerGiven;\r\n\r\n  const clickHandlerNextPlayButton = () => {\r\n    changeMode();\r\n    if (answerGiven) {\r\n      nextButtonHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dictation-options-buttons\">\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button\r\n          onClick={clickHandlerNextPlayButton}\r\n          cls={modeWrite ? \"info-outline\" : \"info active\"}\r\n          disabled={modeWrite ? false : true}\r\n        >\r\n          {answerGiven ? \"Далее\" : \"Играть\"}\r\n        </Button>\r\n        {answerGiven ? null : (\r\n          <Button\r\n            onClick={changeMode}\r\n            cls={modeWrite ? \"info active\" : \"info-outline\"}\r\n            disabled={modeWrite ? true : false}\r\n          >\r\n            Писать\r\n          </Button>\r\n        )}\r\n      </ButtonsGroup>\r\n      <ButtonsGroup cls=\"horizontal\">\r\n        <Button onClick={clearButtonHandler}>Стереть</Button>\r\n        <Button\r\n          onClick={checkAnswerHandler}\r\n          cls={access ? \"danger\" : \"danger-outline\"}\r\n          disabled={!access}\r\n        >\r\n          Проверить\r\n        </Button>\r\n      </ButtonsGroup>\r\n      <Button cls=\"primary\" onClick={settingsButtonHandler}>\r\n        Настроки\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DictationOptionsButtons;\r\n\r\nDictationOptionsButtons.propTypes = {\r\n  modeWrite: PropTypes.bool.isRequired,\r\n  changeMode: PropTypes.func.isRequired,\r\n  nextButtonHandler: PropTypes.func.isRequired,\r\n  clearButtonHandler: PropTypes.func.isRequired,\r\n  checkAnswerHandler: PropTypes.func.isRequired,\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object),\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  answerGiven: PropTypes.bool.isRequired\r\n};\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DictationOutputElement = ({\r\n  elem,\r\n  index,\r\n  rightAnswer,\r\n  answerGiven,\r\n  rightElem\r\n}) => {\r\n  const cls = answerGiven ? (rightAnswer ? \"right\" : \"wrong\") : \"\";\r\n\r\n  const rightElemJSX = answerGiven ? (\r\n    rightAnswer ? null : (\r\n      <span className=\"right\">\r\n        &nbsp;\r\n        {rightElem ? `${rightElem.octaveName} - ${rightElem.fullName}` : \" ?\"}\r\n      </span>\r\n    )\r\n  ) : null;\r\n\r\n  return (\r\n    <p className=\"dictation-output-element\">\r\n      <span className=\"index-output-element\">{`${index + 1} нота:`}</span>&nbsp;\r\n      <span className={cls}>\r\n        {elem ? `${elem.octaveName} - ${elem.fullName}` : \" ?\"}\r\n      </span>\r\n      {rightElemJSX}\r\n    </p>\r\n  );\r\n};\r\n\r\nDictationOutputElement.propTypes = {\r\n  elem: PropTypes.object,\r\n  index: PropTypes.number.isRequired,\r\n  rightAnswer: PropTypes.bool,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n  rightElem: PropTypes.object.isRequired,\r\n\r\n};\r\n\r\nexport default DictationOutputElement;\r\n","import React from \"react\";\r\nimport DictationOutputElement from \"./DictationOutputElement\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DuctationOutput = ({\r\n  amountOfNotes,\r\n  sequenceOfMelody,\r\n  sequenceOfWrittenMelody,\r\n  answerGiven,\r\n  answers\r\n}) => {\r\n  let dictationOutputBody = [];\r\n\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const elem = sequenceOfWrittenMelody[i];\r\n    const rightElem = sequenceOfMelody[i];\r\n    const elementJSX = (\r\n      <DictationOutputElement\r\n        elem={elem}\r\n        index={i}\r\n        answerGiven={answerGiven}\r\n        rightAnswer={answers[i]}\r\n        rightElem={rightElem}\r\n        key={i}\r\n      />\r\n    );\r\n\r\n    dictationOutputBody.push(elementJSX);\r\n  }\r\n  return (\r\n    <div className=\"dictation-output\">\r\n      <h3>Список отгаданных нот:</h3>\r\n      {dictationOutputBody}\r\n    </div>\r\n  );\r\n};\r\n\r\nDuctationOutput.propTypes = {\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  answers: PropTypes.arrayOf(PropTypes.bool).isRequired,\r\n  answerGiven: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default DuctationOutput;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./modalWindow.css\";\r\nimport ButtonsGroup from \"../buttonsGroup/ButtonsGroup\";\r\nimport Button from \"../button/Button\";\r\n\r\nexport default class ModalWindow extends Component {\r\n  state = {\r\n    opacity: 0\r\n  };\r\n\r\n  modal = document.createElement(\"div\");\r\n\r\n  componentDidMount() {\r\n    this.modal.className = \"modal-wrap\";\r\n    document.body.appendChild(this.modal);\r\n    document.body.style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.setState({\r\n        opacity: 1\r\n      });\r\n    }, 100);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.modal);\r\n    document.body.style.overflow = \"auto\";\r\n  }\r\n\r\n  closeHandler = () => {\r\n    this.setState({\r\n      opacity: 0\r\n    });\r\n    setTimeout(() => {\r\n      this.props.close();\r\n    }, 100);\r\n  };\r\n\r\n  saveHandler = () => {\r\n    this.closeHandler();\r\n    this.props.saveButtonHandler();\r\n  };\r\n\r\n  cancelHandler = () => {\r\n    this.closeHandler();\r\n    this.props.cancelButtonHandler();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      saveButton,\r\n      saveButtonName,\r\n      cancelButton,\r\n      cancelButtonName\r\n    } = this.props;\r\n\r\n    return ReactDOM.createPortal(\r\n      <div className=\"modal-window\" style={{ opacity: this.state.opacity }}>\r\n        <span className=\"close\" onClick={this.closeHandler}>\r\n          &times;\r\n        </span>\r\n        {this.props.children}\r\n        <ButtonsGroup cls=\"flex\">\r\n          {saveButton ? (\r\n            <Button onClick={this.saveHandler} cls=\"info\">\r\n              {saveButtonName}\r\n            </Button>\r\n          ) : null}\r\n          {cancelButton ? (\r\n            <Button onClick={this.cancelHandler} cls=\"danger\">\r\n              {cancelButtonName}\r\n            </Button>\r\n          ) : null}\r\n        </ButtonsGroup>\r\n      </div>,\r\n      this.modal\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./select.css\";\r\n\r\nconst Select = ({ value, onChange, children }) => {\r\n\treturn <select className=\"select\" defaultValue={value} onChange={onChange}>\r\n\t\t{children}\r\n\t</select>\r\n};\r\n\r\nexport default Select;","import React from \"react\";\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst amountOfNotes = [3, 4, 5, 6, 7];\r\n\r\nconst amountOfNotesOptions = amountOfNotes.map(elem => (\r\n  <option value={elem} key={elem}>\r\n    {elem}\r\n  </option>\r\n));\r\n\r\nconst SelectAmountOfNotes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {amountOfNotesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectAmountOfNotes.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst modes = [\r\n  { modePlay: false, ru: \"Играть\" },\r\n  { modePlay: true, ru: \"Писать\" }\r\n];\r\n\r\nconst modesOptions = modes.map(elem => (\r\n  <option value={elem.modePlay} key={elem.ru}>\r\n    {elem.ru}\r\n  </option>\r\n));\r\n\r\nconst SelectModes = ({ value, onChange }) => {\r\n  return (\r\n    <Select onChange={onChange} value={value}>\r\n      {modesOptions}\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectModes.propTypes = {\r\n  value: PropTypes.bool.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nexport { SelectAmountOfNotes, SelectModes };\r\n","import React, { Component } from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\";\r\nimport { SelectAmountOfNotes, SelectModes } from \"./selectComponents\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class DictationSettings extends Component {\r\n  state = {\r\n    amountOfNotes: 4,\r\n    defaultModeWrite: false,\r\n    modeWrite: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { amountOfNotes, defaultModeWrite } = this.props;\r\n    this.setState({\r\n      amountOfNotes,\r\n      defaultModeWrite\r\n    });\r\n  }\r\n\r\n  selectAmountOfNotesHandler = e => {\r\n    this.setState({\r\n      amountOfNotes: +e.target.value\r\n    });\r\n  };\r\n\r\n  selectModesHandler = e => {\r\n    let defaultModeWrite, modeWrite;\r\n    const value = e.target.value;\r\n\r\n    if (value === \"true\") {\r\n      defaultModeWrite = true;\r\n      modeWrite = true;\r\n    }\r\n    if (value === \"false\") {\r\n      defaultModeWrite = false;\r\n      modeWrite = false;\r\n    }\r\n\r\n    this.setState({\r\n      defaultModeWrite,\r\n      modeWrite\r\n    });\r\n  };\r\n\r\n  saveButtonHandler = () => {\r\n    this.props.actionChangeSettings(this.state);\r\n  };\r\n\r\n  cancelButtonHandler = () => {\r\n    this.setState({\r\n      amountOfNotes: this.props.amountOfNotes,\r\n      defaultModeWrite: this.props.defaultModeWrite\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      settingsButtonHandler,\r\n      amountOfNotes,\r\n      defaultModeWrite\r\n    } = this.props;\r\n\r\n    const {\r\n      selectAmountOfNotesHandler,\r\n      selectModesHandler,\r\n      saveButtonHandler,\r\n      cancelButtonHandler\r\n    } = this;\r\n    return (\r\n      <ModalWindow\r\n        close={settingsButtonHandler}\r\n        saveButton={true}\r\n        saveButtonName={\"Сохранить\"}\r\n        cancelButton={true}\r\n        cancelButtonName={\"Отменить\"}\r\n        saveButtonHandler={saveButtonHandler}\r\n        cancelButtonHandler={cancelButtonHandler}\r\n      >\r\n        <React.Fragment>\r\n          <h3>Настройки диктанта</h3>\r\n          <h4>Количество нот:</h4>\r\n          <SelectAmountOfNotes\r\n            value={amountOfNotes}\r\n            onChange={selectAmountOfNotesHandler}\r\n          />\r\n          <h4>Режим по умолчанию:</h4>\r\n          <SelectModes value={defaultModeWrite} onChange={selectModesHandler} />\r\n        </React.Fragment>\r\n      </ModalWindow>\r\n    );\r\n  }\r\n}\r\n\r\nDictationSettings.propTypes = {\r\n  settingsButtonHandler: PropTypes.func.isRequired,\r\n  actionChangeSettings: PropTypes.func.isRequired,\r\n  amountOfNotes: PropTypes.number.isRequired,\r\n  defaultModeWrite: PropTypes.bool.isRequired,\r\n};\r\n\r\n","import DictationSettings from \"../components/dictation/DictationSettings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { actionChangeSettings } from \"../store/actions/dictationActions\";\r\n\r\nconst mapStateToProps = ({ dictation }) => ({\r\n  amountOfNotes: dictation.amountOfNotes,\r\n  defaultModeWrite: dictation.defaultModeWrite\r\n});\r\n\r\nconst mapDispatchToProps = { actionChangeSettings };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DictationSettings);\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS,\r\n} from \"../actionTypes\";\r\n\r\nexport const actionGetNewMelody = (sliceArr) => ({\r\n  type: GET_NEW_MELODY,\r\n  sliceArr,\r\n});\r\n\r\nexport const actionChangeMode = (payload) => ({\r\n  type: CHANGE_MODE,\r\n  payload,\r\n});\r\n\r\nexport const actionAddNoteToAnswerArray = (payload) => ({\r\n  type: ADD_NOTE_TO_ANSWER_ARRAY,\r\n  payload,\r\n});\r\n\r\nexport const actionPopLastElemFromAnswerArray = () => ({\r\n  type: POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n});\r\n\r\nexport const actionWriteAnswers = (arr) => ({\r\n  type: WRITE_ANSWERS,\r\n  payload: arr,\r\n});\r\n\r\nexport const actionClearWrittenMelody = () => ({\r\n  type: CLEAR_WRITTEN_MELODY,\r\n});\r\n\r\nexport const actionChangeSettings = (settingsObj) => ({\r\n  type: CHANGE_SETTINGS,\r\n  payload: settingsObj,\r\n});\r\n","import React, { Component } from \"react\";\r\nimport \"./dictation.css\";\r\n\r\nimport DictationPlayButtons from \"./DictationPlayButtons\";\r\nimport DictationOptionsButtons from \"./DictationOptionsButtons\";\r\nimport DuctationOutput from \"./DuctationOutput\";\r\nimport DictationSettings from \"../../containers/dictationSettingsContainer\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Dictation extends Component {\r\n  state = {\r\n    modalIsOpen: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { defaultModeWrite } = this.props.dictation;\r\n    this.props.actionWritePlayNote(null, false);\r\n\r\n    this.changeMode(null, defaultModeWrite);\r\n\r\n    if (this.props.needToWriteNote !== defaultModeWrite) {\r\n      this.props.actionNeedToWriteNote(defaultModeWrite);\r\n    }\r\n\r\n    this.setNewMelody();\r\n    this.props.actionInitDictation(true);\r\n    this.props.actionSetMode({ mode: \"Музыкальный диктант\", stat: true });\r\n    this.props.actionUpdatePianoKeys();\r\n    this.props.actionClearWrittenMelody();\r\n    this.clearAnswers();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.actionInitDictation(false);\r\n    this.clearAnswers();\r\n    this.props.actionStatisticsClearing();\r\n    this.props.actionClearWrittenMelody();\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const { sequenceOfWrittenMelody } = this.props.dictation;\r\n    const { amountOfNotes } = this.props.dictation;\r\n    const { playNote } = this.props;\r\n\r\n    if (sequenceOfWrittenMelody.length < amountOfNotes && playNote) {\r\n      if (\r\n        (prevState.playNote && playNote.id !== prevState.playNote.id) ||\r\n        (prevState.playNote === null && playNote !== null)\r\n      ) {\r\n        this.props.actionAddNoteToAnswerArray(playNote);\r\n      }\r\n    }\r\n  }\r\n\r\n  setNewMelody = () => {\r\n    this.props.actionGetNewMelody(this.props.sliceArr);\r\n  };\r\n\r\n  clearAnswers = () => {\r\n    this.props.actionWriteAnswers([]);\r\n  };\r\n\r\n  playGuessedMelody = () => {\r\n    const sequence = this.props.dictation.sequenceOfMelody.map(\r\n      elem => elem.key\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playWrittenMelody = () => {\r\n    const sequence = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n\r\n    this.playMelody(sequence);\r\n  };\r\n\r\n  playMelody = sequence => {\r\n    const onlyPlay = true;\r\n    for (let i = 0; i < sequence.length; i++) {\r\n      if (sequence[i]) {\r\n        setTimeout(() => {\r\n          this.props.play(sequence[i], onlyPlay);\r\n        }, 800 * i);\r\n      }\r\n    }\r\n  };\r\n\r\n  changeMode = (e, modeWrite) => {\r\n    modeWrite =\r\n      typeof modeWrite === \"boolean\"\r\n        ? modeWrite\r\n        : !this.props.dictation.modeWrite;\r\n\r\n    this.props.actionChangeMode(modeWrite);\r\n\r\n    this.props.actionNeedToWriteNote(modeWrite);\r\n  };\r\n\r\n  clearButtonHandler = () => {\r\n    if (this.props.dictation.sequenceOfWrittenMelody.length > 0) {\r\n      this.props.actionPopLastElemFromAnswerArray();\r\n    }\r\n  };\r\n\r\n  checkAnswerHandler = () => {\r\n    const arrKeysArrayOfMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfMelody\r\n    );\r\n\r\n    const arrKeysArrayOfWrittenMeloday = this.getKeysArrayOfMeloday(\r\n      this.props.dictation.sequenceOfWrittenMelody\r\n    );\r\n\r\n    if (arrKeysArrayOfMeloday.length === arrKeysArrayOfWrittenMeloday.length) {\r\n      const checkAnswers = this.getArrayOfEqualsOfAnswers(\r\n        arrKeysArrayOfMeloday,\r\n        arrKeysArrayOfWrittenMeloday\r\n      );\r\n\r\n      this.changeStat(checkAnswers);\r\n      this.props.actionWriteAnswers(checkAnswers);\r\n    }\r\n  };\r\n\r\n  getKeysArrayOfMeloday = sequence => {\r\n    const arr = sequence.map(elem => elem.key);\r\n\r\n    return arr;\r\n  };\r\n\r\n  getArrayOfEqualsOfAnswers = (arr1, arr2) => {\r\n    const checkAnswers = [];\r\n    for (let i = 0; i < arr1.length; i++) {\r\n      checkAnswers.push(arr1[i] === arr2[i]);\r\n    }\r\n\r\n    return checkAnswers;\r\n  };\r\n\r\n  changeStat = arr => {\r\n    if (arr.indexOf(false) === -1) {\r\n      this.props.actionIncrementRightAnswers();\r\n    } else {\r\n      this.props.actionIncrementAmountOfAnswers();\r\n    }\r\n  };\r\n\r\n  nextButtonHandler = () => {\r\n    this.setNewMelody();\r\n\r\n    this.clearAnswers();\r\n\r\n    this.props.actionClearWrittenMelody();\r\n\r\n    this.props.actionHideAnswer();\r\n  };\r\n\r\n  settingsButtonHandler = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        modalIsOpen: !prevState.modalIsOpen\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const modeWrite = this.props.dictation.modeWrite || false;\r\n\r\n    const needToWriteNote = this.props.needToWriteNote;\r\n\r\n    const {\r\n      amountOfNotes,\r\n      sequenceOfMelody,\r\n      sequenceOfWrittenMelody,\r\n      answerGiven,\r\n      answers\r\n    } = this.props.dictation;\r\n\r\n    const { nextButtonHandler, settingsButtonHandler } = this;\r\n\r\n    return (\r\n      <div>\r\n        <DictationPlayButtons\r\n          playGuessedMelody={this.playGuessedMelody}\r\n          playWrittenMelody={this.playWrittenMelody}\r\n        />\r\n        <DictationOptionsButtons\r\n          modeWrite={modeWrite}\r\n          changeMode={this.changeMode}\r\n          clearButtonHandler={this.clearButtonHandler}\r\n          checkAnswerHandler={this.checkAnswerHandler}\r\n          sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n          amountOfNotes={amountOfNotes}\r\n          answerGiven={answerGiven}\r\n          nextButtonHandler={nextButtonHandler}\r\n          settingsButtonHandler={settingsButtonHandler}\r\n        />\r\n        <DuctationOutput\r\n          amountOfNotes={amountOfNotes}\r\n          needToWriteNote={needToWriteNote}\r\n          sequenceOfMelody={sequenceOfMelody}\r\n          sequenceOfWrittenMelody={sequenceOfWrittenMelody}\r\n          answerGiven={answerGiven}\r\n          answers={answers}\r\n        />\r\n\r\n        {this.state.modalIsOpen ? (\r\n          <DictationSettings settingsButtonHandler={settingsButtonHandler} />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDictation.propTypes = {\r\n  sliceArr: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  play: PropTypes.func.isRequired,\r\n  needToWriteNote: PropTypes.bool.isRequired,\r\n  playNote: PropTypes.object,\r\n  actionGetNewMelody: PropTypes.func.isRequired,\r\n  actionChangeMode: PropTypes.func.isRequired,\r\n  actionNeedToWriteNote: PropTypes.func.isRequired,\r\n  actionInitDictation: PropTypes.func.isRequired,\r\n  actionAddNoteToAnswerArray: PropTypes.func.isRequired,\r\n  actionWritePlayNote: PropTypes.func.isRequired,\r\n  actionPopLastElemFromAnswerArray: PropTypes.func.isRequired,\r\n  actionWriteAnswers: PropTypes.func.isRequired,\r\n  actionStatisticsClearing: PropTypes.func.isRequired,\r\n  actionIncrementRightAnswers: PropTypes.func.isRequired,\r\n  actionIncrementAmountOfAnswers: PropTypes.func.isRequired,\r\n  actionClearWrittenMelody: PropTypes.func.isRequired,\r\n  actionHideAnswer: PropTypes.func.isRequired,\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  dictation: PropTypes.shape({\r\n    amountOfNotes: PropTypes.number.isRequired,\r\n    sequenceOfMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    sequenceOfWrittenMelody: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    defaultModeWrite: PropTypes.bool.isRequired,\r\n    answers: PropTypes.array.isRequired,\r\n    answerGiven: PropTypes.bool.isRequired,\r\n    modeWrite: PropTypes.bool.isRequired\r\n  }).isRequired\r\n};\r\n","import Dictation from \"../components/dictation/Dictation\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nimport {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionAddNoteToAnswerArray,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionClearWrittenMelody\r\n} from \"../store/actions/dictationActions\";\r\n\r\nimport {\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionHideAnswer\r\n} from \"../store/actions/statisticsActions\";\r\n\r\nimport {\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionWritePlayNote,\r\n  actionSetMode\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ piano, dictation, application }) => ({\r\n  sliceArr: piano.sliceArr,\r\n  dictation,\r\n  needToWriteNote: application.needToWriteNote,\r\n  playNote: application.playNote\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionGetNewMelody,\r\n  actionChangeMode,\r\n  actionNeedToWriteNote,\r\n  actionInitDictation,\r\n  actionAddNoteToAnswerArray,\r\n  actionWritePlayNote,\r\n  actionPopLastElemFromAnswerArray,\r\n  actionWriteAnswers,\r\n  actionStatisticsClearing,\r\n  actionIncrementRightAnswers,\r\n  actionIncrementAmountOfAnswers,\r\n  actionClearWrittenMelody,\r\n  actionHideAnswer,\r\n  actionSetMode,\r\n  actionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dictation);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FreeMode = ({ actionSetMode, actionUpdatePianoKeys }) => {\r\n  actionSetMode({ mode: \"Свободная игра\", stat: false });\r\n  actionUpdatePianoKeys();\r\n  return <div className=\"free-mode\"></div>;\r\n};\r\n\r\nFreeMode.propTypes = {\r\n  actionSetMode: PropTypes.func.isRequired,\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FreeMode;\r\n","import FreeMode from \"../components/freeMode/FreeMode\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = () => ({})\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FreeMode);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OptionFromSelectRanges = ({ index, fullName, disabled }) => {\r\n  return (\r\n    <option disabled={disabled} value={index}>\r\n      {fullName}\r\n    </option>\r\n  );\r\n};\r\n\r\nOptionFromSelectRanges.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  fullName: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default OptionFromSelectRanges;\r\n","import React from \"react\";\r\nimport OptionFromSelectRanges from \"./OptionFromSelectRanges\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectBody = ({\r\n  baseArrOfNotes,\r\n  firstBorder,\r\n  secondBorder,\r\n  nameOfSelect,\r\n  minAmountOfNotes\r\n}) => {\r\n  const body = baseArrOfNotes.map(({ fullName, key, index }) => {\r\n    let disabled = false;\r\n\r\n    if (nameOfSelect === \"firstBorder\") {\r\n      if (key > secondBorder.key - minAmountOfNotes) {\r\n        disabled = true;\r\n      }\r\n    } else if (key < firstBorder.key + minAmountOfNotes) {\r\n      disabled = true;\r\n    }\r\n\r\n    return (\r\n      <OptionFromSelectRanges\r\n        disabled={disabled}\r\n        fullName={fullName}\r\n        index={index}\r\n        key={key}\r\n      />\r\n    );\r\n  });\r\n  return body;\r\n};\r\n\r\nSelectBody.propType = {\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n};\r\n\r\n\r\nexport default SelectBody;","let baseArrOfNotes = [];\r\n\r\nconst BASE_NAMES = [\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\"\r\n];\r\n\r\nconst NAMES_OF_OCTAVES = {\r\n  0: \"Субконтроктава\",\r\n  1: \"Контроктава\",\r\n  2: \"Большая октава\",\r\n  3: \"Малая октава\",\r\n  4: \"Первая октава\",\r\n  5: \"Вторая октава\",\r\n  6: \"Третья октава\",\r\n  7: \"Четвертая октава\",\r\n  8: \"Пятая октава\"\r\n};\r\n\r\nconst BASE_START_NOTE = 21;\r\nconst BASE_FINISH_NOTE = 108;\r\n\r\nlet octaveNumber = 0;\r\n\r\nfor (let i = 0; i <= BASE_FINISH_NOTE - BASE_START_NOTE; i++) {\r\n  const name = BASE_NAMES[i % BASE_NAMES.length];\r\n\r\n  if (name === \"C\") {\r\n    octaveNumber++;\r\n  }\r\n  baseArrOfNotes.push({\r\n    index: i,\r\n    key: i + BASE_START_NOTE,\r\n    name,\r\n    fullName: name + octaveNumber,\r\n    octaveName: NAMES_OF_OCTAVES[octaveNumber]\r\n  });\r\n}\r\n\r\nfunction getBaseArrayOfNotes(\r\n  start = 0,\r\n  finish = BASE_FINISH_NOTE - BASE_START_NOTE\r\n) {\r\n  return [...baseArrOfNotes].slice(start, finish + 1);\r\n}\r\n\r\nfunction getFullArrayAndMapIndexes(arr) {\r\n  const mapIndex = {};\r\n\r\n  const arrOfNotes = [];\r\n\r\n  for (let k = 0; k < arr.length; k++) {\r\n    const obj = arr[k];\r\n    const nextObj = arr[k + 1];\r\n    let i = arrOfNotes.length;\r\n    let section = [];\r\n\r\n    section.push(addNewFields(obj));\r\n\r\n    mapIndex[arr[k].key] = {\r\n      i,\r\n      j: 0\r\n    };\r\n\r\n    if (nextObj && nextObj.name.includes(\"#\")) {\r\n      section.push(addNewFields(nextObj));\r\n      k++;\r\n      mapIndex[arr[k].key] = {\r\n        i,\r\n        j: 1\r\n      };\r\n    }\r\n\r\n    arrOfNotes.push(section);\r\n  }\r\n\r\n  return { mapIndex, arrOfNotes };\r\n}\r\n\r\nfunction addNewFields(obj) {\r\n  return { ...obj, active: false, wrong: false, right: false };\r\n}\r\n\r\nconst getIndexes = ({ key, mapIndex }) => {\r\n  const indexesOfNote = mapIndex[key];\r\n  const i = indexesOfNote.i;\r\n  const j = indexesOfNote.j;\r\n  return { i, j };\r\n};\r\n\r\nwindow.getIndexes = getIndexes;\r\n\r\nconst setVisualEffect = ({ arrOfNotes, sequence, type, active, mapIndex }) => {\r\n  let arr = [...arrOfNotes];\r\n\r\n  sequence.forEach(element => {\r\n    const { i, j } = getIndexes({ key: element, mapIndex });\r\n    if (active) {\r\n      arr[i][j][type] = true;\r\n    } else {\r\n      if (!type) {\r\n        arr[i][j].right = false;\r\n        arr[i][j].wrong = false;\r\n      } else {\r\n        arr[i][j][type] = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  return arr;\r\n};\r\n\r\nexport {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  getIndexes,\r\n  setVisualEffect\r\n};\r\n","import React from \"react\";\r\nimport SelectBody from \"./SelectBody\";\r\n\r\nimport Select from \"../select/Select\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectOfRange = ({\r\n  nameOfSelect,\r\n  baseArrOfNotes,\r\n  minAmountOfNotes,\r\n  actionSetBordersOfRange,\r\n  firstBorder,\r\n  secondBorder\r\n}) => {\r\n  const selectChangeHandler = (e, field) => {\r\n    let index = +e.target.value;\r\n    const key = baseArrOfNotes[index].key;\r\n\r\n    if (field === \"firstBorder\") {\r\n      firstBorder = { index, key };\r\n    } else {\r\n      secondBorder = { index, key };\r\n    }\r\n\r\n    actionSetBordersOfRange([firstBorder, secondBorder]);\r\n  };\r\n\r\n  const valueOfSelect =\r\n    nameOfSelect === \"firstBorder\" ? firstBorder.index : secondBorder.index;\r\n\r\n  return (\r\n    <Select\r\n      value={valueOfSelect}\r\n      onChange={e => {\r\n        selectChangeHandler(e, nameOfSelect);\r\n      }}\r\n    >\r\n      <SelectBody\r\n        minAmountOfNotes={minAmountOfNotes}\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect={nameOfSelect}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n      />\r\n    </Select>\r\n  );\r\n};\r\n\r\nSelectOfRange.propTypes = {\r\n  firstBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  secondBorder: PropTypes.shape({\r\n    index: PropTypes.number.isRequired,\r\n    key: PropTypes.number.isRequired\r\n  }),\r\n  nameOfSelect: PropTypes.string.isRequired,\r\n  minAmountOfNotes: PropTypes.number.isRequired,\r\n  baseArrOfNotes: PropTypes.arrayOf(PropTypes.object.isRequired),\r\n  actionSetBordersOfRange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SelectOfRange;\r\n","import React from \"react\";\r\nimport SelectOfRange from \"./SelectOfRange\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"../button/Button\";\r\n\r\nconst ChangeRangeOfNotes = ({\r\n  actionUpdatePianoKeys,\r\n  actionSetBordersOfRange,\r\n  piano: { firstBorder, secondBorder, baseArrOfNotes, minAmountOfNotes }\r\n}) => {\r\n  const clickHandler = () => {\r\n    actionUpdatePianoKeys();\r\n  };\r\n\r\n  return (\r\n    <div className=\"changeRangeOfNotes\">\r\n      <h3>Изменить диапазон:</h3>\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"firstBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n      <SelectOfRange\r\n        firstBorder={firstBorder}\r\n        secondBorder={secondBorder}\r\n        nameOfSelect=\"secondBorder\"\r\n        actionSetBordersOfRange={actionSetBordersOfRange}\r\n        baseArrOfNotes={baseArrOfNotes}\r\n        minAmountOfNotes={minAmountOfNotes}\r\n      />\r\n\r\n      <Button onClick={clickHandler}>Выбрать диапазон</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nChangeRangeOfNotes.propTypes = {\r\n  actionUpdatePianoKeys: PropTypes.func.isRequired,\r\n  actionSetBordersOfRange: PropTypes.func.isRequired,\r\n  piano: PropTypes.object\r\n};\r\n\r\nexport default ChangeRangeOfNotes;\r\n","import ChangeRangeOfNotes from \"../components/changeRangeOfNotes/ChangeRangeOfNotes\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = ({ piano }) => ({\r\n  piano\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionSetBordersOfRange,\r\n  actionUpdatePianoKeys\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChangeRangeOfNotes);\r\n","import React from \"react\";\r\nimport ModalWindow from \"../modalWindow/ModalWindow\"\r\n\r\nconst ClearLocalStorageModalBody = ({ close, saveButtonHandler\r\n\t, cancelButtonHandler }) => {\r\n\treturn (\r\n\t\t<ModalWindow close={close} saveButton={true}\r\n\t\t\tsaveButtonName={\"Сохранить\"}\r\n\t\t\tcancelButton={true}\r\n\t\t\tcancelButtonName={\"Отменить\"}\r\n\t\t\tsaveButtonHandler={saveButtonHandler}\r\n\t\t\tcancelButtonHandler={cancelButtonHandler}>\r\n\t\t\t<h3>Сбросить все настройки</h3>\r\n\t\t</ModalWindow>\r\n\t)\r\n};\r\n\r\nexport default ClearLocalStorageModalBody;","import React, { Component } from \"react\";\r\nimport Button from \"../button/Button\";\r\nimport ClearLocalStorageModalBody from \"./ClearSettingsModalBody\";\r\n\r\nexport default class ClearLocalStorage extends Component {\r\n\tstate = {\r\n\t\tmodalIsOpen: false\r\n\t}\r\n\r\n\tmodalOpenerHandler = () => {\r\n\t\tthis.setState(prev => ({\r\n\t\t\tmodalIsOpen: !prev.modalIsOpen\r\n\t\t}));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { modalIsOpen } = this.state;\r\n\t\tconst { modalOpenerHandler } = this;\r\n\t\treturn (\r\n\t\t\t<div className=\"changeRangeOfNotes\">\r\n\t\t\t\t<h3>Сбросить настройки:</h3>\r\n\t\t\t\t<Button onClick={modalOpenerHandler}>\r\n\t\t\t\t\tСбросить все настройки\r\n\t\t\t\t</Button>\r\n\t\t\t\t{modalIsOpen ? <ClearLocalStorageModalBody close={this.modalOpenerHandler} /> : null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport ChangeRangeOfNotes from '../../containers/changeRangeOfNotesContainer';\r\nimport './settings.css';\r\nimport ClearLocalStorage from '../clearSettings/ClearSettings';\r\n\r\nexport default class Settings extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.actionUpdatePianoKeys();\r\n\t\tthis.props.actionSetMode({ mode: 'Настройки', stat: false });\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"settings\">\r\n\t\t\t\t<ChangeRangeOfNotes />\r\n\t\t\t\t<ClearLocalStorage />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import Settings from \"../components/settings/Settings\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n\tactionSetMode\r\n} from \"../store/actions/applicationActions\";\r\n\r\nimport {\r\n\tactionUpdatePianoKeys\r\n} from \"../store/actions/pianoActions\";\r\n\r\nconst mapStateToProps = () => ({})\r\n\r\nconst mapDispatchToProps = {\r\n\tactionSetMode,\r\n\tactionUpdatePianoKeys\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport MIDISounds from \"midi-sounds-react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport Menu from \"./containers/menuContainer\";\r\nimport Header from \"./containers/headerContainer\";\r\nimport Piano from \"./containers/pianoContainer\";\r\n\r\nimport Intervals from \"./components/intervals/Intervals\";\r\nimport ActivateMidiContainer from \"./containers/activateMidiContainer\";\r\nimport FindNote from \"./containers/findNoteContainer\";\r\nimport Dictation from \"./containers/dictationContainter\";\r\nimport FreeMode from \"./containers/freeModeContainer\";\r\nimport Settings from \"./containers/settingsContainer\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    var bpm = 80;\r\n    var N = (4 * 60) / bpm;\r\n    var duration = N / 4;\r\n    this.setState({ duration });\r\n    // this.setState(this.state);\r\n    // this.midiSounds.playChordNow(1, [60], 1);\r\n    this.midiSounds.setEchoLevel(0);\r\n\r\n    document.getElementById(\"root\").addEventListener(\"click\", () => {\r\n      if (this.props.menuIsOpen) {\r\n        this.props.actionMenuAction(false);\r\n      }\r\n    });\r\n\r\n    document.body.addEventListener(\"keyup\", e => {\r\n      if (e.keyCode === 27) {\r\n        this.props.actionMenuAction();\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n  play = (key, onlyPlay) => {\r\n    const { duration } = this.state;\r\n    this.midiSounds.playChordNow(1, [key], duration);\r\n\r\n    if (!onlyPlay) {\r\n      if (this.props.needToWriteNote) {\r\n        const note = this.props.sliceArr.find(elem => elem.key === key);\r\n\r\n        if (this.props.modeDictation) {\r\n          this.props.actionWritePlayNote(note, true);\r\n        } else {\r\n          this.props.actionWritePlayNote(note, false);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Menu play={this.play} />\r\n        <Header />\r\n        <Piano play={this.play} />\r\n\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => <FreeMode />}\r\n          />\r\n          <Route\r\n            path=\"/intervals\"\r\n            render={() => <Intervals play={this.play} />}\r\n          />\r\n          <Route\r\n            path=\"/find-note\"\r\n            render={() => <FindNote play={this.play} />}\r\n          />\r\n          <Route\r\n            path=\"/dictation\"\r\n            render={() => <Dictation play={this.play} />}\r\n          />\r\n          <Route path=\"/options\" render={() => <Settings />} />\r\n        </Switch>\r\n\r\n        <ActivateMidiContainer play={this.play} />\r\n        <div className=\"midiComponent\" style={{ display: \"none\" }}>\r\n          <MIDISounds\r\n            ref={ref => (this.midiSounds = ref)}\r\n            appElementName=\"root\"\r\n            instruments={[1]}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import App from \"../App\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  actionMenuAction,\r\n  actionWritePlayNote\r\n} from \"../store/actions/applicationActions\";\r\n\r\nconst mapStateToProps = ({ application, piano }) => ({\r\n  menuIsOpen: application.menuIsOpen,\r\n  note: application.note,\r\n  needToWriteNote: application.needToWriteNote,\r\n  modeDictation: application.modeDictation,\r\n  sliceArr: piano.sliceArr,\r\n  mapIndex: piano.mapIndex\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  actionMenuAction,\r\n  actionWritePlayNote\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  MENU_ACTION,\r\n  NEED_TO_WRITE_NOTE,\r\n  WRITE_PLAY_NOTE,\r\n  INIT_DICTATION,\r\n  SET_MODE\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  menuIsOpen: false,\r\n  playNote: null,\r\n  needToWriteNote: false,\r\n  modeDictation: false,\r\n  mode: \"\",\r\n  stat: true\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MENU_ACTION: {\r\n      let { menuIsOpen } = state;\r\n      let { isOpen } = action.payload;\r\n\r\n      if (typeof isOpen === \"boolean\") {\r\n        menuIsOpen = isOpen;\r\n      } else {\r\n        menuIsOpen = !menuIsOpen;\r\n      }\r\n\r\n      return { ...state, menuIsOpen };\r\n    }\r\n\r\n    case NEED_TO_WRITE_NOTE: {\r\n      return {\r\n        ...state,\r\n        needToWriteNote: action.payload || false,\r\n        playNote: null\r\n      };\r\n    }\r\n\r\n    case WRITE_PLAY_NOTE: {\r\n      return {\r\n        ...state,\r\n        playNote: { ...action.payload },\r\n        needToWriteNote: action.needToWriteNote\r\n      };\r\n    }\r\n\r\n    case INIT_DICTATION: {\r\n      return { ...state, modeDictation: action.payload };\r\n    }\r\n\r\n    case SET_MODE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  getBaseArrayOfNotes,\r\n  getFullArrayAndMapIndexes,\r\n  setVisualEffect\r\n} from \"../arrayOfNotes\";\r\n\r\nimport {\r\n  UPDATE_PIANO_KEYS,\r\n  SET_BORDERS_OF_RANGE,\r\n  SHOW_NOTES_ON_THE_PIANO\r\n} from \"../actionTypes\";\r\n\r\nimport { dataOfIntervals } from \"../dataOfIntervals\";\r\n\r\nconst baseArrOfNotes = getBaseArrayOfNotes();\r\nconst { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(baseArrOfNotes);\r\nconst numberOfSemitones = dataOfIntervals.map(elem => elem.numberOfSemitones);\r\nconst minAmountOfNotes = Math.max.apply(null, numberOfSemitones);\r\n\r\nconst initialState = {\r\n  baseArrOfNotes,\r\n  arrOfNotes,\r\n  mapIndex,\r\n  firstBorder: { index: 0, key: baseArrOfNotes[0].key },\r\n  secondBorder: {\r\n    index: baseArrOfNotes.length - 1,\r\n    key: baseArrOfNotes[baseArrOfNotes.length - 1].key\r\n  },\r\n  sliceArr: baseArrOfNotes,\r\n  minAmountOfNotes\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_BORDERS_OF_RANGE: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    case UPDATE_PIANO_KEYS: {\r\n      const sliceArr = getBaseArrayOfNotes(\r\n        state.firstBorder.index,\r\n        state.secondBorder.index\r\n      );\r\n      const { arrOfNotes, mapIndex } = getFullArrayAndMapIndexes(sliceArr);\r\n\r\n      return { ...state, arrOfNotes, sliceArr, mapIndex };\r\n    }\r\n\r\n    case SHOW_NOTES_ON_THE_PIANO: {\r\n      let { arrOfNotes, mapIndex } = state;\r\n\r\n      const { sequence, type } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        arrOfNotes: setVisualEffect({\r\n          arrOfNotes,\r\n          sequence,\r\n          type,\r\n          active: true,\r\n          mapIndex\r\n        })\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  dataOfIntervals,\r\n  getChosenIntervals,\r\n  getNewInterval,\r\n  getNewSequenceOfNotes\r\n} from \"../dataOfIntervals\";\r\n\r\nimport {\r\n  SET_ACTIVE_TYPE_OF_INTERVAL,\r\n  INTERVALS_SETTINGS_ACTION,\r\n  INVERSE_CHOSEN_INTERVAL,\r\n  SHOW_THE_CORRECT_INTERVAL,\r\n  GET_NEXT_INTERVAL\r\n} from \"../actionTypes\";\r\n\r\nconst allIntervals = [...dataOfIntervals];\r\n\r\nconst getNewActiveInterval = arr => {\r\n  let chosenIntervals = getChosenIntervals(arr);\r\n\r\n  let activeInterval = getNewInterval(chosenIntervals);\r\n\r\n  return activeInterval;\r\n};\r\n\r\nconst initialState = {\r\n  allIntervals,\r\n  typeOfInterval: \"melodicUp\",\r\n  activeInterval: \"\",\r\n  nextActiveInterval: \"\",\r\n  sequenceOfNotes: [],\r\n  settingsIsOpen: false,\r\n  showAnswer: false\r\n};\r\n\r\nconst findIndex = (arr, name) => {\r\n  const index = arr.findIndex(obj => obj.name === name);\r\n  return index;\r\n};\r\n\r\nconst getLengthOfChosenIntervals = arr => {\r\n  return arr.reduce((sum, elem) => {\r\n    return elem.chosen ? sum + 1 : sum;\r\n  }, 0);\r\n};\r\n\r\nconst getNewData = ({\r\n  initNewIntervalSequence,\r\n  nextActiveInterval,\r\n  nextSequenceOfNotes,\r\n  sliceArr\r\n}) => {\r\n  const activeInterval = !initNewIntervalSequence\r\n    ? nextActiveInterval\r\n      ? nextActiveInterval\r\n      : getNewActiveInterval(allIntervals)\r\n    : getNewActiveInterval(allIntervals);\r\n\r\n  const sequenceOfNotes = !initNewIntervalSequence\r\n    ? nextSequenceOfNotes\r\n      ? nextSequenceOfNotes\r\n      : getNewSequenceOfNotes(sliceArr, activeInterval)\r\n    : getNewSequenceOfNotes(sliceArr, activeInterval);\r\n\r\n  nextActiveInterval = getNewActiveInterval(allIntervals);\r\n  nextSequenceOfNotes = getNewSequenceOfNotes(sliceArr, nextActiveInterval);\r\n\r\n  return {\r\n    sequenceOfNotes,\r\n    nextActiveInterval,\r\n    nextSequenceOfNotes,\r\n    activeInterval\r\n  };\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_TYPE_OF_INTERVAL: {\r\n      return { ...state, typeOfInterval: action.payload };\r\n    }\r\n\r\n    case INTERVALS_SETTINGS_ACTION: {\r\n      const settingsIsOpen = action.payload;\r\n      return { ...state, settingsIsOpen };\r\n    }\r\n\r\n    case INVERSE_CHOSEN_INTERVAL: {\r\n      const { payload } = action;\r\n      const chosen = payload.chosen;\r\n\r\n      const allIntervals = [...state.allIntervals];\r\n\r\n      if (chosen && getLengthOfChosenIntervals(allIntervals) <= 2) {\r\n        return { ...state };\r\n      }\r\n\r\n      const index = findIndex(allIntervals, payload.name);\r\n      payload.chosen = !payload.chosen;\r\n\r\n      allIntervals[index] = payload;\r\n\r\n      return { ...state, allIntervals };\r\n    }\r\n\r\n    case SHOW_THE_CORRECT_INTERVAL: {\r\n      return { ...state, showAnswer: true };\r\n    }\r\n\r\n    case GET_NEXT_INTERVAL: {\r\n      const { sliceArr, initNewIntervalSequence } = action.payload;\r\n      const { allIntervals } = state;\r\n\r\n      let {\r\n        sequenceOfNotes,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes,\r\n        activeInterval\r\n      } = getNewData({\r\n        sliceArr,\r\n        initNewIntervalSequence,\r\n        allIntervals,\r\n        nextActiveInterval: state.nextActiveInterval,\r\n        nextSequenceOfNotes: state.nextSequenceOfNotes\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        activeInterval,\r\n        sequenceOfNotes,\r\n        showAnswer: false,\r\n        nextActiveInterval,\r\n        nextSequenceOfNotes\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import {\r\n  INCREMENT_RIGHT_ANSWERS,\r\n  INCREMENT_AMOUNT_OF_ANSWERS,\r\n  NEXT_BUTTON_CLICK,\r\n  STATISTICS_CLEARING,\r\n  STATISTICS_HIDE_ANSWER\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  nameOfInterval: \"\",\r\n  rightAnswers: 0,\r\n  amountOfAnswers: 0,\r\n  right: false,\r\n  showAnswer: false\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case STATISTICS_CLEARING: {\r\n      return { ...state, ...initialState };\r\n    }\r\n\r\n    case INCREMENT_RIGHT_ANSWERS: {\r\n      const rightAnswers = state.rightAnswers + 1;\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        rightAnswers,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: true,\r\n        showAnswer: true\r\n      };\r\n    }\r\n    case INCREMENT_AMOUNT_OF_ANSWERS: {\r\n      const amountOfAnswers = state.amountOfAnswers + 1;\r\n      return {\r\n        ...state,\r\n        amountOfAnswers,\r\n        nameOfInterval: action.payload ? action.payload : null,\r\n        right: false,\r\n        showAnswer: true\r\n      };\r\n    }\r\n\r\n    case NEXT_BUTTON_CLICK: {\r\n      return { ...state, nameOfInterval: \"\", right: false };\r\n    }\r\n\r\n    case STATISTICS_HIDE_ANSWER: {\r\n      return { ...state, showAnswer: false };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { SET_ACTIVE_NOTE } from \"../actionTypes\";\r\n\r\nconst initialState = { note: null };\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_NOTE: {\r\n      const sliceArr = action.sliceArr;\r\n      const note = sliceArr[Math.floor(Math.random() * sliceArr.length)].key;\r\n\r\n      return { ...state, note };\r\n    }\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import {\r\n  GET_NEW_MELODY,\r\n  CHANGE_MODE,\r\n  ADD_NOTE_TO_ANSWER_ARRAY,\r\n  POP_LAST_ELEM_FROM_ANSWER_ARRAY,\r\n  WRITE_ANSWERS,\r\n  CLEAR_WRITTEN_MELODY,\r\n  CHANGE_SETTINGS\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  amountOfNotes: 4,\r\n  sequenceOfMelody: [],\r\n  sequenceOfWrittenMelody: [],\r\n  defaultModeWrite: false,\r\n  answers: [],\r\n  answerGiven: false\r\n};\r\n\r\nconst getNewMelody = ({ sliceArr, amountOfNotes }) => {\r\n  const sequence = [];\r\n  for (let i = 0; i < amountOfNotes; i++) {\r\n    const note = { ...sliceArr[Math.floor(Math.random() * sliceArr.length)] };\r\n    sequence.push(note);\r\n  }\r\n\r\n  return sequence;\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_NEW_MELODY: {\r\n      const { amountOfNotes } = state;\r\n\r\n      const sliceArr = [...action.sliceArr];\r\n\r\n      const sequenceOfMelody = getNewMelody({ sliceArr, amountOfNotes });\r\n\r\n      return { ...state, sequenceOfMelody };\r\n    }\r\n    case CHANGE_MODE: {\r\n      const modeWrite = action.payload;\r\n      return { ...state, modeWrite };\r\n    }\r\n    case ADD_NOTE_TO_ANSWER_ARRAY: {\r\n      const { sequenceOfWrittenMelody } = state;\r\n      sequenceOfWrittenMelody.push(action.payload);\r\n\r\n      return { ...state, sequenceOfWrittenMelody };\r\n    }\r\n\r\n    case POP_LAST_ELEM_FROM_ANSWER_ARRAY: {\r\n      const sequenceOfWrittenMelody = [...state.sequenceOfWrittenMelody];\r\n\r\n      if (sequenceOfWrittenMelody.length > 0) {\r\n        sequenceOfWrittenMelody.pop();\r\n      }\r\n\r\n      return { ...state, sequenceOfWrittenMelody };\r\n    }\r\n\r\n    case WRITE_ANSWERS: {\r\n      const answerGiven = action.payload.length > 0;\r\n      return { ...state, answers: action.payload, answerGiven };\r\n    }\r\n\r\n    case CLEAR_WRITTEN_MELODY: {\r\n      return { ...state, sequenceOfWrittenMelody: [] };\r\n    }\r\n\r\n    case CHANGE_SETTINGS: {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport application from \"./applicationReducer\";\r\nimport piano from \"./pianoReducer\";\r\nimport intervals from \"./intervalsReducer\";\r\nimport statistics from \"./statisticsReducer\";\r\nimport notes from \"./notesReducer\";\r\nimport dictation from \"./dictationReducer\";\r\n\r\nexport default combineReducers({\r\n  application,\r\n  piano,\r\n  intervals,\r\n  statistics,\r\n  notes,\r\n  dictation\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistedState = localStorage.getItem(\"reduxState\")\r\n  ? JSON.parse(localStorage.getItem(\"reduxState\"))\r\n  : {};\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nstore.subscribe(() => {\r\n  const state = store.getState();\r\n\r\n  const sliceState = {};\r\n\r\n  sliceState.piano = state.piano;\r\n  sliceState.dictation = state.dictation;\r\n\r\n  const { allIntervals, typeOfInterval } = state.intervals;\r\n  sliceState.intervals = { allIntervals, typeOfInterval };\r\n\r\n  localStorage.setItem(\"reduxState\", JSON.stringify(sliceState));\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/appContainer\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}